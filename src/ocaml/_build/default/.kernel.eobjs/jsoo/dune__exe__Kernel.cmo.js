// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cmo, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Dune__exe__Kernel
//# unitInfo: Requires: CamlinternalOO, Js_of_ocaml__Console, Js_of_ocaml__Js, Js_of_ocaml__Sys_js, Js_of_ocaml_toplevel__JsooTop, Stdlib, Stdlib__Buffer, Stdlib__Format, Stdlib__Printexc, Stdlib__Sys
//# unitInfo: Force_link: true
//# shape: Dune__exe__Kernel:[]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_wrap_exception = runtime.caml_wrap_exception,
    dummy = 0;
   runtime.jsoo_create_file
    ("/static/cmis/dune__exe__Kernel.cmi",
     "Caml1999I031\x84\x95\xa6\xbe\0\0\0\x14\0\0\0\x02\0\0\0\t\0\0\0\x07\xa01Dune__exe__Kernel@\x84\x95\xa6\xbe\0\0\0o\0\0\0\x0f\0\0\0;\0\0\0/\xa0\xa01Dune__exe__Kernel\x900\xb5\xe6\xcdo\xc8\t\x84\xd3CM\xba\xb8q{\x02f\xa0\xa0&Stdlib\x900y\xb0\xe9\xd3\xb6\xf7\xfe\xd0~\xb3\xcc*\xbb\x96\x1b\x91\xa0\xa08CamlinternalFormatBasics\x900\x8f\x8fcEXy\x8e\xe4\b\xdf<P\xa5S\x9b\x15@\x84\x95\xa6\xbe\0\0\0\b\0\0\0\x04\0\0\0\v\0\0\0\v\xa0@\xa0A\xa0\x90@@");
   var global_data = runtime.caml_get_global_data(), cst = ";;";
   global_data.CamlinternalOO;
   var
    Js_of_ocaml_toplevel_JsooTop = global_data.Js_of_ocaml_toplevel__JsooTop,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_Sys_js = global_data.Js_of_ocaml__Sys_js,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Js_of_ocaml_Console = global_data.Js_of_ocaml__Console,
    Stdlib_Format = global_data.Stdlib__Format,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Stdlib_Printexc = global_data.Stdlib__Printexc;
   (function(t0, t1, param){t0.log(t1);}
     (Js_of_ocaml_Console[1], "OCAML SCRIPT IS RUNNING - VERSION 2"));
   var
    a = function(t3, param){return t3.error;}(console),
    io =
      function(t4, t5, param){return {stdout: t4, stderr: t5};}
       (function(t2, param){return t2.log;}(console), a),
    buffer = Stdlib_Buffer[1].call(null, 100),
    formatter = Stdlib_Format[111].call(null, buffer);
   function exec(code){
    Stdlib_Buffer[8].call(null, buffer);
    var
     code_string = runtime.caml_string_of_jsstring(code),
     a = Stdlib[28].call(null, code_string, cst);
    Js_of_ocaml_toplevel_JsooTop[2].call(null, 1, 0, 0, formatter, a);
    return caml_jsstring_of_string(Stdlib_Buffer[2].call(null, buffer));
   }
   function init(param){
    Js_of_ocaml_toplevel_JsooTop[3].call(null, 0);
    Stdlib_Sys[3][1] = 0;
    Js_of_ocaml_Sys_js[1].call
     (null,
      Stdlib[39],
      function(str){return io.stdout(caml_jsstring_of_string(str));});
    Js_of_ocaml_Sys_js[1].call
     (null,
      Stdlib[40],
      function(str){return io.stderr(caml_jsstring_of_string(str));});
    Stdlib_Sys[3][1] = 1;
    return 0;
   }
   var
    cst_ocaml_kernel = "ocaml_kernel",
    cst_OCaml_kernel_failed_to_ini = "OCaml kernel failed to initialize: ";
   try{
    var
     c =
       function(t6, t7, t8, param){return {init: t6, exec: t7, io: t8};}
        (init, exec, io);
    Js_of_ocaml_Js[50].call(null, cst_ocaml_kernel, c);
   }
   catch(exn$0){
    var
     exn = caml_wrap_exception(exn$0),
     msg = Stdlib_Printexc[1].call(null, exn),
     b =
       caml_jsstring_of_string
        (Stdlib[28].call(null, cst_OCaml_kernel_failed_to_ini, msg));
    (function(t9, t10, param){t9.error(t10);}(Js_of_ocaml_Console[1], b));
   }
   var Dune_exe_Kernel = [0];
   runtime.caml_register_global(33, Dune_exe_Kernel, "Dune__exe__Kernel");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLmtlcm5lbC5lb2Jqcy9qc29vL2R1bmVfX2V4ZV9fS2VybmVsLmNtby5qcyIsInNlY3Rpb25zIjpbeyJvZmZzZXQiOnsibGluZSI6MTEsImNvbHVtbiI6MH0sIm1hcCI6eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLmtlcm5lbC5lb2Jqcy9qc29vL2R1bmVfX2V4ZV9fS2VybmVsLmNtby5qcyIsInNvdXJjZXMiOlsiL2J1aWx0aW4vYmxhY2tib3gubWwiLCIvd29ya3NwYWNlX3Jvb3Qva2VybmVsLm1sIl0sInNvdXJjZXNDb250ZW50IjpbIigqIGdlbmVyYXRlZCBjb2RlICopIiwiKCoga2VybmVsLm1sICopXG5vcGVuIEpzX29mX29jYW1sXG5vcGVuIEpzX29mX29jYW1sX3RvcGxldmVsXG5cbmxldCAoKSA9IEpzX29mX29jYW1sLkNvbnNvbGUuY29uc29sZSMjbG9nIChKcy5zdHJpbmcgXCJPQ0FNTCBTQ1JJUFQgSVMgUlVOTklORyAtIFZFUlNJT04gMlwiKVxuXG5cbigqIEFuIG9iamVjdCB0byBkeW5hbWljYWxseSBzZXQgc3RkIHN0cmVhbXMgY2FsbGJhY2tzICopXG5sZXQgaW8gPSBvYmplY3QlanNcbiAgdmFsIHN0ZG91dCA9IChKcy5VbnNhZmUucHVyZV9qc19leHByIFwiY29uc29sZVwiKSMjLmxvZ1xuICB2YWwgc3RkZXJyID0gKEpzLlVuc2FmZS5wdXJlX2pzX2V4cHIgXCJjb25zb2xlXCIpIyMuZXJyb3JcbmVuZFxuXG4oKiBCdWZmZXIgdG8gY2FwdHVyZSB0aGUgb3V0cHV0IG9mIHRoZSB0b3BsZXZlbCAqKVxubGV0IGJ1ZmZlciA9IEJ1ZmZlci5jcmVhdGUgMTAwXG5sZXQgZm9ybWF0dGVyID0gRm9ybWF0LmZvcm1hdHRlcl9vZl9idWZmZXIgYnVmZmVyXG5cbigqIFRoZSBtYWluIGV4ZWN1dGlvbiBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIGZyb20gQysrL0phdmFTY3JpcHQgKilcbmxldCBleGVjIGNvZGUgPVxuICBCdWZmZXIuY2xlYXIgYnVmZmVyO1xuICBsZXQgY29kZV9zdHJpbmcgPSBKcy50b19zdHJpbmcgY29kZSBpblxuICBKc29vVG9wLmV4ZWN1dGUgdHJ1ZSBmb3JtYXR0ZXIgKGNvZGVfc3RyaW5nIF4gXCI7O1wiKTtcbiAgSnMuc3RyaW5nIChCdWZmZXIuY29udGVudHMgYnVmZmVyKVxuXG4oKiBJbml0aWFsaXplIHRoZSB0b3BsZXZlbCBhbmQgZXhwb3J0IHRoZSAnZXhlYycgZnVuY3Rpb24gKilcbmxldCBpbml0ICgpID1cbiAgSnNvb1RvcC5pbml0aWFsaXplICgpO1xuICBTeXMuaW50ZXJhY3RpdmUgOj0gZmFsc2U7XG4gIFN5c19qcy5zZXRfY2hhbm5lbF9mbHVzaGVyIHN0ZG91dCAoZnVuIHN0ciAtPiBKcy5VbnNhZmUubWV0aF9jYWxsIGlvIFwic3Rkb3V0XCIgW3xKcy5VbnNhZmUuaW5qZWN0IChKcy5zdHJpbmcgc3RyKXxdKTtcbiAgU3lzX2pzLnNldF9jaGFubmVsX2ZsdXNoZXIgc3RkZXJyIChmdW4gc3RyIC0+IEpzLlVuc2FmZS5tZXRoX2NhbGwgaW8gXCJzdGRlcnJcIiBbfEpzLlVuc2FmZS5pbmplY3QgKEpzLnN0cmluZyBzdHIpfF0pO1xuICBTeXMuaW50ZXJhY3RpdmUgOj0gdHJ1ZVxuXG4oKiBFeHBvcnQgdGhlIGtlcm5lbCBvYmplY3QgdG8gSmF2YVNjcmlwdCAqKVxubGV0ICgpID1cbiAgdHJ5XG4gICAgSnMuZXhwb3J0IFwib2NhbWxfa2VybmVsXCJcbiAgICAgIChvYmplY3QlanNcbiAgICAgICAgdmFsIGluaXQgPSBpbml0XG4gICAgICAgIHZhbCBleGVjID0gZXhlY1xuICAgICAgICB2YWwgaW8gPSBpb1xuICAgICAgZW5kKVxuICB3aXRoIGV4biAtPlxuICAgICgqIElmIGFueXRoaW5nIGdvZXMgd3JvbmcgZHVyaW5nIHNldHVwLCBsb2cgdGhlIGV4Y2VwdGlvbiB0byB0aGUgY29uc29sZS4gKilcbiAgICBsZXQgbXNnID0gUHJpbnRleGMudG9fc3RyaW5nIGV4biBpblxuICAgIEpzX29mX29jYW1sLkNvbnNvbGUuY29uc29sZSMjZXJyb3IgKEpzLnN0cmluZyAoXCJPQ2FtbCBrZXJuZWwgZmFpbGVkIHRvIGluaXRpYWxpemU6IFwiIF4gbXNnKSkiXSwibmFtZXMiOlsicnVudGltZSIsImNhbWxfanNzdHJpbmdfb2Zfc3RyaW5nIiwiY2FtbF93cmFwX2V4Y2VwdGlvbiIsImR1bW15IiwiZ2xvYmFsX2RhdGEiLCJjc3QiLCJKc19vZl9vY2FtbF90b3BsZXZlbF9Kc29vVG9wIiwiU3RkbGliX1N5cyIsIlN0ZGxpYiIsIkpzX29mX29jYW1sX1N5c19qcyIsIlN0ZGxpYl9CdWZmZXIiLCJKc19vZl9vY2FtbF9Db25zb2xlIiwiU3RkbGliX0Zvcm1hdCIsIkpzX29mX29jYW1sX0pzIiwiU3RkbGliX1ByaW50ZXhjIiwidDAiLCJ0MSIsInBhcmFtIiwidDMiLCJpbyIsInQ0IiwidDUiLCJ0MiIsImJ1ZmZlciIsImZvcm1hdHRlciIsImV4ZWMiLCJjb2RlIiwiY29kZV9zdHJpbmciLCJpbml0Iiwic3RyIiwiY3N0X29jYW1sX2tlcm5lbCIsImNzdF9PQ2FtbF9rZXJuZWxfZmFpbGVkX3RvX2luaSIsInQ2IiwidDciLCJ0OCIsImV4biIsIm1zZyIsInQ5IiwidDEwIiwiRHVuZV9leGVfS2VybmVsIl0sIm1hcHBpbmdzIjoiSUFBQUEsVUFBQTtBQUFBLElBQUFDLDBCQUFBO0FBQUEsSUFBQUMsc0JBQUE7QUFBQSxJQUFBQyxRQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBQUMsY0FBQSxnQ0FBQUMsTUFBQTtBQUFBO0FBQUE7QUFBQSxJQUFBQywrQkFBQTtBQUFBLElBQUFDLGFBQUE7QUFBQSxJQUFBQyxTQUFBO0FBQUEsSUFBQUMscUJBQUE7QUFBQSxJQUFBQyxnQkFBQTtBQUFBLElBQUFDLHNCQUFBO0FBQUEsSUFBQUMsZ0JBQUE7QUFBQSxJQUFBQyxpQkFBQTtBQUFBLElBQUFDLGtCQUFBO0FBQUEsR0NJUyxVQUFBQyxJQUFBQyxJQUFBQyxPREpUO0FBQUEsS0NJUztBQUFBO0FBQUEsUUFNTSxTQUFBQyxJQUFBRCxPRFZmLGlCQ1VlO0FBQUEsSUFBQUU7QUFBQUEsTUFGTixTQUFBQyxJQUFBQyxJQUFBSixPRFJUO0FBQUEsT0NRUyxDQUNNLFNBQUFLLElBQUFMLE9EVGYsZUNTZTtBQUFBLElBQUFNLFNBS0Y7QUFBQSxJQUFBQyxZQUNHO0FBQUEsWUFBQUMsS0FBQUM7QUFBQUEsSUFJZDtBQUFBO0FBQUEsS0FBQUMsY0FDa0I7QUFBQSxTQUNhO0FBQUEsSUFBL0I7QUFBQSxJQUNVLE9BQVYsd0JBQVUsb0NBQXdCO0FBQUE7QUFBQSxZQUFBQyxLQUFBWDtBQUFBQSxJQUlsQztBQUFBLElBQXFCO0FBQUEsSUFFckI7QUFBQTtBQUFBO0FBQUEsZUFBQVksS0FBaUcsT0FBbkQsVUFBbUQsNkJBQWlCO0FBQUEsSUFDbEg7QUFBQTtBQUFBO0FBQUEsZUFBQUEsS0FBaUcsT0FBbkQsVUFBbUQsNkJBQWlCO0FBQUEsSUFBQztBQUFBO0FBQUEsR0FDNUY7QUFBQTtBQUFBLElBQUFDLG1CQWZ3QjtBQUFBLElBQUFDLGlDQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FxQjNDLFNBQUFDLElBQUFDLElBQUFDLElBQUFqQixPRHBDTjtBQUFBLFFDb0NNO0FBQUEsSUFERjtBQUFBO0FBQUEsU0FBQWtCO0FBQUFBO0FBQUFBLEtBQUFBLE1EbkNKO0FBQUEsS0FBQUMsTUMyQ2M7QUFBQTtBQUFBLE9BQ3lCO0FBQUEsU0FBVztBQUFBLElBQTlDLFVBQUFDLElBQUFDLEtBQUFyQixPRDVDSixlQzRDSTtBQUFBO0FBQUEsT0FBQXNCLGtCQTdCNkM7QUFBQTtBQUFBO0FBQUEsRURmakQiLCJpZ25vcmVMaXN0IjpbMF19fV19
