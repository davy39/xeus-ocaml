// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Str
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Int, Stdlib__List, Stdlib__Map, Stdlib__String
//# unitInfo: Force_link: true
//# shape: Str:[F(1),F(1),F(1),F(1),F(1),F(3),F(3),F(3),F(3),F(1),F(1),F(1),F(2),F(1),F(1),F(3),F(3),F(3),F(3),F(2),F(2),F(3),F(2),F(3),F(2),F(3),F(2),F(2),F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_str_ml = "str.ml",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var dummy = 0;
   runtime.jsoo_create_file
    ("/static/cmis/str.cmi",
     "Caml1999I031\x84\x95\xa6\xbe\0\0\x11\x16\0\0\x03G\0\0\f\xc3\0\0\f\x84\xa0#Str\xa0\xc1\xa0&regexp\x01\x01-\b\0\x008\0@@@A@@@@@\xb0\xc0'str.mliV\x01\x04\x96\x01\x04\x96\xc0\x04\x02V\x01\x04\x96\x01\x04\xa1@@@@\xa1\x04\v@A@\xa0\xb0\xa0&regexp\x01\x01.\xd0\xc0\xc1@\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\x01\xff[\xc0\xb3\x90\x04\x18@\x90@\x02\x05\xf5\xe1\0@\x01\xff\\@\x02\x05\xf5\xe1\0@\x01\xff]@\xb0\xc0\x04\x16Z\x01\x04\xd5\x01\x04\xd5\xc0\x04\x17Z\x01\x04\xd5\x01\x04\xf2@@\xa1\x04 A@\xa0\xb0\xa00regexp_case_fold\x01\x01/\xd0\xc0\xc1@\xc0\xb3\x90\x04\x15@\x90@\x02\x05\xf5\xe1\0@\x01\xff^\xc0\xb3\x04\x13@\x90@\x02\x05\xf5\xe1\0@\x01\xff_@\x02\x05\xf5\xe1\0@\x01\xff`@\xb0\xc0\x04(\0J\x01\r\xcd\x01\r\xcd\xc0\x04)\0J\x01\r\xcd\x01\r\xf4@@\xa1\x042B@\xa0\xb0\xa0%quote\x01\x010\xd0\xc0\xc1@\xc0\xb3\x90\x04'@\x90@\x02\x05\xf5\xe1\0@\x01\xffa\xc0\xb3\x90\x04+@\x90@\x02\x05\xf5\xe1\0@\x01\xffb@\x02\x05\xf5\xe1\0@\x01\xffc@\xb0\xc0\x04;\0O\x01\x0e\x9d\x01\x0e\x9d\xc0\x04<\0O\x01\x0e\x9d\x01\x0e\xb9@@\xa1\x04EC@\xa0\xb0\xa0-regexp_string\x01\x011\xd0\xc0\xc1@\xc0\xb3\x90\x04:@\x90@\x02\x05\xf5\xe1\0@\x01\xffd\xc0\xb3\x048@\x90@\x02\x05\xf5\xe1\0@\x01\xffe@\x02\x05\xf5\xe1\0@\x01\xfff@\xb0\xc0\x04M\0S\x01\x0f\x16\x01\x0f\x16\xc0\x04N\0S\x01\x0f\x16\x01\x0f:@@\xa1\x04WD@\xa0\xb0\xa07regexp_string_case_fold\x01\x012\xd0\xc0\xc1@\xc0\xb3\x90\x04L@\x90@\x02\x05\xf5\xe1\0@\x01\xffg\xc0\xb3\x04J@\x90@\x02\x05\xf5\xe1\0@\x01\xffh@\x02\x05\xf5\xe1\0@\x01\xffi@\xb0\xc0\x04_\0W\x01\x0f\xa3\x01\x0f\xa3\xc0\x04`\0W\x01\x0f\xa3\x01\x0f\xd1@@\xa1\x04iE@\xa0\xb0\xa0,string_match\x01\x013\xd0\xc0\xc1@\xc0\xb3\x04X@\x90@\x02\x05\xf5\xe1\0@\x01\xffj\xc0\xc1@\xc0\xb3\x90\x04c@\x90@\x02\x05\xf5\xe1\0@\x01\xffk\xc0\xc1@\xc0\xb3\x90\xa3#intA@\x90@\x02\x05\xf5\xe1\0@\x01\xffl\xc0\xb3\x90\xa3$boolE@\x90@\x02\x05\xf5\xe1\0@\x01\xffm@\x02\x05\xf5\xe1\0@\x01\xffn@\x02\x05\xf5\xe1\0@\x01\xffo@\x02\x05\xf5\xe1\0@\x01\xffp@\xb0\xc0\x04\x81\0_\x01\x10}\x01\x10}\xc0\x04\x82\0_\x01\x10}\x01\x10\xaf@@\xa1\x04\x8bF@\xa0\xb0\xa0.search_forward\x01\x014\xd0\xc0\xc1@\xc0\xb3\x04z@\x90@\x02\x05\xf5\xe1\0@\x01\xffq\xc0\xc1@\xc0\xb3\x90\x04\x85@\x90@\x02\x05\xf5\xe1\0@\x01\xffr\xc0\xc1@\xc0\xb3\x90\x04\"@\x90@\x02\x05\xf5\xe1\0@\x01\xffs\xc0\xb3\x90\x04&@\x90@\x02\x05\xf5\xe1\0@\x01\xfft@\x02\x05\xf5\xe1\0@\x01\xffu@\x02\x05\xf5\xe1\0@\x01\xffv@\x02\x05\xf5\xe1\0@\x01\xffw@\xb0\xc0\x04\x9f\0d\x01\x11x\x01\x11x\xc0\x04\xa0\0d\x01\x11x\x01\x11\xab@@\xa1\x04\xa9G@\xa0\xb0\xa0/search_backward\x01\x015\xd0\xc0\xc1@\xc0\xb3\x04\x98@\x90@\x02\x05\xf5\xe1\0@\x01\xffx\xc0\xc1@\xc0\xb3\x90\x04\xa3@\x90@\x02\x05\xf5\xe1\0@\x01\xffy\xc0\xc1@\xc0\xb3\x90\x04@@\x90@\x02\x05\xf5\xe1\0@\x01\xffz\xc0\xb3\x90\x04D@\x90@\x02\x05\xf5\xe1\0@\x01\xff{@\x02\x05\xf5\xe1\0@\x01\xff|@\x02\x05\xf5\xe1\0@\x01\xff}@\x02\x05\xf5\xe1\0@\x01\xff~@\xb0\xc0\x04\xbd\0l\x01\x12\xec\x01\x12\xec\xc0\x04\xbe\0l\x01\x12\xec\x01\x13 @@\xa1\x04\xc7H@\xa0\xb0\xa04string_partial_match\x01\x016\xd0\xc0\xc1@\xc0\xb3\x04\xb6@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x7f\xc0\xc1@\xc0\xb3\x90\x04\xc1@\x90@\x02\x05\xf5\xe1\0@\0\x80\xc0\xc1@\xc0\xb3\x90\x04^@\x90@\x02\x05\xf5\xe1\0@\0\x81\xc0\xb3\x90\x04\\@\x90@\x02\x05\xf5\xe1\0@\0\x82@\x02\x05\xf5\xe1\0@\0\x83@\x02\x05\xf5\xe1\0@\0\x84@\x02\x05\xf5\xe1\0@\0\x85@\xb0\xc0\x04\xdb\0t\x01\x14|\x01\x14|\xc0\x04\xdc\0t\x01\x14|\x01\x14\xb6@@\xa1\x04\xe5I@\xa0\xb0\xa0.matched_string\x01\x017\xd0\xc0\xc1@\xc0\xb3\x90\x04\xda@\x90@\x02\x05\xf5\xe1\0@\0\x86\xc0\xb3\x90\x04\xde@\x90@\x02\x05\xf5\xe1\0@\0\x87@\x02\x05\xf5\xe1\0@\0\x88@\xb0\xc0\x04\xee\0y\x01\x15i\x01\x15i\xc0\x04\xef\0y\x01\x15i\x01\x15\x8e@@\xa1\x04\xf8J@\xa0\xb0\xa0/match_beginning\x01\x018\xd0\xc0\xc1@\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\x89\xc0\xb3\x90\x04\x8a@\x90@\x02\x05\xf5\xe1\0@\0\x8a@\x02\x05\xf5\xe1\0@\0\x8b@\xb0\xc0\x05\x01\x03\x01\0\x95\x01\x19:\x01\x19:\xc0\x05\x01\x04\x01\0\x95\x01\x19:\x01\x19[@@\xa1\x05\x01\rK@\xa0\xb0\xa0)match_end\x01\x019\xd0\xc0\xc1@\xc0\xb3\x90\x04\x15@\x90@\x02\x05\xf5\xe1\0@\0\x8c\xc0\xb3\x90\x04\x9d@\x90@\x02\x05\xf5\xe1\0@\0\x8d@\x02\x05\xf5\xe1\0@\0\x8e@\xb0\xc0\x05\x01\x16\x01\0\x9a\x01\x1a*\x01\x1a*\xc0\x05\x01\x17\x01\0\x9a\x01\x1a*\x01\x1aE@@\xa1\x05\x01 L@\xa0\xb0\xa0-matched_group\x01\x01:\xd0\xc0\xc1@\xc0\xb3\x90\x04\xac@\x90@\x02\x05\xf5\xe1\0@\0\x8f\xc0\xc1@\xc0\xb3\x90\x05\x01\x1b@\x90@\x02\x05\xf5\xe1\0@\0\x90\xc0\xb3\x90\x05\x01\x1f@\x90@\x02\x05\xf5\xe1\0@\0\x91@\x02\x05\xf5\xe1\0@\0\x92@\x02\x05\xf5\xe1\0@\0\x93@\xb0\xc0\x05\x01/\x01\0\xa0\x01\x1b(\x01\x1b(\xc0\x05\x010\x01\0\xa0\x01\x1b(\x01\x1bS@@\xa1\x05\x019M@\xa0\xb0\xa0/group_beginning\x01\x01;\xd0\xc0\xc1@\xc0\xb3\x90\x04\xc5@\x90@\x02\x05\xf5\xe1\0@\0\x94\xc0\xb3\x90\x04\xc9@\x90@\x02\x05\xf5\xe1\0@\0\x95@\x02\x05\xf5\xe1\0@\0\x96@\xb0\xc0\x05\x01B\x01\0\xaf\x01\x1eo\x01\x1eo\xc0\x05\x01C\x01\0\xaf\x01\x1eo\x01\x1e\x8f@@\xa1\x05\x01LN@\xa0\xb0\xa0)group_end\x01\x01<\xd0\xc0\xc1@\xc0\xb3\x90\x04\xd8@\x90@\x02\x05\xf5\xe1\0@\0\x97\xc0\xb3\x90\x04\xdc@\x90@\x02\x05\xf5\xe1\0@\0\x98@\x02\x05\xf5\xe1\0@\0\x99@\xb0\xc0\x05\x01U\x01\0\xb9\x01 P\x01 P\xc0\x05\x01V\x01\0\xb9\x01 P\x01 j@@\xa1\x05\x01_O@\xa0\xb0\xa0.global_replace\x01\x01=\xd0\xc0\xc1@\xc0\xb3\x05\x01N@\x90@\x02\x05\xf5\xe1\0@\0\x9a\xc0\xc1@\xc0\xb3\x90\x05\x01Y@\x90@\x02\x05\xf5\xe1\0@\0\x9b\xc0\xc1@\xc0\xb3\x90\x05\x01_@\x90@\x02\x05\xf5\xe1\0@\0\x9c\xc0\xb3\x90\x05\x01c@\x90@\x02\x05\xf5\xe1\0@\0\x9d@\x02\x05\xf5\xe1\0@\0\x9e@\x02\x05\xf5\xe1\0@\0\x9f@\x02\x05\xf5\xe1\0@\0\xa0@\xb0\xc0\x05\x01s\x01\0\xc8\x01\"U\x01\"U\xc0\x05\x01t\x01\0\xc8\x01\"U\x01\"\x8e@@\xa1\x05\x01}P@\xa0\xb0\xa0-replace_first\x01\x01>\xd0\xc0\xc1@\xc0\xb3\x05\x01l@\x90@\x02\x05\xf5\xe1\0@\0\xa1\xc0\xc1@\xc0\xb3\x90\x05\x01w@\x90@\x02\x05\xf5\xe1\0@\0\xa2\xc0\xc1@\xc0\xb3\x90\x05\x01}@\x90@\x02\x05\xf5\xe1\0@\0\xa3\xc0\xb3\x90\x05\x01\x81@\x90@\x02\x05\xf5\xe1\0@\0\xa4@\x02\x05\xf5\xe1\0@\0\xa5@\x02\x05\xf5\xe1\0@\0\xa6@\x02\x05\xf5\xe1\0@\0\xa7@\xb0\xc0\x05\x01\x91\x01\0\xd0\x01$)\x01$)\xc0\x05\x01\x92\x01\0\xd0\x01$)\x01$a@@\xa1\x05\x01\x9bQ@\xa0\xb0\xa01global_substitute\x01\x01?\xd0\xc0\xc1@\xc0\xb3\x05\x01\x8a@\x90@\x02\x05\xf5\xe1\0@\0\xa8\xc0\xc1@\xc0\xc1@\xc0\xb3\x90\x05\x01\x97@\x90@\x02\x05\xf5\xe1\0@\0\xa9\xc0\xb3\x90\x05\x01\x9b@\x90@\x02\x05\xf5\xe1\0@\0\xaa@\x02\x05\xf5\xe1\0@\0\xab\xc0\xc1@\xc0\xb3\x90\x05\x01\xa1@\x90@\x02\x05\xf5\xe1\0@\0\xac\xc0\xb3\x90\x05\x01\xa5@\x90@\x02\x05\xf5\xe1\0@\0\xad@\x02\x05\xf5\xe1\0@\0\xae@\x02\x05\xf5\xe1\0@\0\xaf@\x02\x05\xf5\xe1\0@\0\xb0@\xb0\xc0\x05\x01\xb5\x01\0\xd4\x01$\xde\x01$\xde\xc0\x05\x01\xb6\x01\0\xd4\x01$\xde\x01%&@@\xa1\x05\x01\xbfR@\xa0\xb0\xa00substitute_first\x01\x01@\xd0\xc0\xc1@\xc0\xb3\x05\x01\xae@\x90@\x02\x05\xf5\xe1\0@\0\xb1\xc0\xc1@\xc0\xc1@\xc0\xb3\x90\x05\x01\xbb@\x90@\x02\x05\xf5\xe1\0@\0\xb2\xc0\xb3\x90\x05\x01\xbf@\x90@\x02\x05\xf5\xe1\0@\0\xb3@\x02\x05\xf5\xe1\0@\0\xb4\xc0\xc1@\xc0\xb3\x90\x05\x01\xc5@\x90@\x02\x05\xf5\xe1\0@\0\xb5\xc0\xb3\x90\x05\x01\xc9@\x90@\x02\x05\xf5\xe1\0@\0\xb6@\x02\x05\xf5\xe1\0@\0\xb7@\x02\x05\xf5\xe1\0@\0\xb8@\x02\x05\xf5\xe1\0@\0\xb9@\xb0\xc0\x05\x01\xd9\x01\0\xdb\x01&]\x01&]\xc0\x05\x01\xda\x01\0\xdb\x01&]\x01&\xa4@@\xa1\x05\x01\xe3S@\xa0\xb0\xa0/replace_matched\x01\x01A\xd0\xc0\xc1@\xc0\xb3\x90\x05\x01\xd8@\x90@\x02\x05\xf5\xe1\0@\0\xba\xc0\xc1@\xc0\xb3\x90\x05\x01\xde@\x90@\x02\x05\xf5\xe1\0@\0\xbb\xc0\xb3\x90\x05\x01\xe2@\x90@\x02\x05\xf5\xe1\0@\0\xbc@\x02\x05\xf5\xe1\0@\0\xbd@\x02\x05\xf5\xe1\0@\0\xbe@\xb0\xc0\x05\x01\xf2\x01\0\xdf\x01'$\x01'$\xc0\x05\x01\xf3\x01\0\xdf\x01'$\x01'T@@\xa1\x05\x01\xfcT@\xa0\xb0\xa0%split\x01\x01B\xd0\xc0\xc1@\xc0\xb3\x05\x01\xeb@\x90@\x02\x05\xf5\xe1\0@\0\xbf\xc0\xc1@\xc0\xb3\x90\x05\x01\xf6@\x90@\x02\x05\xf5\xe1\0@\0\xc0\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\x90\x05\x02\0@\x90@\x02\x05\xf5\xe1\0@\0\xc1@\x90@\x02\x05\xf5\xe1\0@\0\xc2@\x02\x05\xf5\xe1\0@\0\xc3@\x02\x05\xf5\xe1\0@\0\xc4@\xb0\xc0\x05\x02\x11\x01\0\xec\x01(\xfd\x01(\xfd\xc0\x05\x02\x12\x01\0\xec\x01(\xfd\x01)(@@\xa1\x05\x02\x1bU@\xa0\xb0\xa0-bounded_split\x01\x01C\xd0\xc0\xc1@\xc0\xb3\x05\x02\n@\x90@\x02\x05\xf5\xe1\0@\0\xc5\xc0\xc1@\xc0\xb3\x90\x05\x02\x15@\x90@\x02\x05\xf5\xe1\0@\0\xc6\xc0\xc1@\xc0\xb3\x90\x05\x01\xb2@\x90@\x02\x05\xf5\xe1\0@\0\xc7\xc0\xb3\x90\x04%\xa0\xc0\xb3\x90\x05\x02#@\x90@\x02\x05\xf5\xe1\0@\0\xc8@\x90@\x02\x05\xf5\xe1\0@\0\xc9@\x02\x05\xf5\xe1\0@\0\xca@\x02\x05\xf5\xe1\0@\0\xcb@\x02\x05\xf5\xe1\0@\0\xcc@\xb0\xc0\x05\x024\x01\0\xf3\x01*g\x01*g\xc0\x05\x025\x01\0\xf3\x01*g\x01*\xa1@@\xa1\x05\x02>V@\xa0\xb0\xa0+split_delim\x01\x01D\xd0\xc0\xc1@\xc0\xb3\x05\x02-@\x90@\x02\x05\xf5\xe1\0@\0\xcd\xc0\xc1@\xc0\xb3\x90\x05\x028@\x90@\x02\x05\xf5\xe1\0@\0\xce\xc0\xb3\x90\x04B\xa0\xc0\xb3\x90\x05\x02@@\x90@\x02\x05\xf5\xe1\0@\0\xcf@\x90@\x02\x05\xf5\xe1\0@\0\xd0@\x02\x05\xf5\xe1\0@\0\xd1@\x02\x05\xf5\xe1\0@\0\xd2@\xb0\xc0\x05\x02Q\x01\0\xf7\x01+\x15\x01+\x15\xc0\x05\x02R\x01\0\xf7\x01+\x15\x01+F@@\xa1\x05\x02[W@\xa0\xb0\xa03bounded_split_delim\x01\x01E\xd0\xc0\xc1@\xc0\xb3\x05\x02J@\x90@\x02\x05\xf5\xe1\0@\0\xd3\xc0\xc1@\xc0\xb3\x90\x05\x02U@\x90@\x02\x05\xf5\xe1\0@\0\xd4\xc0\xc1@\xc0\xb3\x90\x05\x01\xf2@\x90@\x02\x05\xf5\xe1\0@\0\xd5\xc0\xb3\x90\x04e\xa0\xc0\xb3\x90\x05\x02c@\x90@\x02\x05\xf5\xe1\0@\0\xd6@\x90@\x02\x05\xf5\xe1\0@\0\xd7@\x02\x05\xf5\xe1\0@\0\xd8@\x02\x05\xf5\xe1\0@\0\xd9@\x02\x05\xf5\xe1\0@\0\xda@\xb0\xc0\x05\x02t\x01\0\xff\x01,\x83\x01,\x83\xc0\x05\x02u\x01\0\xff\x01,\x83\x01,\xc3@@\xa1\x05\x02~X@\xa0\xc1\xa0,split_result\x01\x01F\b\0\x008\0@@\xa1\xa0\xe0\xa0$Text\x01\x01%\x90\xa0\xc0\xb3\x90\x05\x02x@\x90@\x02\x05\xf5\xe1\0@\0\xdc@@\xb0\xc0\x05\x02\x88\x01\x01\x05\x01-\x8f\x01-\x93\xc0\x05\x02\x89\x01\x01\x05\x01-\x8f\x01-\xa1@@\xa1\x05\x02\x92Z\xa0\xe0\xa0%Delim\x01\x01&\x90\xa0\xc0\xb3\x90\x05\x02\x86@\x90@\x02\x05\xf5\xe1\0@\0\xdb@@\xb0\xc0\x05\x02\x96\x01\x01\x06\x01-\xa2\x01-\xa4\xc0\x05\x02\x97\x01\x01\x06\x01-\xa2\x01-\xb5@@\xa1\x05\x02\xa0[@@A@@@@@\xb0\xc0\x05\x02\x9a\x01\x01\x04\x01-{\x01-{\x04\x04@@@@\xa1\x05\x02\xa3YA@\xa0\xb0\xa0*full_split\x01\x01G\xd0\xc0\xc1@\xc0\xb3\x05\x02\x92@\x90@\x02\x05\xf5\xe1\0@\0\xdd\xc0\xc1@\xc0\xb3\x90\x05\x02\x9d@\x90@\x02\x05\xf5\xe1\0@\0\xde\xc0\xb3\x90\x04\xa7\xa0\xc0\xb3\x90\x04:@\x90@\x02\x05\xf5\xe1\0@\0\xdf@\x90@\x02\x05\xf5\xe1\0@\0\xe0@\x02\x05\xf5\xe1\0@\0\xe1@\x02\x05\xf5\xe1\0@\0\xe2@\xb0\xc0\x05\x02\xb6\x01\x01\b\x01-\xb7\x01-\xb7\xc0\x05\x02\xb7\x01\x01\b\x01-\xb7\x01-\xed@@\xa1\x05\x02\xc0\\@\xa0\xb0\xa02bounded_full_split\x01\x01H\xd0\xc0\xc1@\xc0\xb3\x05\x02\xaf@\x90@\x02\x05\xf5\xe1\0@\0\xe3\xc0\xc1@\xc0\xb3\x90\x05\x02\xba@\x90@\x02\x05\xf5\xe1\0@\0\xe4\xc0\xc1@\xc0\xb3\x90\x05\x02W@\x90@\x02\x05\xf5\xe1\0@\0\xe5\xc0\xb3\x90\x04\xca\xa0\xc0\xb3\x04#@\x90@\x02\x05\xf5\xe1\0@\0\xe6@\x90@\x02\x05\xf5\xe1\0@\0\xe7@\x02\x05\xf5\xe1\0@\0\xe8@\x02\x05\xf5\xe1\0@\0\xe9@\x02\x05\xf5\xe1\0@\0\xea@\xb0\xc0\x05\x02\xd8\x01\x01\x10\x01/%\x01/%\xc0\x05\x02\xd9\x01\x01\x10\x01/%\x01/j@@\xa1\x05\x02\xe2]@\xa0\xb0\xa0-string_before\x01\x01I\xd0\xc0\xc1@\xc0\xb3\x90\x05\x02\xd7@\x90@\x02\x05\xf5\xe1\0@\0\xeb\xc0\xc1@\xc0\xb3\x90\x05\x02t@\x90@\x02\x05\xf5\xe1\0@\0\xec\xc0\xb3\x90\x05\x02\xe1@\x90@\x02\x05\xf5\xe1\0@\0\xed@\x02\x05\xf5\xe1\0@\0\xee@\x02\x05\xf5\xe1\0@\0\xef@\xb0\xc0\x05\x02\xf1\x01\x01\x1a\x010h\x010h\xc0\x05\x02\xf2\x01\x01\x1a\x010h\x010\x93@@\xa1\x05\x02\xfb^@\xa0\xb0\xa0,string_after\x01\x01J\xd0\xc0\xc1@\xc0\xb3\x90\x05\x02\xf0@\x90@\x02\x05\xf5\xe1\0@\0\xf0\xc0\xc1@\xc0\xb3\x90\x05\x02\x8d@\x90@\x02\x05\xf5\xe1\0@\0\xf1\xc0\xb3\x90\x05\x02\xfa@\x90@\x02\x05\xf5\xe1\0@\0\xf2@\x02\x05\xf5\xe1\0@\0\xf3@\x02\x05\xf5\xe1\0@\0\xf4@\xb0\xc0\x05\x03\n\x01\x01\x1f\x011*\x011*\xc0\x05\x03\v\x01\x01\x1f\x011*\x011T@@\xa1\x05\x03\x14_@\xa0\xb0\xa0+first_chars\x01\x01K\xd0\xc0\xc1@\xc0\xb3\x90\x05\x03\t@\x90@\x02\x05\xf5\xe1\0@\0\xf5\xc0\xc1@\xc0\xb3\x90\x05\x02\xa6@\x90@\x02\x05\xf5\xe1\0@\0\xf6\xc0\xb3\x90\x05\x03\x13@\x90@\x02\x05\xf5\xe1\0@\0\xf7@\x02\x05\xf5\xe1\0@\0\xf8@\x02\x05\xf5\xe1\0@\0\xf9@\xb0\xc0\x05\x03#\x01\x01$\x011\xe9\x011\xe9\xc0\x05\x03$\x01\x01$\x011\xe9\x012\x12@@\xa1\x05\x03-`@\xa0\xb0\xa0*last_chars\x01\x01L\xd0\xc0\xc1@\xc0\xb3\x90\x05\x03\"@\x90@\x02\x05\xf5\xe1\0@\0\xfa\xc0\xc1@\xc0\xb3\x90\x05\x02\xbf@\x90@\x02\x05\xf5\xe1\0@\0\xfb\xc0\xb3\x90\x05\x03,@\x90@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x05\x03<\x01\x01(\x012\x8c\x012\x8c\xc0\x05\x03=\x01\x01(\x012\x8c\x012\xb4@@\xa1\x05\x03Fa@@\x84\x95\xa6\xbe\0\0\0a\0\0\0\x0f\0\0\x007\0\0\0-\xa0\xa0#Str\x900QLc\xe7\xd9e\x16\xffL`\x1f\xe4y\0\xa5-\xa0\xa0&Stdlib\x900y\xb0\xe9\xd3\xb6\xf7\xfe\xd0~\xb3\xcc*\xbb\x96\x1b\x91\xa0\xa08CamlinternalFormatBasics\x900\x8f\x8fcEXy\x8e\xe4\b\xdf<P\xa5S\x9b\x15@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$2,
    cst$0 = cst$2,
    cst = cst$2,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Map = global_data.Stdlib__Map;
   function string_before(s, n){return Stdlib_String[15].call(null, s, 0, n);}
   function string_after(s, n){
    return Stdlib_String[15].call
            (null, s, n, caml_ml_string_length(s) - n | 0);
   }
   function first_chars(s, n){return Stdlib_String[15].call(null, s, 0, n);}
   function last_chars(s, n){
    return Stdlib_String[15].call
            (null, s, caml_ml_string_length(s) - n | 0, n);
   }
   var full = Stdlib_Bytes[1].call(null, 32, 255);
   function make_empty(param){return Stdlib_Bytes[1].call(null, 32, 0);}
   function add(s, c){
    var a = caml_bytes_get(s, c >>> 3 | 0) | 1 << (c & 7);
    return caml_bytes_set(s, c >>> 3 | 0, Stdlib_Char[1].call(null, a));
   }
   function singleton(c){var s = make_empty(0); add(s, c); return s;}
   function complement(s){
    var r = caml_create_bytes(32), i = 0;
    for(;;){
     var a = caml_bytes_get(s, i) ^ 255;
     caml_bytes_set(r, i, Stdlib_Char[1].call(null, a));
     var b = i + 1 | 0;
     if(31 === i) return r;
     i = b;
    }
   }
   function union(s1, s2){
    var r = caml_create_bytes(32), i = 0;
    for(;;){
     var a = caml_bytes_get(s2, i), b = caml_bytes_get(s1, i) | a;
     caml_bytes_set(r, i, Stdlib_Char[1].call(null, b));
     var c = i + 1 | 0;
     if(31 === i) return r;
     i = c;
    }
   }
   function disjoint(s1, s2){
    try{
     var i = 0;
     for(;;){
      var b = caml_bytes_get(s2, i);
      if(0 !== (caml_bytes_get(s1, i) & b))
       throw caml_maybe_attach_backtrace(Stdlib[3], 1);
      var c = i + 1 | 0;
      if(31 === i){var a = 1; return a;}
      i = c;
     }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function iter(fn, s){
    var i = 0;
    for(;;){
     var c = caml_bytes_get(s, i);
     if(0 !== c){
      var j = 0;
      for(;;){
       if(0 !== (c & 1 << j))
        caml_call1(fn, Stdlib_Char[1].call(null, (i << 3) + j | 0));
       var b = j + 1 | 0;
       if(7 === j) break;
       j = b;
      }
     }
     var a = i + 1 | 0;
     if(31 === i) return;
     i = a;
    }
   }
   function fold_case(s){
    var r = make_empty(0);
    iter
     (function(c){
       add(r, Stdlib_Char[3].call(null, c));
       return add(r, Stdlib_Char[4].call(null, c));
      },
      s);
    return r;
   }
   var
    op_CHAR = 0,
    op_CHARNORM = 1,
    op_GOTO = 15,
    op_PUSHBACK = 16,
    op_SETMARK = 17,
    op_CHECKPROGRESS = 18,
    a = [0, cst_str_ml, 214, 11];
   function instr(opc, arg){return opc | arg << 8;}
   function displ(dest, from){return (dest - from | 0) - 1 | 0;}
   function is_nullable(param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return 1;
     switch(param[0]){
       case 1:
        var s = param[1]; return s === cst$2 ? 1 : 0;
       case 3:
        var rl = param[1]; return Stdlib_List[32].call(null, is_nullable, rl);
       case 4:
        var r2 = param[2], r1 = param[1], a = is_nullable(r1);
        if(a) return a;
        param = r2;
        break;
       case 6:
        var r = param[1]; param = r; break;
       case 8:
        var r$0 = param[2]; param = r$0; break;
       case 0:
       case 2:
        return 0;
       default: return 1;
     }
    }
   }
   function first$0(counter, param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return full;
     switch(param[0]){
       case 0:
        var c = param[1]; return singleton(c);
       case 1:
        var s = param[1];
        return s === cst$2 ? full : singleton(caml_string_get(s, 0));
       case 2:
        var cmpl = param[2], cl = param[1]; return cmpl ? complement(cl) : cl;
       case 3:
        var rl = param[1];
        if(counter >= 50) return caml_trampoline_return(first_seq$0, [0, rl]);
        var counter$0 = counter + 1 | 0;
        return first_seq$0(counter$0, rl);
       case 4:
        var r2 = param[2], r1 = param[1], a = first(r2);
        return union(first(r1), a);
       case 6:
        var r = param[1]; param = r; break;
       case 8:
        var r$0 = param[2]; param = r$0; break;
       default: return full;
     }
    }
   }
   function first(param){return caml_trampoline(first$0(0, param));}
   function first_seq$0(counter, param$0){
    var param = param$0;
    for(;;){
     if(! param) return full;
     var r = param[1];
     if(typeof r !== "number")
      switch(r[0]){
        case 5:
         var rl$0 = param[2], r$0 = r[1], a = first_seq(rl$0);
         return union(first(r$0), a);
        case 7:
         var rl$1 = param[2], r$1 = r[1], b = first_seq(rl$1);
         return union(first(r$1), b);
        default:
         if(counter >= 50) return caml_trampoline_return(first$0, [0, r]);
         var counter$0 = counter + 1 | 0;
         return first$0(counter$0, r);
      }
     var rl = param[2];
     param = rl;
    }
   }
   function first_seq(param){return caml_trampoline(first_seq$0(0, param));}
   function charclass_of_regexp(fold_case$0, re){
    a:
    if(typeof re !== "number"){
     switch(re[0]){
       case 0:
        var c = re[1], compl = 0, cl1 = singleton(c); break;
       case 2:
        var compl$0 = re[2], cl = re[1], compl = compl$0, cl1 = cl; break;
       default: break a;
     }
     var
      cl2 = fold_case$0 ? fold_case(cl1) : cl1,
      b = compl ? complement(cl2) : cl2;
     return Stdlib_Bytes[6].call(null, b);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
   }
   var
    t = caml_create_bytes(256),
    i = 0,
    cst_Str_matched_group = "Str.matched_group",
    cst_Str_group_end = "Str.group_end",
    cst_Str_group_beginning = "Str.group_beginning",
    b = [0, 92],
    cst_group_not_closed_by = "\\( group not closed by \\)",
    c = [0, cst_str_ml, 521, 10],
    cst_class_not_closed_by = "[ class not closed by ]",
    cst_spurious_in_regular_expres = "spurious \\) in regular expression",
    cst_too_many_r_or_r_where_r_is = "too many r* or r+ where r is nullable",
    op_STRING = 2,
    op_STRINGNORM = 3,
    op_CHARCLASS = 4,
    op_BOL = 5,
    op_EOL = 6,
    op_WORDBOUNDARY = 7,
    op_BEGGROUP = 8,
    op_ENDGROUP = 9,
    op_REFGROUP = 10,
    op_ACCEPT = 11,
    op_SIMPLEOPT = 12,
    op_SIMPLESTAR = 13,
    op_SIMPLEPLUS = 14;
   for(;;){
    var d = Stdlib_Char[1].call(null, i);
    caml_bytes_set(t, i, Stdlib_Char[3].call(null, d));
    var e = i + 1 | 0;
    if(255 === i) break;
    i = e;
   }
   var
    fold_case_table = Stdlib_Bytes[6].call(null, t),
    compare = runtime.caml_string_compare,
    StringMap = Stdlib_Map[1].call(null, [0, compare]);
   function compile(fold_case$0, re){
    var
     prog = [0, caml_make_vect(32, 0)],
     progpos = [0, 0],
     cpool = [0, StringMap[1]],
     cpoolpos = [0, 0],
     numgroups = [0, 1],
     numregs = [0, 0];
    function emit_instr(opc, arg){
     if(prog[1].length - 1 <= progpos[1]){
      var newlen = [0, prog[1].length - 1];
      for(;;){
       if(newlen[1] > progpos[1]){
        var nprog = caml_make_vect(newlen[1], 0);
        Stdlib_Array[10].call(null, prog[1], 0, nprog, 0, prog[1].length - 1);
        prog[1] = nprog;
        break;
       }
       newlen[1] = newlen[1] * 2 | 0;
      }
     }
     var b = instr(opc, arg), a = progpos[1];
     caml_check_bound(prog[1], a)[a + 1] = b;
     progpos[1]++;
    }
    function emit_hole(param){
     var p = progpos[1];
     emit_instr(op_CHAR, 0);
     return p;
    }
    function patch_instr(pos, opc, dest){
     var a = instr(opc, displ(dest, pos));
     caml_check_bound(prog[1], pos)[pos + 1] = a;
    }
    function cpool_index(s){
     try{var a = caml_call2(StringMap[28], s, cpool[1]); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var p = cpoolpos[1];
      cpool[1] = caml_call3(StringMap[4], s, p, cpool[1]);
      cpoolpos[1]++;
      return p;
     }
    }
    function allocate_register_if_nullable(r){
     if(! is_nullable(r)) return -1;
     var n = numregs[1];
     if(64 <= n) Stdlib[2].call(null, cst_too_many_r_or_r_where_r_is);
     numregs[1]++;
     return n;
    }
    function emit_code(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return emit_instr(op_BOL, 0);
        case 1:
         return emit_instr(op_EOL, 0);
        default: return emit_instr(op_WORDBOUNDARY, 0);
      }
     switch(param[0]){
       case 0:
        var c = param[1];
        return fold_case$0
                ? emit_instr(op_CHARNORM, Stdlib_Char[3].call(null, c))
                : emit_instr(op_CHAR, c);
       case 1:
        var s = param[1], match = caml_ml_string_length(s);
        if(0 === match) return;
        if(1 !== match)
         try{
          var i = Stdlib_String[35].call(null, s, 0);
          emit_code([1, string_before(s, i)]);
          emit_instr(op_CHAR, 0);
          emit_code([1, string_after(s, i + 1 | 0)]);
          return;
         }
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn === Stdlib[8])
           return fold_case$0
                   ? emit_instr
                     (op_STRINGNORM,
                      cpool_index(Stdlib_String[52].call(null, s)))
                   : emit_instr(op_STRING, cpool_index(s));
          throw caml_maybe_attach_backtrace(exn, 0);
         }
        if(! fold_case$0) return emit_instr(op_CHAR, caml_string_get(s, 0));
        var a = caml_string_get(s, 0);
        return emit_instr(op_CHARNORM, Stdlib_Char[3].call(null, a));
       case 2:
        var
         compl = param[2],
         cl = param[1],
         cl1 = fold_case$0 ? fold_case(cl) : cl,
         cl2 = compl ? complement(cl1) : cl1;
        return emit_instr
                (op_CHARCLASS, cpool_index(Stdlib_Bytes[6].call(null, cl2)));
       case 3:
        var rl = param[1], param$0 = rl;
        for(;;){
         if(! param$0) return;
         var r$3 = param$0[1];
         if(typeof r$3 !== "number")
          switch(r$3[0]){
            case 5:
             var r$4 = r$3[1];
             if(typeof r$4 !== "number")
              switch(r$4[0]){
                case 0:
                case 2:
                 var rl$1 = param$0[2], b = first_seq(rl$1);
                 if(disjoint_modulo_case(first(r$4), b)){
                  emit_instr
                   (op_SIMPLESTAR,
                    cpool_index(charclass_of_regexp(fold_case$0, r$4)));
                  param$0 = rl$1;
                  continue;
                 }
                 break;
              }
             break;
            case 6:
             var r$5 = r$3[1];
             if(typeof r$5 !== "number")
              switch(r$5[0]){
                case 0:
                case 2:
                 var rl$2 = param$0[2], d = first_seq(rl$2);
                 if(disjoint_modulo_case(first(r$5), d)){
                  emit_instr
                   (op_SIMPLEPLUS,
                    cpool_index(charclass_of_regexp(fold_case$0, r$5)));
                  param$0 = rl$2;
                  continue;
                 }
                 break;
              }
             break;
            case 7:
             var r$6 = r$3[1];
             if(typeof r$6 !== "number")
              switch(r$6[0]){
                case 0:
                case 2:
                 var rl$3 = param$0[2], e = first_seq(rl$3);
                 if(disjoint_modulo_case(first(r$6), e)){
                  emit_instr
                   (op_SIMPLEOPT,
                    cpool_index(charclass_of_regexp(fold_case$0, r$6)));
                  param$0 = rl$3;
                  continue;
                 }
                 break;
              }
             break;
          }
         var rl$0 = param$0[2];
         emit_code(r$3);
         param$0 = rl$0;
        }
        break;
       case 4:
        var r2 = param[2], r1 = param[1], pos_pushback = emit_hole(0);
        emit_code(r1);
        var pos_goto_end = emit_hole(0), lbl1 = progpos[1];
        emit_code(r2);
        var lbl2 = progpos[1];
        patch_instr(pos_pushback, op_PUSHBACK, lbl1);
        return patch_instr(pos_goto_end, op_GOTO, lbl2);
       case 5:
        var
         r = param[1],
         regno = allocate_register_if_nullable(r),
         lbl1$0 = emit_hole(0);
        if(0 <= regno) emit_instr(op_SETMARK, regno);
        emit_code(r);
        if(0 <= regno) emit_instr(op_CHECKPROGRESS, regno);
        emit_instr(op_GOTO, displ(lbl1$0, progpos[1]));
        var lbl2$0 = progpos[1];
        return patch_instr(lbl1$0, op_PUSHBACK, lbl2$0);
       case 6:
        var
         r$0 = param[1],
         regno$0 = allocate_register_if_nullable(r$0),
         lbl1$1 = progpos[1];
        emit_code(r$0);
        if(0 <= regno$0) emit_instr(op_CHECKPROGRESS, regno$0);
        var pos_pushback$0 = emit_hole(0);
        if(0 <= regno$0) emit_instr(op_SETMARK, regno$0);
        emit_instr(op_GOTO, displ(lbl1$1, progpos[1]));
        var lbl2$1 = progpos[1];
        return patch_instr(pos_pushback$0, op_PUSHBACK, lbl2$1);
       case 7:
        var r$1 = param[1], pos_pushback$1 = emit_hole(0);
        emit_code(r$1);
        var lbl = progpos[1];
        return patch_instr(pos_pushback$1, op_PUSHBACK, lbl);
       case 8:
        var r$2 = param[2], n = param[1];
        emit_instr(op_BEGGROUP, n);
        emit_code(r$2);
        emit_instr(op_ENDGROUP, n);
        numgroups[1] = Stdlib_Int[11].call(null, numgroups[1], n + 1 | 0);
        return;
       default:
        var n$0 = param[1];
        emit_instr(op_REFGROUP, n$0);
        numgroups[1] = Stdlib_Int[11].call(null, numgroups[1], n$0 + 1 | 0);
        return;
     }
    }
    function disjoint_modulo_case(c1, c2){
     if(! fold_case$0) return disjoint(c1, c2);
     var a = fold_case(c2);
     return disjoint(fold_case(c1), a);
    }
    emit_code(re);
    emit_instr(op_ACCEPT, 0);
    var start = first(re), start$0 = fold_case$0 ? fold_case(start) : start;
    if(runtime.caml_bytes_equal(start, full))
     var start_pos = -1;
    else{
     var r = Stdlib_Bytes[1].call(null, 256, 0);
     iter(function(c){return caml_bytes_set(r, c, 1);}, start$0);
     var start_pos = cpool_index(Stdlib_Bytes[6].call(null, r));
    }
    var constantpool = caml_make_vect(cpoolpos[1], cst$2);
    caml_call2
     (StringMap[12],
      function(str, idx){
       caml_check_bound(constantpool, idx)[idx + 1] = str;
       return 0;
      },
      cpool[1]);
    var
     a = numregs[1],
     b = numgroups[1],
     fold_case_table$0 = fold_case$0 ? fold_case_table : cst;
    return [0,
            Stdlib_Array[7].call(null, prog[1], 0, progpos[1]),
            constantpool,
            fold_case_table$0,
            b,
            a,
            start_pos];
   }
   function flush(buf){
    var s = Stdlib_Buffer[2].call(null, buf[1]);
    Stdlib_Buffer[8].call(null, buf[1]);
    var match = caml_ml_string_length(s);
    if(0 === match) return;
    if(1 === match){
     var a = buf[2];
     buf[2] = [0, [0, caml_string_get(s, 0)], a];
     return;
    }
    buf[2] = [0, [1, s], buf[2]];
   }
   var dotclass = complement(singleton(10));
   function parse(s){
    var len = caml_ml_string_length(s), group_counter = [0, 1];
    function regexp0(i){
     var match = regexp1(i), j = match[2], r1 = match[1], r1$0 = r1, i$0 = j;
     for(;;){
      if
       ((i$0 + 2 | 0) <= len
        &&
         92 === caml_string_get(s, i$0)
         && 124 === caml_string_get(s, i$0 + 1 | 0)){
       var
        match$0 = regexp1(i$0 + 2 | 0),
        j$0 = match$0[2],
        r2 = match$0[1],
        r1$1 = [4, r1$0, r2];
       r1$0 = r1$1;
       i$0 = j$0;
       continue;
      }
      return [0, r1$0, i$0];
     }
    }
    function regexp1(i){
     return regexp1cont([0, Stdlib_Buffer[1].call(null, 16), 0], i);
    }
    function regexp1cont(buf, i$6){
     var i = i$6;
     a:
     for(;;){
      b:
      if(len > i){
       if((i + 2 | 0) <= len && 92 === caml_string_get(s, i)){
        var
         c$1 = caml_string_get(s, i + 1 | 0),
         a = 124 === c$1 ? 1 : 0,
         d = a || (41 === c$1 ? 1 : 0);
        if(d) break b;
       }
       var c$2 = caml_string_get(s, i);
       c:
       if(36 === c$2)
        var match = [0, 1, i + 1 | 0];
       else{
        if(91 <= c$2){
         if(95 > c$2)
          switch(c$2 - 91 | 0){
            case 0:
             var i$4 = i + 1 | 0;
             d:
             {
              if(i$4 < len && 94 === caml_string_get(s, i$4)){
               var
                match$2 = regexpclass1(i$4 + 1 | 0),
                j$2 = match$2[2],
                c$5 = match$2[1],
                match$0 = [0, c$5, 1, j$2];
               break d;
              }
              var
               match$3 = regexpclass1(i$4),
               j$3 = match$3[2],
               c$6 = match$3[1],
               match$0 = [0, c$6, 0, j$3];
             }
             var
              j$0 = match$0[3],
              compl = match$0[2],
              c$3 = match$0[1],
              match = [0, [2, c$3, compl], j$0];
             break c;
            case 1:
             var i$5 = i + 1 | 0;
             if(len <= i$5){var match = [0, b, i$5]; break c;}
             var c$4 = caml_string_get(s, i$5);
             d:
             {
              if(58 <= c$4){
               if(98 === c$4){var match = [0, 2, i$5 + 1 | 0]; break c;}
               if(124 !== c$4) break d;
              }
              else{
               var switcher$0 = c$4 - 40 | 0;
               if(1 < switcher$0 >>> 0){
                if(9 > switcher$0) break d;
                var match = [0, [9, c$4 - 48 | 0], i$5 + 1 | 0];
                break c;
               }
               if(! switcher$0){
                var group_no = group_counter[1];
                group_counter[1]++;
                var
                 match$1 = regexp0(i$5 + 1 | 0),
                 j$1 = match$1[2],
                 r$3 = match$1[1];
                if
                 ((j$1 + 1 | 0) < len
                  &&
                   92 === caml_string_get(s, j$1)
                   && 41 === caml_string_get(s, j$1 + 1 | 0)){
                 var match = [0, [8, group_no, r$3], j$1 + 2 | 0];
                 break c;
                }
                var match = Stdlib[2].call(null, cst_group_not_closed_by);
                break c;
               }
              }
              throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
             }
             var match = [0, [0, c$4], i$5 + 1 | 0];
             break c;
            case 3:
             var match = [0, 0, i + 1 | 0]; break c;
          }
        }
        else if(46 === c$2){
         var match = [0, [2, dotclass, 0], i + 1 | 0];
         break c;
        }
        var match = [0, [0, c$2], i + 1 | 0];
       }
       var j = match[2], r = match[1], re = r, i$0 = j;
       for(;;){
        if(len > i$0){
         var switcher = caml_string_get(s, i$0) - 42 | 0;
         if(1 >= switcher >>> 0){
          if(switcher){
           var i$2 = i$0 + 1 | 0, r$1 = [6, re];
           re = r$1;
           i$0 = i$2;
           continue;
          }
          var i$3 = i$0 + 1 | 0, r$2 = [5, re];
          re = r$2;
          i$0 = i$3;
          continue;
         }
         if(21 === switcher){
          var i$1 = i$0 + 1 | 0, r$0 = [7, re];
          re = r$0;
          i$0 = i$1;
          continue;
         }
        }
        if(typeof re !== "number" && 0 === re[0]){
         var c$0 = re[1];
         Stdlib_Buffer[12].call(null, buf[1], c$0);
         i = i$0;
         continue a;
        }
        flush(buf);
        buf[2] = [0, re, buf[2]];
        i = i$0;
        continue a;
       }
      }
      flush(buf);
      return [0, [3, Stdlib_List[9].call(null, buf[2])], i];
     }
    }
    function regexpclass1(start){
     var c = make_empty(0), i$0 = start;
     for(;;){
      if(len <= i$0) Stdlib[2].call(null, cst_class_not_closed_by);
      if(93 === caml_string_get(s, i$0) && start < i$0){var j = i$0 + 1 | 0; return [0, c, j];}
      var c1 = caml_string_get(s, i$0);
      if
       ((i$0 + 2 | 0) < len
        &&
         45 === caml_string_get(s, i$0 + 1 | 0)
         && 93 !== caml_string_get(s, i$0 + 2 | 0)){
       var c2 = caml_string_get(s, i$0 + 2 | 0);
       if(c2 >= c1){
        var i = c1;
        for(;;){
         add(c, Stdlib_Char[1].call(null, i));
         var a = i + 1 | 0;
         if(c2 === i) break;
         i = a;
        }
       }
       var i$2 = i$0 + 3 | 0;
       i$0 = i$2;
       continue;
      }
      add(c, c1);
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
     }
    }
    var match = regexp0(0), j = match[2], r = match[1];
    return j === len
            ? r
            : Stdlib[2].call(null, cst_spurious_in_regular_expres);
   }
   function regexp(e){return compile(0, parse(e));}
   function regexp_case_fold(e){return compile(1, parse(e));}
   function quote(s){
    var
     len = caml_ml_string_length(s),
     buf = caml_create_bytes(2 * len | 0),
     pos = [0, 0],
     b = len - 1 | 0,
     e = 0;
    if(b >= 0){
     var i = e;
     for(;;){
      var c = caml_string_get(s, i), a = c - 63 | 0;
      a:
      {
       b:
       {
        if(31 < a >>> 0){
         var d = a + 27 | 0;
         if(10 < d >>> 0) break b;
         switch(d){case 0:case 6:case 7:case 10: break;default: break b;
         }
        }
        else if(26 >= a - 1 >>> 0) break b;
        caml_bytes_set(buf, pos[1], 92);
        caml_bytes_set(buf, pos[1] + 1 | 0, c);
        pos[1] = pos[1] + 2 | 0;
        break a;
       }
       caml_bytes_set(buf, pos[1], c);
       pos[1] = pos[1] + 1 | 0;
      }
      var f = i + 1 | 0;
      if(b === i) break;
      i = f;
     }
    }
    return Stdlib_Bytes[8].call(null, buf, 0, pos[1]);
   }
   function regexp_string(s){return compile(0, [1, s]);}
   function regexp_string_case_fold(s){return compile(1, [1, s]);}
   var last_search_result = [0, [0]];
   function string_match(re, s, pos){
    var res = runtime.re_string_match(re, s, pos);
    last_search_result[1] = res;
    return 0 < res.length - 1 ? 1 : 0;
   }
   function string_partial_match(re, s, pos){
    var res = runtime.re_partial_match(re, s, pos);
    last_search_result[1] = res;
    return 0 < res.length - 1 ? 1 : 0;
   }
   function search_forward(re, s, pos){
    var res = runtime.re_search_forward(re, s, pos);
    last_search_result[1] = res;
    if(0 === res.length - 1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    return caml_check_bound(res, 0)[1];
   }
   function search_backward(re, s, pos){
    var res = runtime.re_search_backward(re, s, pos);
    last_search_result[1] = res;
    if(0 === res.length - 1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    return caml_check_bound(res, 0)[1];
   }
   function group_beginning(n){
    var n2 = n + n | 0;
    if(0 <= n && last_search_result[1].length - 1 > n2){
     var pos = caml_check_bound(last_search_result[1], n2)[n2 + 1];
     if(-1 === pos) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     return pos;
    }
    return Stdlib[1].call(null, cst_Str_group_beginning);
   }
   function group_end(n){
    var n2 = n + n | 0;
    if(0 <= n && last_search_result[1].length - 1 > n2){
     var
      a = n2 + 1 | 0,
      pos = caml_check_bound(last_search_result[1], a)[a + 1];
     if(-1 === pos) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     return pos;
    }
    return Stdlib[1].call(null, cst_Str_group_end);
   }
   function matched_group(n, txt){
    var n2 = n + n | 0;
    if(0 <= n && last_search_result[1].length - 1 > n2){
     var
      b = caml_check_bound(last_search_result[1], n2)[n2 + 1],
      a = n2 + 1 | 0,
      e = caml_check_bound(last_search_result[1], a)[a + 1];
     if(-1 === b) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     return Stdlib_String[15].call(null, txt, b, e - b | 0);
    }
    return Stdlib[1].call(null, cst_Str_matched_group);
   }
   function match_beginning(param){return group_beginning(0);}
   function match_end(param){return group_end(0);}
   function matched_string(txt){return matched_group(0, txt);}
   function replace_matched(repl, matched){
    return runtime.re_replacement_text(repl, last_search_result[1], matched);
   }
   function substitute_first(expr, repl_fun, text){
    try{
     var
      pos = search_forward(expr, text, 0),
      a = [0, string_after(text, match_end(0)), 0],
      b = [0, caml_call1(repl_fun, text), a],
      c = [0, string_before(text, pos), b],
      d = Stdlib_String[6].call(null, cst$0, c);
     return d;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return text;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function opt_search_forward(re, s, pos){
    try{var a = [0, search_forward(re, s, pos)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function global_substitute(expr, repl_fun, text){
    var accu = 0, start = 0, last_was_empty = 0;
    for(;;){
     var startpos = last_was_empty ? start + 1 | 0 : start;
     if(caml_ml_string_length(text) < startpos)
      var a = [0, string_after(text, start), accu];
     else{
      var match = opt_search_forward(expr, text, startpos);
      if(match){
       var
        pos = match[1],
        end_pos = match_end(0),
        repl_text = caml_call1(repl_fun, text),
        last_was_empty$0 = end_pos === pos ? 1 : 0,
        accu$0 =
          [0,
           repl_text,
           [0,
            Stdlib_String[15].call(null, text, start, pos - start | 0),
            accu]];
       accu = accu$0;
       start = end_pos;
       last_was_empty = last_was_empty$0;
       continue;
      }
      var a = [0, string_after(text, start), accu];
     }
     var b = Stdlib_List[9].call(null, a);
     return Stdlib_String[6].call(null, cst$1, b);
    }
   }
   function global_replace(expr, repl, text){
    return global_substitute
            (expr, function(a){return replace_matched(repl, a);}, text);
   }
   function replace_first(expr, repl, text){
    return substitute_first
            (expr, function(a){return replace_matched(repl, a);}, text);
   }
   function opt_search_forward_progress(expr, text, start){
    var match = opt_search_forward(expr, text, start);
    if(! match) return 0;
    var pos = match[1];
    return start < match_end(0)
            ? [0, pos]
            : start
              < caml_ml_string_length(text)
              ? opt_search_forward(expr, text, start + 1 | 0)
              : 0;
   }
   function bounded_split(expr, text, num){
    var
     start = string_match(expr, text, 0) ? match_end(0) : 0,
     accu = 0,
     start$0 = start,
     n = num;
    for(;;){
     if(caml_ml_string_length(text) <= start$0)
      var a = accu;
     else if(1 === n)
      var a = [0, string_after(text, start$0), accu];
     else{
      var match = opt_search_forward_progress(expr, text, start$0);
      if(match){
       var
        pos = match[1],
        n$0 = n - 1 | 0,
        start$1 = match_end(0),
        accu$0 =
          [0,
           Stdlib_String[15].call(null, text, start$0, pos - start$0 | 0),
           accu];
       accu = accu$0;
       start$0 = start$1;
       n = n$0;
       continue;
      }
      var a = [0, string_after(text, start$0), accu];
     }
     return Stdlib_List[9].call(null, a);
    }
   }
   function split(expr, text){return bounded_split(expr, text, 0);}
   function bounded_split_delim(expr, text, num){
    if(text === cst$2) return 0;
    var accu = 0, start = 0, n = num;
    for(;;){
     if(caml_ml_string_length(text) < start)
      var a = accu;
     else if(1 === n)
      var a = [0, string_after(text, start), accu];
     else{
      var match = opt_search_forward_progress(expr, text, start);
      if(match){
       var
        pos = match[1],
        n$0 = n - 1 | 0,
        start$0 = match_end(0),
        accu$0 =
          [0,
           Stdlib_String[15].call(null, text, start, pos - start | 0),
           accu];
       accu = accu$0;
       start = start$0;
       n = n$0;
       continue;
      }
      var a = [0, string_after(text, start), accu];
     }
     return Stdlib_List[9].call(null, a);
    }
   }
   function split_delim(expr, text){
    return bounded_split_delim(expr, text, 0);
   }
   function bounded_full_split(expr, text, num){
    var accu = 0, start = 0, n = num;
    for(;;){
     if(caml_ml_string_length(text) <= start)
      var a = accu;
     else if(1 === n)
      var a = [0, [0, string_after(text, start)], accu];
     else{
      var match = opt_search_forward_progress(expr, text, start);
      if(match){
       var pos = match[1], s = matched_string(text);
       if(start < pos){
        var
         n$0 = n - 1 | 0,
         start$0 = match_end(0),
         accu$0 =
           [0,
            [1, s],
            [0,
             [0, Stdlib_String[15].call(null, text, start, pos - start | 0)],
             accu]];
        accu = accu$0;
        start = start$0;
        n = n$0;
        continue;
       }
       var
        n$1 = n - 1 | 0,
        start$1 = match_end(0),
        accu$1 = [0, [1, s], accu];
       accu = accu$1;
       start = start$1;
       n = n$1;
       continue;
      }
      var a = [0, [0, string_after(text, start)], accu];
     }
     return Stdlib_List[9].call(null, a);
    }
   }
   function full_split(expr, text){return bounded_full_split(expr, text, 0);}
   var
    Str =
      [0,
       regexp,
       regexp_case_fold,
       quote,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search_forward,
       search_backward,
       string_partial_match,
       matched_string,
       match_beginning,
       match_end,
       matched_group,
       group_beginning,
       group_end,
       global_replace,
       replace_first,
       global_substitute,
       substitute_first,
       replace_matched,
       split,
       bounded_split,
       split_delim,
       bounded_split_delim,
       full_split,
       bounded_full_split,
       string_before,
       string_after,
       first_chars,
       last_chars];
   runtime.caml_register_global(27, Str, "Str");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
