// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Sedlexing
//# unitInfo: Requires: Assert_failure, Gen, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Option, Stdlib__Uchar
//# shape: Sedlexing:[N,N,F(2)*,F(3),F(2),F(2)*,F(2)*,F(2),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(2),F(3),F(1),F(1),F(1),F(1),F(2),F(1),F(2)*->F(1),N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_src_lib_sedlexing_ml = "src/lib/sedlexing.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var dummy = 0;
   runtime.jsoo_create_file
    ("/static/cmis/sedlexing.cmi",
     "Caml1999I031\x84\x95\xa6\xbe\0\0\x1e\xd8\0\0\x05\xe6\0\0\x16\xa5\0\0\x16\x11\xa0)Sedlexing\xa0\xc1\xa0&lexbuf\x01\x01\xe7\b\0\x008\0@@@A@@@@@\xb0\xc05src/lib/sedlexing.mli\\\x01\x06\x1f\x01\x06\x1f\xc0\x04\x02\\\x01\x06\x1f\x01\x06*@@@@\xa1\x04\v@A@\xa0\xc2\xa00InvalidCodepoint\x01\x01\xe8\b\0\0 \0\x90\xa3#exnG@\x90\xa0\xc0\xb3\x90\xa3#intA@\x90@\x02\x05\xf5\xe1\0@\x01\xffa@@A\xb0\xc0&_none_@@\0\xff\x04\x02A@\xa1\x04\x1fAB@\xa0\xc2\xa0)MalFormed\x01\x01\xe9\b\0\0 \0\x04\x14@\x90@@A\x04\n@\xa1\x04&BB@\xa0\xb0\xa0&create\x01\x01\xea\xd0\xc0\xc1\x91.bytes_per_char\xc0\xb3\x90\xa3&optionJ\xa0\xc0\xc1@\xc0\xb3\xa1\xa1\x90\x92&Stdlib%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\x01\xffb\xc0\xb3\x90\x04,@\x90@\x02\x05\xf5\xe1\0@\x01\xffc@\x02\x05\xf5\xe1\0@\x01\xffd@\x90@\x02\x05\xf5\xe1\0@\x01\xffe\xc0\xc1@\xc0\xc1@\xc0\xb3\x90\xa3%arrayH\xa0\xc0\xb3\xa1\xa1\x04\x19%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\x01\xfff@\x90@\x02\x05\xf5\xe1\0@\x01\xffg\xc0\xc1@\xc0\xb3\x90\x04E@\x90@\x02\x05\xf5\xe1\0@\x01\xffh\xc0\xc1@\xc0\xb3\x90\x04K@\x90@\x02\x05\xf5\xe1\0@\x01\xffi\xc0\xb3\x90\x04O@\x90@\x02\x05\xf5\xe1\0@\x01\xffj@\x02\x05\xf5\xe1\0@\x01\xffk@\x02\x05\xf5\xe1\0@\x01\xffl@\x02\x05\xf5\xe1\0@\x01\xffm\xc0\xb3\x90\x04h@\x90@\x02\x05\xf5\xe1\0@\x01\xffn@\x02\x05\xf5\xe1\0@\x01\xffo@\x02\x05\xf5\xe1\0@\x01\xffp@\xb0\xc0\x04fo\x01\tZ\x01\tZ\xc0\x04gr\x01\t\xb7\x01\t\xbf@@\xa1\x04pC@\xa0\xb0\xa0,set_position\x01\x01\xeb\xd0\xc0\xc1\x91.bytes_position\xc0\xb3\x04J\xa0\xc0\xb3\xa1\xa1\x04E&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\x01\xffq@\x90@\x02\x05\xf5\xe1\0@\x01\xffr\xc0\xc1@\xc0\xb3\x04\x1e@\x90@\x02\x05\xf5\xe1\0@\x01\xffs\xc0\xc1@\xc0\xb3\xa1\xa1\x04T&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\x01\xfft\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\x01\xffu@\x02\x05\xf5\xe1\0@\x01\xffv@\x02\x05\xf5\xe1\0@\x01\xffw@\x02\x05\xf5\xe1\0@\x01\xffx@\xb0\xc0\x04\x92w\x01\n_\x01\n_\xc0\x04\x93x\x01\nr\x01\n\xb8@@\xa1\x04\x9cD@\xa0\xb0\xa0,set_filename\x01\x01\xec\xd0\xc0\xc1@\xc0\xb3\x04;@\x90@\x02\x05\xf5\xe1\0@\x01\xffy\xc0\xc1@\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\x01\xffz\xc0\xb3\x90\x04\x1c@\x90@\x02\x05\xf5\xe1\0@\x01\xff{@\x02\x05\xf5\xe1\0@\x01\xff|@\x02\x05\xf5\xe1\0@\x01\xff}@\xb0\xc0\x04\xac}\x01\v\\\x01\v\\\xc0\x04\xad}\x01\v\\\x01\v\x87@@\xa1\x04\xb6E@\xa0\xb0\xa0(from_gen\x01\x01\xed\xd0\xc0\xc1\x91.bytes_per_char\xc0\xb3\x04\x90\xa0\xc0\xc1@\xc0\xb3\xa1\xa1\x04\x8d%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\x01\xff~\xc0\xb3\x90\x04\xb6@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x7f@\x02\x05\xf5\xe1\0@\0\x80@\x90@\x02\x05\xf5\xe1\0@\0\x81\xc0\xc1@\xc0\xb3\xa1\x90\x92#Gen!t\xa0\xc0\xb3\xa1\xa1\x04\xa3%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\x82@\x90@\x02\x05\xf5\xe1\0@\0\x83\xc0\xb3\x04z@\x90@\x02\x05\xf5\xe1\0@\0\x84@\x02\x05\xf5\xe1\0@\0\x85@\x02\x05\xf5\xe1\0@\0\x86@\xb0\xc0\x04\xdf\0B\x01\f1\x01\f1\xc0\x04\xe0\0B\x01\f1\x01\f{@@\xa1\x04\xe9F@\xa0\xb0\xa0.from_int_array\x01\x01\xee\xd0\xc0\xc1\x91.bytes_per_char\xc0\xb3\x04\xc3\xa0\xc0\xc1@\xc0\xb3\xa1\xa1\x04\xc0%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\x87\xc0\xb3\x90\x04\xe9@\x90@\x02\x05\xf5\xe1\0@\0\x88@\x02\x05\xf5\xe1\0@\0\x89@\x90@\x02\x05\xf5\xe1\0@\0\x8a\xc0\xc1@\xc0\xb3\x90\x04\xbb\xa0\xc0\xb3\x90\x04\xf4@\x90@\x02\x05\xf5\xe1\0@\0\x8b@\x90@\x02\x05\xf5\xe1\0@\0\x8c\xc0\xb3\x04\xa6@\x90@\x02\x05\xf5\xe1\0@\0\x8d@\x02\x05\xf5\xe1\0@\0\x8e@\x02\x05\xf5\xe1\0@\0\x8f@\xb0\xc0\x05\x01\v\0G\x01\r%\x01\r%\xc0\x05\x01\f\0G\x01\r%\x01\rq@@\xa1\x05\x01\x15G@\xa0\xb0\xa00from_uchar_array\x01\x01\xef\xd0\xc0\xc1\x91.bytes_per_char\xc0\xb3\x04\xef\xa0\xc0\xc1@\xc0\xb3\xa1\xa1\x04\xec%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\x90\xc0\xb3\x90\x05\x01\x15@\x90@\x02\x05\xf5\xe1\0@\0\x91@\x02\x05\xf5\xe1\0@\0\x92@\x90@\x02\x05\xf5\xe1\0@\0\x93\xc0\xc1@\xc0\xb3\x90\x04\xe7\xa0\xc0\xb3\xa1\xa1\x04\xfe%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\x94@\x90@\x02\x05\xf5\xe1\0@\0\x95\xc0\xb3\x04\xd5@\x90@\x02\x05\xf5\xe1\0@\0\x96@\x02\x05\xf5\xe1\0@\0\x97@\x02\x05\xf5\xe1\0@\0\x98@\xb0\xc0\x05\x01:\0L\x01\x0e\x1b\x01\x0e\x1b\xc0\x05\x01;\0M\x01\x0e2\x01\x0eo@@\xa1\x05\x01DH@\xa0\xb0\xa0,lexeme_start\x01\x01\xf0\xd0\xc0\xc1@\xc0\xb3\x04\xe3@\x90@\x02\x05\xf5\xe1\0@\0\x99\xc0\xb3\x90\x05\x019@\x90@\x02\x05\xf5\xe1\0@\0\x9a@\x02\x05\xf5\xe1\0@\0\x9b@\xb0\xc0\x05\x01L\0X\x01\x10/\x01\x10/\xc0\x05\x01M\0X\x01\x10/\x01\x10O@@\xa1\x05\x01VI@\xa0\xb0\xa02lexeme_bytes_start\x01\x01\xf1\xd0\xc0\xc1@\xc0\xb3\x04\xf5@\x90@\x02\x05\xf5\xe1\0@\0\x9c\xc0\xb3\x90\x05\x01K@\x90@\x02\x05\xf5\xe1\0@\0\x9d@\x02\x05\xf5\xe1\0@\0\x9e@\xb0\xc0\x05\x01^\0]\x01\x11\x01\x01\x11\x01\xc0\x05\x01_\0]\x01\x11\x01\x01\x11'@@\xa1\x05\x01hJ@\xa0\xb0\xa0*lexeme_end\x01\x01\xf2\xd0\xc0\xc1@\xc0\xb3\x05\x01\x07@\x90@\x02\x05\xf5\xe1\0@\0\x9f\xc0\xb3\x90\x05\x01]@\x90@\x02\x05\xf5\xe1\0@\0\xa0@\x02\x05\xf5\xe1\0@\0\xa1@\xb0\xc0\x05\x01p\0b\x01\x11\xf3\x01\x11\xf3\xc0\x05\x01q\0b\x01\x11\xf3\x01\x12\x11@@\xa1\x05\x01zK@\xa0\xb0\xa00lexeme_bytes_end\x01\x01\xf3\xd0\xc0\xc1@\xc0\xb3\x05\x01\x19@\x90@\x02\x05\xf5\xe1\0@\0\xa2\xc0\xb3\x90\x05\x01o@\x90@\x02\x05\xf5\xe1\0@\0\xa3@\x02\x05\xf5\xe1\0@\0\xa4@\xb0\xc0\x05\x01\x82\0g\x01\x12\xd8\x01\x12\xd8\xc0\x05\x01\x83\0g\x01\x12\xd8\x01\x12\xfc@@\xa1\x05\x01\x8cL@\xa0\xb0\xa0#loc\x01\x01\xf4\xd0\xc0\xc1@\xc0\xb3\x05\x01+@\x90@\x02\x05\xf5\xe1\0@\0\xa5\xc0\x92\xa0\xc0\xb3\x90\x05\x01\x84@\x90@\x02\x05\xf5\xe1\0@\0\xa7\xa0\xc0\xb3\x90\x05\x01\x89@\x90@\x02\x05\xf5\xe1\0@\0\xa6@\x02\x05\xf5\xe1\0@\0\xa8@\x02\x05\xf5\xe1\0@\0\xa9@\xb0\xc0\x05\x01\x9c\0k\x01\x13p\x01\x13p\xc0\x05\x01\x9d\0k\x01\x13p\x01\x13\x8d@@\xa1\x05\x01\xa6M@\xa0\xb0\xa0)bytes_loc\x01\x01\xf5\xd0\xc0\xc1@\xc0\xb3\x05\x01E@\x90@\x02\x05\xf5\xe1\0@\0\xaa\xc0\x92\xa0\xc0\xb3\x90\x05\x01\x9e@\x90@\x02\x05\xf5\xe1\0@\0\xac\xa0\xc0\xb3\x90\x05\x01\xa3@\x90@\x02\x05\xf5\xe1\0@\0\xab@\x02\x05\xf5\xe1\0@\0\xad@\x02\x05\xf5\xe1\0@\0\xae@\xb0\xc0\x05\x01\xb6\0p\x01\x14\x13\x01\x14\x13\xc0\x05\x01\xb7\0p\x01\x14\x13\x01\x146@@\xa1\x05\x01\xc0N@\xa0\xb0\xa0-lexeme_length\x01\x01\xf6\xd0\xc0\xc1@\xc0\xb3\x05\x01_@\x90@\x02\x05\xf5\xe1\0@\0\xaf\xc0\xb3\x90\x05\x01\xb5@\x90@\x02\x05\xf5\xe1\0@\0\xb0@\x02\x05\xf5\xe1\0@\0\xb1@\xb0\xc0\x05\x01\xc8\0u\x01\x14\xfe\x01\x14\xfe\xc0\x05\x01\xc9\0u\x01\x14\xfe\x01\x15\x1f@@\xa1\x05\x01\xd2O@\xa0\xb0\xa03lexeme_bytes_length\x01\x01\xf7\xd0\xc0\xc1@\xc0\xb3\x05\x01q@\x90@\x02\x05\xf5\xe1\0@\0\xb2\xc0\xb3\x90\x05\x01\xc7@\x90@\x02\x05\xf5\xe1\0@\0\xb3@\x02\x05\xf5\xe1\0@\0\xb4@\xb0\xc0\x05\x01\xda\0z\x01\x15\xee\x01\x15\xee\xc0\x05\x01\xdb\0z\x01\x15\xee\x01\x16\x15@@\xa1\x05\x01\xe4P@\xa0\xb0\xa00lexing_positions\x01\x01\xf8\xd0\xc0\xc1@\xc0\xb3\x05\x01\x83@\x90@\x02\x05\xf5\xe1\0@\0\xb5\xc0\x92\xa0\xc0\xb3\xa1\xa1\x05\x01\xba&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xb7\xa0\xc0\xb3\xa1\xa1\x05\x01\xc2&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xb6@\x02\x05\xf5\xe1\0@\0\xb8@\x02\x05\xf5\xe1\0@\0\xb9@\xb0\xc0\x05\x01\xfa\x01\0\x80\x01\x17\x11\x01\x17\x11\xc0\x05\x01\xfb\x01\0\x80\x01\x17\x11\x01\x17S@@\xa1\x05\x02\x04Q@\xa0\xb0\xa05lexing_position_start\x01\x01\xf9\xd0\xc0\xc1@\xc0\xb3\x05\x01\xa3@\x90@\x02\x05\xf5\xe1\0@\0\xba\xc0\xb3\xa1\xa1\x05\x01\xd7&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xbb@\x02\x05\xf5\xe1\0@\0\xbc@\xb0\xc0\x05\x02\x0f\x01\0\x84\x01\x17\xcb\x01\x17\xcb\xc0\x05\x02\x10\x01\0\x84\x01\x17\xcb\x01\x18\0@@\xa1\x05\x02\x19R@\xa0\xb0\xa04lexing_position_curr\x01\x01\xfa\xd0\xc0\xc1@\xc0\xb3\x05\x01\xb8@\x90@\x02\x05\xf5\xe1\0@\0\xbd\xc0\xb3\xa1\xa1\x05\x01\xec&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xbe@\x02\x05\xf5\xe1\0@\0\xbf@\xb0\xc0\x05\x02$\x01\0\x88\x01\x18u\x01\x18u\xc0\x05\x02%\x01\0\x88\x01\x18u\x01\x18\xa9@@\xa1\x05\x02.S@\xa0\xb0\xa06lexing_bytes_positions\x01\x01\xfb\xd0\xc0\xc1@\xc0\xb3\x05\x01\xcd@\x90@\x02\x05\xf5\xe1\0@\0\xc0\xc0\x92\xa0\xc0\xb3\xa1\xa1\x05\x02\x04&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xc2\xa0\xc0\xb3\xa1\xa1\x05\x02\f&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xc1@\x02\x05\xf5\xe1\0@\0\xc3@\x02\x05\xf5\xe1\0@\0\xc4@\xb0\xc0\x05\x02D\x01\0\x8e\x01\x19\xa5\x01\x19\xa5\xc0\x05\x02E\x01\0\x8e\x01\x19\xa5\x01\x19\xed@@\xa1\x05\x02NT@\xa0\xb0\xa0;lexing_bytes_position_start\x01\x01\xfc\xd0\xc0\xc1@\xc0\xb3\x05\x01\xed@\x90@\x02\x05\xf5\xe1\0@\0\xc5\xc0\xb3\xa1\xa1\x05\x02!&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xc6@\x02\x05\xf5\xe1\0@\0\xc7@\xb0\xc0\x05\x02Y\x01\0\x92\x01\x1ae\x01\x1ae\xc0\x05\x02Z\x01\0\x92\x01\x1ae\x01\x1a\xa0@@\xa1\x05\x02cU@\xa0\xb0\xa0:lexing_bytes_position_curr\x01\x01\xfd\xd0\xc0\xc1@\xc0\xb3\x05\x02\x02@\x90@\x02\x05\xf5\xe1\0@\0\xc8\xc0\xb3\xa1\xa1\x05\x026&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xc9@\x02\x05\xf5\xe1\0@\0\xca@\xb0\xc0\x05\x02n\x01\0\x96\x01\x1b\x15\x01\x1b\x15\xc0\x05\x02o\x01\0\x96\x01\x1b\x15\x01\x1bO@@\xa1\x05\x02xV@\xa0\xb0\xa0(new_line\x01\x01\xfe\xd0\xc0\xc1@\xc0\xb3\x05\x02\x17@\x90@\x02\x05\xf5\xe1\0@\0\xcb\xc0\xb3\x90\x05\x01\xf0@\x90@\x02\x05\xf5\xe1\0@\0\xcc@\x02\x05\xf5\xe1\0@\0\xcd@\xb0\xc0\x05\x02\x80\x01\0\x9b\x01\x1c\x0f\x01\x1c\x0f\xc0\x05\x02\x81\x01\0\x9b\x01\x1c\x0f\x01\x1c,@@\xa1\x05\x02\x8aW@\xa0\xb0\xa0&lexeme\x01\x01\xff\xd0\xc0\xc1@\xc0\xb3\x05\x02)@\x90@\x02\x05\xf5\xe1\0@\0\xce\xc0\xb3\x90\x05\x02J\xa0\xc0\xb3\xa1\xa1\x05\x02a%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xcf@\x90@\x02\x05\xf5\xe1\0@\0\xd0@\x02\x05\xf5\xe1\0@\0\xd1@\xb0\xc0\x05\x02\x9a\x01\0\x9f\x01\x1c\xab\x01\x1c\xab\xc0\x05\x02\x9b\x01\0\x9f\x01\x1c\xab\x01\x1c\xcf@@\xa1\x05\x02\xa4X@\xa0\xb0\xa0+lexeme_char\x01\x02\0\xd0\xc0\xc1@\xc0\xb3\x05\x02C@\x90@\x02\x05\xf5\xe1\0@\0\xd2\xc0\xc1@\xc0\xb3\x90\x05\x02\x9b@\x90@\x02\x05\xf5\xe1\0@\0\xd3\xc0\xb3\xa1\xa1\x05\x02}%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xd4@\x02\x05\xf5\xe1\0@\0\xd5@\x02\x05\xf5\xe1\0@\0\xd6@\xb0\xc0\x05\x02\xb5\x01\0\xa3\x01\x1d6\x01\x1d6\xc0\x05\x02\xb6\x01\0\xa3\x01\x1d6\x01\x1d`@@\xa1\x05\x02\xbfY@\xa0\xb0\xa0*sub_lexeme\x01\x02\x01\xd0\xc0\xc1@\xc0\xb3\x05\x02^@\x90@\x02\x05\xf5\xe1\0@\0\xd7\xc0\xc1@\xc0\xb3\x90\x05\x02\xb6@\x90@\x02\x05\xf5\xe1\0@\0\xd8\xc0\xc1@\xc0\xb3\x90\x05\x02\xbc@\x90@\x02\x05\xf5\xe1\0@\0\xd9\xc0\xb3\x90\x05\x02\x8b\xa0\xc0\xb3\xa1\xa1\x05\x02\xa2%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xda@\x90@\x02\x05\xf5\xe1\0@\0\xdb@\x02\x05\xf5\xe1\0@\0\xdc@\x02\x05\xf5\xe1\0@\0\xdd@\x02\x05\xf5\xe1\0@\0\xde@\xb0\xc0\x05\x02\xdb\x01\0\xa7\x01\x1d\xfa\x01\x1d\xfa\xc0\x05\x02\xdc\x01\0\xa7\x01\x1d\xfa\x01\x1e0@@\xa1\x05\x02\xe5Z@\xa0\xb0\xa0(rollback\x01\x02\x02\xd0\xc0\xc1@\xc0\xb3\x05\x02\x84@\x90@\x02\x05\xf5\xe1\0@\0\xdf\xc0\xb3\x90\x05\x02]@\x90@\x02\x05\xf5\xe1\0@\0\xe0@\x02\x05\xf5\xe1\0@\0\xe1@\xb0\xc0\x05\x02\xed\x01\0\xae\x01\x1fx\x01\x1fx\xc0\x05\x02\xee\x01\0\xae\x01\x1fx\x01\x1f\x95@@\xa1\x05\x02\xf7[@\xa0\xb0\xa0%start\x01\x02\x03\xd0\xc0\xc1@\xc0\xb3\x05\x02\x96@\x90@\x02\x05\xf5\xe1\0@\0\xe2\xc0\xb3\x90\x05\x02o@\x90@\x02\x05\xf5\xe1\0@\0\xe3@\x02\x05\xf5\xe1\0@\0\xe4@\xb0\xc0\x05\x02\xff\x01\0\xbb\x01\"\x05\x01\"\x05\xc0\x05\x03\0\x01\0\xbb\x01\"\x05\x01\"\x1f@@\xa1\x05\x03\t\\@\xa0\xb0\xa0$next\x01\x02\x04\xd0\xc0\xc1@\xc0\xb3\x05\x02\xa8@\x90@\x02\x05\xf5\xe1\0@\0\xe5\xc0\xb3\x90\x05\x02\xe4\xa0\xc0\xb3\xa1\xa1\x05\x02\xe0%Uchar!t@\x90@\x02\x05\xf5\xe1\0@\0\xe6@\x90@\x02\x05\xf5\xe1\0@\0\xe7@\x02\x05\xf5\xe1\0@\0\xe8@\xb0\xc0\x05\x03\x19\x01\0\xc1\x01#\x1c\x01#\x1c\xc0\x05\x03\x1a\x01\0\xc1\x01#\x1c\x01#?@@\xa1\x05\x03#]@\xa0\xb0\xa03__private__next_int\x01\x02\x05\xd0\xc0\xc1@\xc0\xb3\x05\x02\xc2@\x90@\x02\x05\xf5\xe1\0@\0\xe9\xc0\xb3\x90\x05\x03\x18@\x90@\x02\x05\xf5\xe1\0@\0\xea@\x02\x05\xf5\xe1\0@\0\xeb@\xb0\xc0\x05\x03+\x01\0\xca\x01$\xbd\x01$\xbd\xc0\x05\x03,\x01\0\xca\x01$\xbd\x01$\xe4@@\xa1\x05\x035^@\xa0\xb0\xa0$mark\x01\x02\x06\xd0\xc0\xc1@\xc0\xb3\x05\x02\xd4@\x90@\x02\x05\xf5\xe1\0@\0\xec\xc0\xc1@\xc0\xb3\x90\x05\x03,@\x90@\x02\x05\xf5\xe1\0@\0\xed\xc0\xb3\x90\x05\x02\xb3@\x90@\x02\x05\xf5\xe1\0@\0\xee@\x02\x05\xf5\xe1\0@\0\xef@\x02\x05\xf5\xe1\0@\0\xf0@\xb0\xc0\x05\x03C\x01\0\xce\x01%e\x01%e\xc0\x05\x03D\x01\0\xce\x01%e\x01%\x85@@\xa1\x05\x03M_@\xa0\xb0\xa0)backtrack\x01\x02\x07\xd0\xc0\xc1@\xc0\xb3\x05\x02\xec@\x90@\x02\x05\xf5\xe1\0@\0\xf1\xc0\xb3\x90\x05\x03B@\x90@\x02\x05\xf5\xe1\0@\0\xf2@\x02\x05\xf5\xe1\0@\0\xf3@\xb0\xc0\x05\x03U\x01\0\xd3\x01&F\x01&F\xc0\x05\x03V\x01\0\xd3\x01&F\x01&c@@\xa1\x05\x03_`@\xa0\xb0\xa0.with_tokenizer\x01\x02\b\xd0\xc0\xc1@\xc0\xc1@\xc0\xb3\x05\x03\0@\x90@\x02\x05\xf5\xe1\0@\0\xf4\xc0\x90\x90%token\x02\x05\xf5\xe1\0@\0\xfa@\x02\x05\xf5\xe1\0@\0\xf5\xc0\xc1@\xc0\xb3\x05\x03\t@\x90@\x02\x05\xf5\xe1\0@\0\xf6\xc0\xc1@\xc0\xb3\x90\x05\x02\xe4@\x90@\x02\x05\xf5\xe1\0@\0\xf7\xc0\x92\xa0\x04\x12\xa0\xc0\xb3\xa1\xa1\x05\x03G&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xf9\xa0\xc0\xb3\xa1\xa1\x05\x03O&Lexing(position@\x90@\x02\x05\xf5\xe1\0@\0\xf8@\x02\x05\xf5\xe1\0@\0\xfb@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x05\x03\x87\x01\0\xd8\x01'8\x01'8\xc0\x05\x03\x88\x01\0\xdc\x01'{\x01'\xa7@@\xa1\x05\x03\x91a@\xa0\xd3\xa0&Latin1\x01\x02\t@\xc0\x91\xa0\xb0\xa0(from_gen\x01\x02\f\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x92#Gen!t\xa0\xc0\xb3\x90\xa3$charB@\x90@\x02\x05\xf5\xe1\0@\x01\xffH@\x90@\x02\x05\xf5\xe1\0@\x01\xffI\xc0\xb3\x05\x03E@\x90@\x02\x05\xf5\xe1\0@\x01\xffJ@\x02\x05\xf5\xe1\0@\x01\xffK@\xb0\xc0\x05\x03\xaa\x01\0\xe3\x01(]\x01(_\xc0\x05\x03\xab\x01\0\xe3\x01(]\x01(\x82@@\xa1\x05\x03\xb4b@\xa0\xb0\xa0,from_channel\x01\x02\r\xd0\xc0\xc1@\xc0\xb3\xa1\x05\x03\x83*in_channel@\x90@\x02\x05\xf5\xe1\0@\x01\xffL\xc0\xb3\x05\x03X@\x90@\x02\x05\xf5\xe1\0@\x01\xffM@\x02\x05\xf5\xe1\0@\x01\xffN@\xb0\xc0\x05\x03\xbd\x01\0\xe7\x01(\xfb\x01(\xfd\xc0\x05\x03\xbe\x01\0\xe7\x01(\xfb\x01)$@@\xa1\x05\x03\xc7c@\xa0\xb0\xa0+from_string\x01\x02\x0e\xd0\xc0\xc1@\xc0\xb3\x90\x05\x03&@\x90@\x02\x05\xf5\xe1\0@\x01\xffO\xc0\xb3\x05\x03j@\x90@\x02\x05\xf5\xe1\0@\x01\xffP@\x02\x05\xf5\xe1\0@\x01\xffQ@\xb0\xc0\x05\x03\xcf\x01\0\xea\x01)]\x01)_\xc0\x05\x03\xd0\x01\0\xea\x01)]\x01)\x81@@\xa1\x05\x03\xd9d@\xa0\xb0\xa0&lexeme\x01\x02\x0f\xd0\xc0\xc1@\xc0\xb3\x05\x03x@\x90@\x02\x05\xf5\xe1\0@\x01\xffR\xc0\xb3\x90\x05\x03;@\x90@\x02\x05\xf5\xe1\0@\x01\xffS@\x02\x05\xf5\xe1\0@\x01\xffT@\xb0\xc0\x05\x03\xe1\x01\0\xef\x01*:\x01*<\xc0\x05\x03\xe2\x01\0\xef\x01*:\x01*Y@@\xa1\x05\x03\xebe@\xa0\xb0\xa0*sub_lexeme\x01\x02\x10\xd0\xc0\xc1@\xc0\xb3\x05\x03\x8a@\x90@\x02\x05\xf5\xe1\0@\x01\xffU\xc0\xc1@\xc0\xb3\x90\x05\x03\xe2@\x90@\x02\x05\xf5\xe1\0@\x01\xffV\xc0\xc1@\xc0\xb3\x90\x05\x03\xe8@\x90@\x02\x05\xf5\xe1\0@\x01\xffW\xc0\xb3\x90\x05\x03Y@\x90@\x02\x05\xf5\xe1\0@\x01\xffX@\x02\x05\xf5\xe1\0@\x01\xffY@\x02\x05\xf5\xe1\0@\x01\xffZ@\x02\x05\xf5\xe1\0@\x01\xff[@\xb0\xc0\x05\x03\xff\x01\0\xf4\x01+\x16\x01+\x18\xc0\x05\x04\0\x01\0\xf4\x01+\x16\x01+G@@\xa1\x05\x04\tf@\xa0\xb0\xa0+lexeme_char\x01\x02\x11\xd0\xc0\xc1@\xc0\xb3\x05\x03\xa8@\x90@\x02\x05\xf5\xe1\0@\x01\xff\\\xc0\xc1@\xc0\xb3\x90\x05\x04\0@\x90@\x02\x05\xf5\xe1\0@\x01\xff]\xc0\xb3\x90\x04s@\x90@\x02\x05\xf5\xe1\0@\x01\xff^@\x02\x05\xf5\xe1\0@\x01\xff_@\x02\x05\xf5\xe1\0@\x01\xff`@\xb0\xc0\x05\x04\x17\x01\0\xf9\x01,\x05\x01,\x07\xc0\x05\x04\x18\x01\0\xf9\x01,\x05\x01,.@@\xa1\x05\x04!g@@@\xb0\xc0\x05\x04\x1b\x01\0\xe0\x01'\xd2\x01'\xd2\xc0\x05\x04\x1c\x01\0\xfa\x01,/\x01,2@\xa1\x05\x04%h@@\xa0\xd3\xa0$Utf8\x01\x02\n@\xc0\x91\xa0\xb0\xa0(from_gen\x01\x02\x12\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x92#Gen!t\xa0\xc0\xb3\x90\x04\x94@\x90@\x02\x05\xf5\xe1\0@\x01\xff4@\x90@\x02\x05\xf5\xe1\0@\x01\xff5\xc0\xb3\x05\x03\xd7@\x90@\x02\x05\xf5\xe1\0@\x01\xff6@\x02\x05\xf5\xe1\0@\x01\xff7@\xb0\xc0\x05\x04<\x01\0\xfe\x01,|\x01,~\xc0\x05\x04=\x01\0\xfe\x01,|\x01,\xa1@@\xa1\x05\x04Fi@\xa0\xb0\xa0,from_channel\x01\x02\x13\xd0\xc0\xc1@\xc0\xb3\xa1\x05\x04\x15*in_channel@\x90@\x02\x05\xf5\xe1\0@\x01\xff8\xc0\xb3\x05\x03\xea@\x90@\x02\x05\xf5\xe1\0@\x01\xff9@\x02\x05\xf5\xe1\0@\x01\xff:@\xb0\xc0\x05\x04O\x01\x01\x01\x01,\xe0\x01,\xe2\xc0\x05\x04P\x01\x01\x01\x01,\xe0\x01-\t@@\xa1\x05\x04Yj@\xa0\xb0\xa0+from_string\x01\x02\x14\xd0\xc0\xc1@\xc0\xb3\x90\x05\x03\xb8@\x90@\x02\x05\xf5\xe1\0@\x01\xff;\xc0\xb3\x05\x03\xfc@\x90@\x02\x05\xf5\xe1\0@\x01\xff<@\x02\x05\xf5\xe1\0@\x01\xff=@\xb0\xc0\x05\x04a\x01\x01\x04\x01-A\x01-C\xc0\x05\x04b\x01\x01\x04\x01-A\x01-e@@\xa1\x05\x04kk@\xa0\xb0\xa0&lexeme\x01\x02\x15\xd0\xc0\xc1@\xc0\xb3\x05\x04\n@\x90@\x02\x05\xf5\xe1\0@\x01\xff>\xc0\xb3\x90\x05\x03\xcd@\x90@\x02\x05\xf5\xe1\0@\x01\xff?@\x02\x05\xf5\xe1\0@\x01\xff@@\xb0\xc0\x05\x04s\x01\x01\x07\x01-\xa6\x01-\xa8\xc0\x05\x04t\x01\x01\x07\x01-\xa6\x01-\xc5@@\xa1\x05\x04}l@\xa0\xb0\xa0*sub_lexeme\x01\x02\x16\xd0\xc0\xc1@\xc0\xb3\x05\x04\x1c@\x90@\x02\x05\xf5\xe1\0@\x01\xffA\xc0\xc1@\xc0\xb3\x90\x05\x04t@\x90@\x02\x05\xf5\xe1\0@\x01\xffB\xc0\xc1@\xc0\xb3\x90\x05\x04z@\x90@\x02\x05\xf5\xe1\0@\x01\xffC\xc0\xb3\x90\x05\x03\xeb@\x90@\x02\x05\xf5\xe1\0@\x01\xffD@\x02\x05\xf5\xe1\0@\x01\xffE@\x02\x05\xf5\xe1\0@\x01\xffF@\x02\x05\xf5\xe1\0@\x01\xffG@\xb0\xc0\x05\x04\x91\x01\x01\n\x01.\n\x01.\f\xc0\x05\x04\x92\x01\x01\n\x01.\n\x01.;@@\xa1\x05\x04\x9bm@\xa0\xd3\xa0&Helper\x01\x02\x17@\xc0\x91\xa0\xb0\xa0%width\x01\x02\x18\xd0\xc0\xc1@\xc0\xb3\x90\x05\x01\x02@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x1c\xc0\xb3\x90\x05\x04\x97@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x1d@\x02\x05\xf5\xe1\0@\x01\xff\x1e@\xb0\xc0\x05\x04\xaa\x01\x01\r\x01.S\x01.W\xc0\x05\x04\xab\x01\x01\r\x01.S\x01.n@@\xa1\x05\x04\xb4n@\xa0\xb0\xa0)check_two\x01\x02\x19\xd0\xc0\xc1@\xc0\xb3\x90\x05\x04\xa6@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x1f\xc0\xc1@\xc0\xb3\x90\x05\x04\xac@\x90@\x02\x05\xf5\xe1\0@\x01\xff \xc0\xb3\x90\x05\x04\xb0@\x90@\x02\x05\xf5\xe1\0@\x01\xff!@\x02\x05\xf5\xe1\0@\x01\xff\"@\x02\x05\xf5\xe1\0@\x01\xff#@\xb0\xc0\x05\x04\xc3\x01\x01\x0e\x01.o\x01.s\xc0\x05\x04\xc4\x01\x01\x0e\x01.o\x01.\x94@@\xa1\x05\x04\xcdo@\xa0\xb0\xa0+check_three\x01\x02\x1a\xd0\xc0\xc1@\xc0\xb3\x90\x05\x04\xbf@\x90@\x02\x05\xf5\xe1\0@\x01\xff$\xc0\xc1@\xc0\xb3\x90\x05\x04\xc5@\x90@\x02\x05\xf5\xe1\0@\x01\xff%\xc0\xc1@\xc0\xb3\x90\x05\x04\xcb@\x90@\x02\x05\xf5\xe1\0@\x01\xff&\xc0\xb3\x90\x05\x04\xcf@\x90@\x02\x05\xf5\xe1\0@\x01\xff'@\x02\x05\xf5\xe1\0@\x01\xff(@\x02\x05\xf5\xe1\0@\x01\xff)@\x02\x05\xf5\xe1\0@\x01\xff*@\xb0\xc0\x05\x04\xe2\x01\x01\x0f\x01.\x95\x01.\x99\xc0\x05\x04\xe3\x01\x01\x0f\x01.\x95\x01.\xc3@@\xa1\x05\x04\xecp@\xa0\xb0\xa0*check_four\x01\x02\x1b\xd0\xc0\xc1@\xc0\xb3\x90\x05\x04\xde@\x90@\x02\x05\xf5\xe1\0@\x01\xff+\xc0\xc1@\xc0\xb3\x90\x05\x04\xe4@\x90@\x02\x05\xf5\xe1\0@\x01\xff,\xc0\xc1@\xc0\xb3\x90\x05\x04\xea@\x90@\x02\x05\xf5\xe1\0@\x01\xff-\xc0\xc1@\xc0\xb3\x90\x05\x04\xf0@\x90@\x02\x05\xf5\xe1\0@\x01\xff.\xc0\xb3\x90\x05\x04\xf4@\x90@\x02\x05\xf5\xe1\0@\x01\xff/@\x02\x05\xf5\xe1\0@\x01\xff0@\x02\x05\xf5\xe1\0@\x01\xff1@\x02\x05\xf5\xe1\0@\x01\xff2@\x02\x05\xf5\xe1\0@\x01\xff3@\xb0\xc0\x05\x05\x07\x01\x01\x10\x01.\xc4\x01.\xc8\xc0\x05\x05\b\x01\x01\x10\x01.\xc4\x01.\xf8@@\xa1\x05\x05\x11q@@@\xb0\xc0\x05\x05\v\x01\x01\f\x01.=\x01.?\xc0\x05\x05\f\x01\x01\x11\x01.\xf9\x01.\xfe@\xa1\x05\x05\x15r@@@@\xb0\xc0\x05\x05\x0f\x01\0\xfc\x01,4\x01,4\xc0\x05\x05\x10\x01\x01\x12\x01.\xff\x01/\x02@\xa1\x05\x05\x19s@@\xa0\xd3\xa0%Utf16\x01\x02\v@\xc0\x91\xa0\xc1\xa0*byte_order\x01\x02\x1c\b\0\x008\0@@\xa1\xa0\xe0\xa0-Little_endian\x01\x01\xdb\x90@@\xb0\xc0\x05\x05$\x01\x01\x15\x01/\x17\x01/+\xc0\x05\x05%\x01\x01\x15\x01/\x17\x01/8@@\xa1\x05\x05.u\xa0\xe0\xa0*Big_endian\x01\x01\xdc\x90@@\xb0\xc0\x05\x05-\x01\x01\x15\x01/\x17\x01/9\xc0\x05\x05.\x01\x01\x15\x01/\x17\x01/E@@\xa1\x05\x057v@@A@@@@@\xb0\xc0\x05\x051\x01\x01\x15\x01/\x17\x01/\x19\x04\x04@@A@\xa1\x05\x05:tA@\xa0\xb0\xa0(from_gen\x01\x02\x1d\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x92#Gen!t\xa0\xc0\xb3\x90\x05\x01\xa3@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xf7@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xf8\xc0\xc1@\xc0\xb3\x90\x05\x05!\xa0\xc0\xb3\x90\x046@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xf9@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xfa\xc0\xb3\x05\x04\xf1@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xfb@\x02\x05\xf5\xe1\0@\x01\xfe\xfc@\x02\x05\xf5\xe1\0@\x01\xfe\xfd@\xb0\xc0\x05\x05V\x01\x01\x1d\x011\x1d\x011\x1f\xc0\x05\x05W\x01\x01\x1d\x011\x1d\x011W@@\xa1\x05\x05`w@\xa0\xb0\xa0,from_channel\x01\x02\x1e\xd0\xc0\xc1@\xc0\xb3\xa1\x05\x05/*in_channel@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xfe\xc0\xc1@\xc0\xb3\x90\x05\x05?\xa0\xc0\xb3\x04\x1e@\x90@\x02\x05\xf5\xe1\0@\x01\xfe\xff@\x90@\x02\x05\xf5\xe1\0@\x01\xff\0\xc0\xb3\x05\x05\x0e@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x01@\x02\x05\xf5\xe1\0@\x01\xff\x02@\x02\x05\xf5\xe1\0@\x01\xff\x03@\xb0\xc0\x05\x05s\x01\x01 \x011\x92\x011\x94\xc0\x05\x05t\x01\x01 \x011\x92\x011\xd0@@\xa1\x05\x05}x@\xa0\xb0\xa0+from_string\x01\x02\x1f\xd0\xc0\xc1@\xc0\xb3\x90\x05\x04\xdc@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x04\xc0\xc1@\xc0\xb3\x90\x05\x05[\xa0\xc0\xb3\x04:@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x05@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x06\xc0\xb3\x05\x05*@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x07@\x02\x05\xf5\xe1\0@\x01\xff\b@\x02\x05\xf5\xe1\0@\x01\xff\t@\xb0\xc0\x05\x05\x8f\x01\x01#\x012\x06\x012\b\xc0\x05\x05\x90\x01\x01#\x012\x06\x012?@@\xa1\x05\x05\x99y@\xa0\xb0\xa0&lexeme\x01\x02 \xd0\xc0\xc1@\xc0\xb3\x05\x058@\x90@\x02\x05\xf5\xe1\0@\x01\xff\n\xc0\xc1@\xc0\xb3\x04Q@\x90@\x02\x05\xf5\xe1\0@\x01\xff\v\xc0\xc1@\xc0\xb3\x90\xa3$boolE@\x90@\x02\x05\xf5\xe1\0@\x01\xff\f\xc0\xb3\x90\x05\x05\b@\x90@\x02\x05\xf5\xe1\0@\x01\xff\r@\x02\x05\xf5\xe1\0@\x01\xff\x0e@\x02\x05\xf5\xe1\0@\x01\xff\x0f@\x02\x05\xf5\xe1\0@\x01\xff\x10@\xb0\xc0\x05\x05\xae\x01\x01'\x012\xdb\x012\xdd\xc0\x05\x05\xaf\x01\x01'\x012\xdb\x013\x10@@\xa1\x05\x05\xb8z@\xa0\xb0\xa0*sub_lexeme\x01\x02!\xd0\xc0\xc1@\xc0\xb3\x05\x05W@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x11\xc0\xc1@\xc0\xb3\x90\x05\x05\xaf@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x12\xc0\xc1@\xc0\xb3\x90\x05\x05\xb5@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x13\xc0\xc1@\xc0\xb3\x04|@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x14\xc0\xc1@\xc0\xb3\x90\x04+@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x15\xc0\xb3\x90\x05\x051@\x90@\x02\x05\xf5\xe1\0@\x01\xff\x16@\x02\x05\xf5\xe1\0@\x01\xff\x17@\x02\x05\xf5\xe1\0@\x01\xff\x18@\x02\x05\xf5\xe1\0@\x01\xff\x19@\x02\x05\xf5\xe1\0@\x01\xff\x1a@\x02\x05\xf5\xe1\0@\x01\xff\x1b@\xb0\xc0\x05\x05\xd7\x01\x01,\x013\xbb\x013\xbd\xc0\x05\x05\xd8\x01\x01,\x013\xbb\x014\x02@@\xa1\x05\x05\xe1{@@@\xb0\xc0\x05\x05\xdb\x01\x01\x14\x01/\x04\x01/\x04\xc0\x05\x05\xdc\x01\x01-\x014\x03\x014\x06@\xa1\x05\x05\xe5|@@@\x84\x95\xa6\xbe\0\0\x01j\0\0\x007\0\0\0\xcc\0\0\0\xa5\xa0\xa0)Sedlexing\x900Q\x94\xe4S\xecs\xe1\xb3d\x1b\xb9F\x9f\x02[/\xa0\xa0-Stdlib__Uchar\x900\xc0\xdd\xe0*Ujmy\xe3c\xad6]\x16]W\xa0\xa0+Stdlib__Seq\x900\xb65\x11\x03\"\x11\xea\xe4\xb5g\xba1<\xd7)b\xa0\xa0.Stdlib__Lexing\x900\xc91\x8c'j\xc7\xe3\x83\xfdh,-\xd0k\xe44\xa0\xa0.Stdlib__Format\x900\xb6\xed\xb9{hX\x19\xe8sH\x1f\xe0W#\xc8\xbc\xa0\xa0.Stdlib__Either\x900&\x84]\xf2\x8d\x19XF\x87\xa3\x8a\x1a\xb8\x14\xc3\xf9\xa0\xa0.Stdlib__Buffer\x900K\t\xc9\xa6\xd0b+\xbfZ8)#KH\x18\"\xa0\xa0&Stdlib\x900y\xb0\xe9\xd3\xb6\xf7\xfe\xd0~\xb3\xcc*\xbb\x96\x1b\x91\xa0\xa0(Gen_intf\x900\xa9uo\x14\x17>\x15xhsmh\xee<\r\xff\xa0\xa0#Gen\x900\xf0\xf7\xa5Q\xb7\xd3\x89d\xc77a\x04\xdf?\fn\xa0\xa08CamlinternalFormatBasics\x900\x8f\x8fcEXy\x8e\xe4\b\xdf<P\xa5S\x9b\x15@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Gen = global_data.Gen,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib = global_data.Stdlib,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    InvalidCodepoint =
      [248, "Sedlexing.InvalidCodepoint", caml_fresh_oo_id(0)],
    MalFormed = [248, "Sedlexing.MalFormed", caml_fresh_oo_id(0)],
    to_int = Stdlib_Uchar[10],
    is_char = Stdlib_Uchar[11],
    of_char = Stdlib_Uchar[12],
    to_char = Stdlib_Uchar[13],
    equal = Stdlib_Uchar[15],
    utf_8_byte_length = Stdlib_Uchar[23],
    utf_16_byte_length = Stdlib_Uchar[24];
   function of_int(x){
    if(Stdlib_Uchar[7].call(null, x)) return Stdlib_Uchar[9].call(null, x);
    throw caml_maybe_attach_backtrace(MalFormed, 1);
   }
   var a = [0, cst_src_lib_sedlexing_ml, 88, 27];
   function empty_lexbuf(bytes_per_char){
    return [0,
            function(param, c, b){
             throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
            },
            bytes_per_char,
            ,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            cst,
            0];
   }
   var dummy_uchar = of_int(0), nl_uchar = of_int(10), chunk_size = 512;
   function create(opt, refill){
    if(opt)
     var sth = opt[1], bytes_per_char = sth;
    else
     var bytes_per_char = function(param){return 1;};
    var init = empty_lexbuf(bytes_per_char);
    return [0,
            refill,
            init[2],
            caml_make_vect(512, dummy_uchar),
            init[4],
            init[5],
            init[6],
            init[7],
            init[8],
            init[9],
            init[10],
            init[11],
            init[12],
            init[13],
            init[14],
            init[15],
            init[16],
            init[17],
            init[18],
            init[19],
            init[20],
            init[21],
            init[22],
            init[23],
            init[24]];
   }
   function set_position(bytes_position, lexbuf, position){
    lexbuf[5] = position[4] - lexbuf[7] | 0;
    lexbuf[9] = position[3];
    lexbuf[11] = position[2];
    var
     bytes_position$0 = Stdlib_Option[3].call(null, bytes_position, position);
    lexbuf[6] = bytes_position$0[4] - lexbuf[8] | 0;
    lexbuf[10] = bytes_position$0[3];
    return 0;
   }
   function set_filename(lexbuf, fname){lexbuf[23] = fname; return 0;}
   function from_gen(bytes_per_char, gen){
    var malformed = [0, 0];
    function refill(buf, pos, len){
     var i = 0;
     for(;;){
      if(malformed[1]) throw caml_maybe_attach_backtrace(MalFormed, 1);
      if(len <= i) return len;
      try{var val = caml_call1(gen, 0);}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn === MalFormed && 0 !== i){malformed[1] = 1; return i;}
       throw caml_maybe_attach_backtrace(exn, 0);
      }
      if(! val) return i;
      var c = val[1], a = pos + i | 0;
      caml_check_bound(buf, a)[a + 1] = c;
      var i$0 = i + 1 | 0;
      i = i$0;
     }
    }
    return create(bytes_per_char, refill);
   }
   function from_int_array(bytes_per_char, a){
    return from_gen
            (bytes_per_char,
             Gen[12].call
              (null,
               [0, a.length - 1],
               function(i){return of_int(caml_check_bound(a, i)[i + 1]);}));
   }
   function from_uchar_array(opt, a){
    if(opt)
     var sth = opt[1], bytes_per_char = sth;
    else
     var bytes_per_char = function(param){return 1;};
    var
     len = a.length - 1,
     init = empty_lexbuf(bytes_per_char),
     b = init[23],
     c = init[22],
     d = init[21],
     e = init[20],
     f = init[19],
     g = init[18],
     h = init[17],
     i = init[16],
     j = init[15],
     k = init[14],
     l = init[13],
     m = init[12],
     n = init[11],
     o = init[10],
     p = init[9],
     q = init[8],
     r = init[7],
     s = init[6],
     t = init[5],
     u =
       Stdlib_Array[2].call
        (null, len, function(i){return caml_check_bound(a, i)[i + 1];});
    return [0,
            init[1],
            init[2],
            u,
            len,
            t,
            s,
            r,
            q,
            p,
            o,
            n,
            m,
            l,
            k,
            j,
            i,
            h,
            g,
            f,
            e,
            d,
            c,
            b,
            1];
   }
   function new_line(lexbuf){
    lexbuf[11] = lexbuf[11] + 1 | 0;
    lexbuf[9] = lexbuf[7] + lexbuf[5] | 0;
    lexbuf[10] = lexbuf[8] + lexbuf[6] | 0;
    return 0;
   }
   function next_aux(some, none, lexbuf){
    var c = 1 - lexbuf[24];
    if(c)
     var b = lexbuf[4], a = lexbuf[7], d = a === b ? 1 : 0;
    else
     var d = c;
    if(d){
     if(lexbuf[3].length - 1 < (lexbuf[4] + 512 | 0)){
      var s = lexbuf[12], s_bytes = lexbuf[13], ls = lexbuf[4] - s | 0;
      if((ls + 512 | 0) <= lexbuf[3].length - 1)
       Stdlib_Array[10].call(null, lexbuf[3], s, lexbuf[3], 0, ls);
      else{
       var
        newlen = (lexbuf[3].length + 511 | 0) * 2 | 0,
        newbuf = caml_make_vect(newlen, dummy_uchar);
       Stdlib_Array[10].call(null, lexbuf[3], s, newbuf, 0, ls);
       lexbuf[3] = newbuf;
      }
      lexbuf[4] = ls;
      lexbuf[5] = lexbuf[5] + s | 0;
      lexbuf[6] = lexbuf[6] + s_bytes | 0;
      lexbuf[7] = lexbuf[7] - s | 0;
      lexbuf[8] = lexbuf[8] - s_bytes | 0;
      lexbuf[17] = lexbuf[17] - s | 0;
      lexbuf[18] = lexbuf[18] - s_bytes | 0;
      lexbuf[12] = 0;
      lexbuf[13] = 0;
     }
     var n = caml_call3(lexbuf[1], lexbuf[3], lexbuf[7], chunk_size);
     if(n === 0) lexbuf[24] = 1; else lexbuf[4] = lexbuf[4] + n | 0;
    }
    if(lexbuf[24]){
     var b$0 = lexbuf[4], a$0 = lexbuf[7];
     if(a$0 === b$0) return none;
    }
    var e = lexbuf[7], ret = caml_check_bound(lexbuf[3], e)[e + 1];
    lexbuf[7] = lexbuf[7] + 1 | 0;
    var f = caml_call1(lexbuf[2], ret);
    lexbuf[8] = lexbuf[8] + f | 0;
    if(equal(ret, nl_uchar)) new_line(lexbuf);
    return caml_call1(some, ret);
   }
   function next(lexbuf){
    return next_aux(function(x){return [0, x];}, 0, lexbuf);
   }
   function private_next_int(lexbuf){return next_aux(to_int, -1, lexbuf);}
   function mark(lexbuf, i){
    lexbuf[17] = lexbuf[7];
    lexbuf[18] = lexbuf[8];
    lexbuf[19] = lexbuf[9];
    lexbuf[20] = lexbuf[10];
    lexbuf[21] = lexbuf[11];
    lexbuf[22] = i;
    return 0;
   }
   function start(lexbuf){
    lexbuf[12] = lexbuf[7];
    lexbuf[13] = lexbuf[8];
    lexbuf[14] = lexbuf[9];
    lexbuf[15] = lexbuf[10];
    lexbuf[16] = lexbuf[11];
    return mark(lexbuf, -1);
   }
   function backtrack(lexbuf){
    lexbuf[7] = lexbuf[17];
    lexbuf[8] = lexbuf[18];
    lexbuf[9] = lexbuf[19];
    lexbuf[10] = lexbuf[20];
    lexbuf[11] = lexbuf[21];
    return lexbuf[22];
   }
   function rollback(lexbuf){
    lexbuf[7] = lexbuf[12];
    lexbuf[8] = lexbuf[13];
    lexbuf[9] = lexbuf[14];
    lexbuf[10] = lexbuf[15];
    lexbuf[11] = lexbuf[16];
    return 0;
   }
   function lexeme_start(lexbuf){return lexbuf[12] + lexbuf[5] | 0;}
   function lexeme_bytes_start(lexbuf){return lexbuf[13] + lexbuf[6] | 0;}
   function lexeme_end(lexbuf){return lexbuf[7] + lexbuf[5] | 0;}
   function lexeme_bytes_end(lexbuf){return lexbuf[8] + lexbuf[6] | 0;}
   function loc(lexbuf){
    return [0, lexbuf[12] + lexbuf[5] | 0, lexbuf[7] + lexbuf[5] | 0];
   }
   function bytes_loc(lexbuf){
    return [0, lexbuf[13] + lexbuf[6] | 0, lexbuf[8] + lexbuf[6] | 0];
   }
   function lexeme_length(lexbuf){return lexbuf[7] - lexbuf[12] | 0;}
   function lexeme_bytes_length(lexbuf){return lexbuf[8] - lexbuf[13] | 0;}
   function sub_lexeme(lexbuf, pos, len){
    return Stdlib_Array[7].call(null, lexbuf[3], lexbuf[12] + pos | 0, len);
   }
   function lexeme(lexbuf){
    return Stdlib_Array[7].call
            (null, lexbuf[3], lexbuf[12], lexbuf[7] - lexbuf[12] | 0);
   }
   function lexeme_char(lexbuf, pos){
    var a = lexbuf[12] + pos | 0;
    return caml_check_bound(lexbuf[3], a)[a + 1];
   }
   function lexing_position_start(lexbuf){
    return [0, lexbuf[23], lexbuf[16], lexbuf[14], lexbuf[12] + lexbuf[5] | 0];
   }
   function lexing_position_curr(lexbuf){
    return [0, lexbuf[23], lexbuf[11], lexbuf[9], lexbuf[7] + lexbuf[5] | 0];
   }
   function lexing_positions(lexbuf){
    var
     start_p = lexing_position_start(lexbuf),
     curr_p = lexing_position_curr(lexbuf);
    return [0, start_p, curr_p];
   }
   function lexing_bytes_position_start(lexbuf){
    return [0, lexbuf[23], lexbuf[16], lexbuf[15], lexbuf[13] + lexbuf[6] | 0];
   }
   function lexing_bytes_position_curr(lexbuf){
    return [0, lexbuf[23], lexbuf[11], lexbuf[10], lexbuf[8] + lexbuf[6] | 0];
   }
   function lexing_bytes_positions(lexbuf){
    var
     start_p = lexing_bytes_position_start(lexbuf),
     curr_p = lexing_bytes_position_curr(lexbuf);
    return [0, start_p, curr_p];
   }
   function with_tokenizer(lexer, lexbuf){
    function lexer$0(param){
     var
      token = caml_call1(lexer, lexbuf),
      match = lexing_positions(lexbuf),
      curr_p = match[2],
      start_p = match[1];
     return [0, token, start_p, curr_p];
    }
    return lexer$0;
   }
   var
    Missing_input = [248, "Sedlexing.Chan.Missing_input", caml_fresh_oo_id(0)],
    min_buffer_size = 64,
    cst_Sedlexing_Chan_ensure = "Sedlexing.Chan.ensure",
    cst_advance = "advance",
    b = [0, cst_src_lib_sedlexing_ml, 501, 15];
   function available(t){return t[3] - t[4] | 0;}
   function ensure_bytes_available(t, can_refill, n){
    var a = n <= 0 ? 1 : 0, b = a || (64 < n ? 1 : 0);
    if(b) Stdlib[1].call(null, cst_Sedlexing_Chan_ensure);
    for(;;){
     if(n <= available(t)) return;
     if(! can_refill) throw caml_maybe_attach_backtrace(Missing_input, 1);
     var len = t[3] - t[4] | 0;
     if(0 < len) Stdlib_Bytes[11].call(null, t[1], t[4], t[1], 0, len);
     var
      read =
        Stdlib[84].call
         (null, t[2], t[1], len, runtime.caml_ml_bytes_length(t[1]) - len | 0);
     t[3] = len + read | 0;
     t[4] = 0;
     if(read === 0) throw caml_maybe_attach_backtrace(Missing_input, 1);
    }
   }
   function get(t, i){return runtime.caml_bytes_get(t[1], t[4] + i | 0);}
   function advance(t, n){
    if(t[3] < (t[4] + n | 0)) Stdlib[1].call(null, cst_advance);
    t[4] = t[4] + n | 0;
   }
   function make_from_channel
   (bytes_per_char, ic, max_bytes_per_uchar, min_bytes_per_uchar, read_uchar){
    var
     len$0 = 512 * max_bytes_per_uchar | 0,
     len = Stdlib[17].call(null, len$0, min_buffer_size),
     t = [0, caml_create_bytes(len), ic, 0, 0],
     malformed = [0, 0];
    function refill(buf, pos, len){
     var i = 0;
     for(;;){
      if(malformed[1]) throw caml_maybe_attach_backtrace(MalFormed, 1);
      if(i === len) return i;
      try{
       var can_refill = i === 0 ? 1 : 0;
       ensure_bytes_available(t, can_refill, min_bytes_per_uchar);
       var c = caml_call2(read_uchar, can_refill, t);
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn === MalFormed && 0 !== i){malformed[1] = 1; return i;}
       if(exn !== Missing_input) throw caml_maybe_attach_backtrace(exn, 0);
       var b = i === 0 ? 1 : 0, d = b ? 0 < available(t) ? 1 : 0 : b;
       if(d) throw caml_maybe_attach_backtrace(MalFormed, 1);
       return i;
      }
      var a = pos + i | 0;
      caml_check_bound(buf, a)[a + 1] = c;
      var i$0 = i + 1 | 0;
      i = i$0;
     }
    }
    return create(bytes_per_char, refill);
   }
   function from_gen$0(s){
    return from_gen
            ([0, function(param){return 1;}], Gen[21].call(null, of_char, s));
   }
   function from_string(s){
    var
     len = caml_ml_string_length(s),
     init = empty_lexbuf(function(param){return 1;}),
     a = init[23],
     b = init[22],
     c = init[21],
     d = init[20],
     e = init[19],
     f = init[18],
     g = init[17],
     h = init[16],
     i = init[15],
     j = init[14],
     k = init[13],
     l = init[12],
     m = init[11],
     n = init[10],
     o = init[9],
     p = init[8],
     q = init[7],
     r = init[6],
     t = init[5],
     u =
       Stdlib_Array[2].call
        (null, len, function(i){return of_char(caml_string_get(s, i));});
    return [0,
            init[1],
            init[2],
            u,
            len,
            t,
            r,
            q,
            p,
            o,
            n,
            m,
            l,
            k,
            j,
            i,
            h,
            g,
            f,
            e,
            d,
            c,
            b,
            a,
            1];
   }
   function from_channel(ic){
    return make_from_channel
            ([0, function(param){return 1;}],
             ic,
             1,
             1,
             function(param, t){
              var c = get(t, 0);
              advance(t, 1);
              return of_char(c);
             });
   }
   function to_latin1(c){
    if(is_char(c)) return to_char(c);
    throw caml_maybe_attach_backtrace([0, InvalidCodepoint, to_int(c)], 1);
   }
   function lexeme_char$0(lexbuf, pos){
    return to_latin1(lexeme_char(lexbuf, pos));
   }
   function sub_lexeme$0(lexbuf, pos, len){
    var s = caml_create_bytes(len), a = len - 1 | 0, c = 0;
    if(a >= 0){
     var i = c;
     for(;;){
      var b = (lexbuf[12] + pos | 0) + i | 0;
      runtime.caml_bytes_set
       (s, i, to_latin1(caml_check_bound(lexbuf[3], b)[b + 1]));
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    return Stdlib_Bytes[6].call(null, s);
   }
   function lexeme$0(lexbuf){
    return sub_lexeme$0(lexbuf, 0, lexbuf[7] - lexbuf[12] | 0);
   }
   function width(param){
    if(192 <= param){
     if(240 > param) return 224 <= param ? 3 : 2;
     if(248 > param) return 4;
    }
    else if(128 > param) return 1;
    throw caml_maybe_attach_backtrace(MalFormed, 1);
   }
   function check_two(n1, n2){
    var a = n1 < 194 ? 1 : 0, b = a || (223 < n1 ? 1 : 0);
    if(b) throw caml_maybe_attach_backtrace(MalFormed, 1);
    var c = n2 < 128 ? 1 : 0, d = c || (191 < n2 ? 1 : 0);
    if(d) throw caml_maybe_attach_backtrace(MalFormed, 1);
    if(2 !== (n2 >>> 6 | 0)) throw caml_maybe_attach_backtrace(MalFormed, 1);
    return (n1 & 31) << 6 | n2 & 63;
   }
   function check_three(n1, n2, n3){
    if(n1 === 224){
     var b = n2 < 160 ? 1 : 0, c = b || (191 < n2 ? 1 : 0);
     if(c) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var d = n3 < 128 ? 1 : 0, e = d || (191 < n3 ? 1 : 0);
     if(e) throw caml_maybe_attach_backtrace(MalFormed, 1);
    }
    else{
     var i = n1 < 225 ? 1 : 0, j = i || (239 < n1 ? 1 : 0);
     if(j) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var k = n2 < 128 ? 1 : 0, l = k || (191 < n2 ? 1 : 0);
     if(l) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var m = n3 < 128 ? 1 : 0, n = m || (191 < n3 ? 1 : 0);
     if(n) throw caml_maybe_attach_backtrace(MalFormed, 1);
    }
    var
     f = 2 !== (n2 >>> 6 | 0) ? 1 : 0,
     g = f || (2 !== (n3 >>> 6 | 0) ? 1 : 0);
    if(g) throw caml_maybe_attach_backtrace(MalFormed, 1);
    var
     p = (n1 & 15) << 12 | (n2 & 63) << 6 | n3 & 63,
     a = 55296 <= p ? 1 : 0,
     h = a ? p <= 57088 ? 1 : 0 : a;
    if(h) throw caml_maybe_attach_backtrace(MalFormed, 1);
    return p;
   }
   function check_four(n1, n2, n3, n4){
    if(n1 === 240){
     var c = n2 < 144 ? 1 : 0, d = c || (191 < n2 ? 1 : 0);
     if(d) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var e = n3 < 128 ? 1 : 0, f = e || (191 < n3 ? 1 : 0);
     if(f) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var g = n4 < 128 ? 1 : 0, h = g || (191 < n4 ? 1 : 0);
     if(h) throw caml_maybe_attach_backtrace(MalFormed, 1);
    }
    else if(n1 === 244){
     var j = n2 < 128 ? 1 : 0, k = j || (143 < n2 ? 1 : 0);
     if(k) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var l = n3 < 128 ? 1 : 0, m = l || (191 < n3 ? 1 : 0);
     if(m) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var n = n4 < 128 ? 1 : 0, o = n || (191 < n4 ? 1 : 0);
     if(o) throw caml_maybe_attach_backtrace(MalFormed, 1);
    }
    else{
     var p = n1 < 241 ? 1 : 0, q = p || (243 < n1 ? 1 : 0);
     if(q) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var r = n2 < 128 ? 1 : 0, s = r || (191 < n2 ? 1 : 0);
     if(s) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var t = n3 < 128 ? 1 : 0, u = t || (191 < n3 ? 1 : 0);
     if(u) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var v = n4 < 128 ? 1 : 0, w = v || (191 < n4 ? 1 : 0);
     if(w) throw caml_maybe_attach_backtrace(MalFormed, 1);
    }
    var a = 2 !== (n2 >>> 6 | 0) ? 1 : 0;
    if(a)
     var b = a;
    else
     var
      i = 2 !== (n3 >>> 6 | 0) ? 1 : 0,
      b = i || (2 !== (n4 >>> 6 | 0) ? 1 : 0);
    if(b) throw caml_maybe_attach_backtrace(MalFormed, 1);
    return (n1 & 7) << 18 | (n2 & 63) << 12 | (n3 & 63) << 6 | n4 & 63;
   }
   function from_channel$0(ic){
    return make_from_channel
            ([0, utf_8_byte_length],
             ic,
             4,
             1,
             function(can_refill, t){
              var w = width(get(t, 0));
              ensure_bytes_available(t, can_refill, w);
              var
               i = t[4],
               s = Stdlib_Bytes[48].call(null, t[1]),
               c1 = caml_string_get(s, i),
               switcher = width(c1) - 1 | 0;
              if(3 < switcher >>> 0)
               throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
              switch(switcher){
                case 1:
                 var
                  n2 = caml_string_get(s, i + 1 | 0),
                  c = check_two(c1, n2);
                 break;
                case 2:
                 var
                  n2$0 = caml_string_get(s, i + 1 | 0),
                  n3 = caml_string_get(s, i + 2 | 0),
                  c = check_three(c1, n2$0, n3);
                 break;
                case 3:
                 var
                  n2$1 = caml_string_get(s, i + 1 | 0),
                  n3$0 = caml_string_get(s, i + 2 | 0),
                  n4 = caml_string_get(s, i + 3 | 0),
                  c = check_four(c1, n2$1, n3$0, n4);
                 break;
                default: var c = c1;
              }
              advance(t, w);
              return of_int(c);
             });
   }
   function from_gen$1(s){
    function next_or_fail(param){
     var match = Gen[2].call(null, s);
     if(! match) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var x = match[1];
     return x;
    }
    return from_gen
            ([0, utf_8_byte_length],
             function(param){
              var o = Gen[2].call(null, s);
              if(! o) return 0;
              var c1 = o[1], switcher = width(c1) - 1 | 0;
              if(3 < switcher >>> 0)
               throw caml_maybe_attach_backtrace(MalFormed, 1);
              switch(switcher){
                case 0:
                 var a = of_char(c1); break;
                case 1:
                 var n2 = next_or_fail(0), a = of_int(check_two(c1, n2));
                 break;
                case 2:
                 var
                  n2$0 = next_or_fail(0),
                  n3 = next_or_fail(0),
                  a = of_int(check_three(c1, n2$0, n3));
                 break;
                default:
                 var
                  n2$1 = next_or_fail(0),
                  n3$0 = next_or_fail(0),
                  n4 = next_or_fail(0),
                  a = of_int(check_four(c1, n2$1, n3$0, n4));
              }
              return [0, a];
             });
   }
   function from_string$0(s){
    return from_gen$1
            (Gen[12].call
              (null,
               [0, caml_ml_string_length(s)],
               function(i){return caml_string_get(s, i);}));
   }
   function sub_lexeme$1(lexbuf, pos, len){
    var
     buf = Stdlib_Buffer[1].call(null, len * 4 | 0),
     apos = lexbuf[12] + pos | 0,
     a = lexbuf[3],
     b = (apos + len | 0) - 1 | 0;
    if(b >= apos){
     var i = apos;
     for(;;){
      var c = caml_check_bound(a, i)[i + 1];
      Stdlib_Buffer[13].call(null, buf, c);
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return Stdlib_Buffer[2].call(null, buf);
   }
   function lexeme$1(lexbuf){
    return sub_lexeme$1(lexbuf, 0, lexbuf[7] - lexbuf[12] | 0);
   }
   function number_of_pair(bo, c1, c2){
    return bo ? (c1 << 8) + c2 | 0 : (c2 << 8) + c1 | 0;
   }
   function get_bo(bo, c1, c2){
    var match = bo[1];
    if(match){var o = match[1]; return o;}
    a:
    {if(255 === c1 && 254 === c2){var o$0 = 0; break a;} var o$0 = 1;}
    bo[1] = [0, o$0];
    return o$0;
   }
   function from_channel$1(ic, opt_bo){
    var bo = [0, opt_bo];
    return make_from_channel
            ([0, utf_16_byte_length],
             ic,
             4,
             2,
             function(can_refill, t){
              var
               n1 = get(t, 0),
               n2 = get(t, 1),
               o = get_bo(bo, n1, n2),
               w1 = number_of_pair(o, n1, n2);
              if(w1 === 65534)
               throw caml_maybe_attach_backtrace([0, InvalidCodepoint, w1], 1);
              if(55296 <= w1 && 57343 >= w1){
               if(56319 < w1) throw caml_maybe_attach_backtrace(MalFormed, 1);
               ensure_bytes_available(t, can_refill, 4);
               var
                n3 = get(t, 2),
                n4 = get(t, 3),
                w2 = number_of_pair(o, n3, n4),
                a = w2 < 56320 ? 1 : 0,
                b = a || (57343 < w2 ? 1 : 0);
               if(b) throw caml_maybe_attach_backtrace(MalFormed, 1);
               var upper10 = (w1 & 1023) << 10, lower10 = w2 & 1023;
               advance(t, 4);
               return of_int((65536 + upper10 | 0) + lower10 | 0);
              }
              advance(t, 2);
              return of_int(w1);
             });
   }
   function from_gen$2(s, opt_bo){
    function next_or_fail(param){
     var match = Gen[2].call(null, s);
     if(! match) throw caml_maybe_attach_backtrace(MalFormed, 1);
     var x = match[1];
     return x;
    }
    var bo = [0, opt_bo];
    return from_gen
            ([0, utf_16_byte_length],
             function(param){
              var o$0 = Gen[2].call(null, s);
              if(! o$0) return 0;
              var
               c1 = o$0[1],
               n2 = next_or_fail(0),
               o = get_bo(bo, c1, n2),
               w1 = number_of_pair(o, c1, n2);
              if(w1 === 65534)
               throw caml_maybe_attach_backtrace([0, InvalidCodepoint, w1], 1);
              a:
              {
               if(55296 <= w1 && 57343 >= w1){
                if(56319 < w1)
                 throw caml_maybe_attach_backtrace(MalFormed, 1);
                var
                 n3 = next_or_fail(0),
                 n4 = next_or_fail(0),
                 w2 = number_of_pair(o, n3, n4),
                 b = w2 < 56320 ? 1 : 0,
                 c = b || (57343 < w2 ? 1 : 0);
                if(c) throw caml_maybe_attach_backtrace(MalFormed, 1);
                var
                 upper10 = (w1 & 1023) << 10,
                 lower10 = w2 & 1023,
                 a = of_int((65536 + upper10 | 0) + lower10 | 0);
                break a;
               }
               var a = of_int(w1);
              }
              return [0, a];
             });
   }
   function from_string$1(s){
    var
     a =
       Gen[12].call
        (null,
         [0, caml_ml_string_length(s)],
         function(i){return caml_string_get(s, i);});
    return function(b){return from_gen$2(a, b);};
   }
   function sub_lexeme$2(lb, pos, len, bo, bom){
    var
     buf = Stdlib_Buffer[1].call(null, (len * 4 | 0) + 2 | 0),
     apos = lb[12] + pos | 0,
     a = lb[3];
    if(bo)
     var c = Stdlib_Buffer[15], store = function(a){return c(buf, a);};
    else
     var e = Stdlib_Buffer[14], store = function(a){return e(buf, a);};
    if(bom) store(of_int(65279));
    var b = (apos + len | 0) - 1 | 0;
    if(b >= apos){
     var i = apos;
     for(;;){
      store(caml_check_bound(a, i)[i + 1]);
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return Stdlib_Buffer[2].call(null, buf);
   }
   function lexeme$2(lb, bo, bom){
    return sub_lexeme$2(lb, 0, lb[7] - lb[12] | 0, bo, bom);
   }
   var
    Sedlexing =
      [0,
       InvalidCodepoint,
       MalFormed,
       create,
       set_position,
       set_filename,
       from_gen,
       from_int_array,
       from_uchar_array,
       lexeme_start,
       lexeme_bytes_start,
       lexeme_end,
       lexeme_bytes_end,
       loc,
       bytes_loc,
       lexeme_length,
       lexeme_bytes_length,
       lexing_positions,
       lexing_position_start,
       lexing_position_curr,
       lexing_bytes_positions,
       lexing_bytes_position_start,
       lexing_bytes_position_curr,
       new_line,
       lexeme,
       lexeme_char,
       sub_lexeme,
       rollback,
       start,
       next,
       private_next_int,
       mark,
       backtrack,
       with_tokenizer,
       [0,
        from_gen$0,
        from_channel,
        from_string,
        lexeme$0,
        sub_lexeme$0,
        lexeme_char$0],
       [0,
        from_gen$1,
        from_channel$0,
        from_string$0,
        lexeme$1,
        sub_lexeme$1,
        [0, width, check_two, check_three, check_four]],
       [0, from_gen$2, from_channel$1, from_string$1, lexeme$2, sub_lexeme$2]];
   runtime.caml_register_global(20, Sedlexing, "Sedlexing");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
