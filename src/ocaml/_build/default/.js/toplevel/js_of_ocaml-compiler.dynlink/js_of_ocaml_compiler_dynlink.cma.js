// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Js_of_ocaml_compiler_dynlink
//# unitInfo: Requires: Js_of_ocaml_compiler__Config, Js_of_ocaml_compiler__Driver, Js_of_ocaml_compiler__Instr, Js_of_ocaml_compiler__Linker, Js_of_ocaml_compiler__Ocaml_compiler, Js_of_ocaml_compiler__Ocaml_version, Js_of_ocaml_compiler__Pretty_print, Js_of_ocaml_compiler__Primitive, Js_of_ocaml_compiler__Stdlib, Jsoo_runtime, Stdlib, Stdlib__BytesLabels, Stdlib__Format, Stdlib__Sys
//# unitInfo: Force_link: true
//# shape: Js_of_ocaml_compiler_dynlink:[N]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   runtime.jsoo_create_file
    ("/static/cmis/js_of_ocaml_compiler_dynlink.cmi",
     'Caml1999I031\x84\x95\xa6\xbe\0\0\x01\x04\0\0\0/\0\0\0\xb2\0\0\0\xa1\xa0<Js_of_ocaml_compiler_dynlink\xa0\xb0\xa0(eval_ref\x01\x01>\xd0\xc0\xb3\xa1\x90\x92&Stdlib#ref\xa0\xc0\xc1@\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xf9\xc0\xc1@\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xfa\xc0\xb3\xa1\xa1\x90\x92,Jsoo_runtime"Js!t@\x90@\x02\x05\xf5\xe1\0@\0\xfb@\x02\x05\xf5\xe1\0@\0\xfc@\x02\x05\xf5\xe1\0@\0\xfd@\x90@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\t5compiler/lib-dynlink/js_of_ocaml_compiler_dynlink.mliV\x01\x03i\x01\x03i\xc0\x04\x02V\x01\x03i\x01\x03\xa1@@\xa1\x04.@@@\x84\x95\xa6\xbe\0\0\x01\xc2\0\0\0<\0\0\0\xee\0\0\0\xbb\xa0\xa0<Js_of_ocaml_compiler_dynlink\x900\x89\xc6\xcf\x7f\x9d\xbe1U\x9e\x07\xc5\xc0s2\xcf\xdd\xa0\xa0+Stdlib__Obj\x900%yM)\xf7\xf4\x01\x87h\xea\x90\x0e3\x1a+\xf3\xa0\xa0-Stdlib__Int64\x900\x0f\xa5X|G\xba\xf1j\x06\x83|}\xed\xfc%\x18\xa0\xa0-Stdlib__Int32\x900\xa7\x1e\xa5#\x800w\x06G\x16_e\x9f\x80\xb1\xab\xa0\xa0/Stdlib__Complex\x900EU!|u\x9e\x89\xd6]\xaa\x8fh.\xb0\x9b5\xa0\xa00Stdlib__Callback\x900\xfe)\xa5\x98\xe1\x90/\v\x90\x1e\x88\xa9\x86\\&\xef\xa0\xa00Stdlib__Bigarray\x900\x99J\x14\xf1\rZ\xe0\x81f;R\xb7\x90\xee\x11\xd3\xa0\xa0&Stdlib\x900y\xb0\xe9\xd3\xb6\xf7\xfe\xd0~\xb3\xcc*\xbb\x96\x1b\x91\xa0\xa0=Jsoo_runtime__Runtime_version\x900\xe9\x8f\xac\x801\x1e\xac\x8c<\xb6\x93\xe1}n\xc6\xdf\xa0\xa0.Jsoo_runtime__\x900\x15\x9d\x7f\xf3N\xd4\xcaW1\x12\x94\x83\xbcs\xa5\xba\xa0\xa0,Jsoo_runtime\x9002\x1e_\xa9\x8f\xd4\xa9\x82\x9a\f#\x9a\xc4\xe2\xfe\xf8\xa0\xa08CamlinternalFormatBasics\x900\x8f\x8fcEXy\x8e\xe4\b\xdf<P\xa5S\x9b\x15@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@');
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_compiler_Stdlib = global_data.Js_of_ocaml_compiler__Stdlib,
    Js_of_ocaml_compiler_Ocaml_com =
      global_data.Js_of_ocaml_compiler__Ocaml_compiler,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_compiler_Pretty_pr =
      global_data.Js_of_ocaml_compiler__Pretty_print,
    Js_of_ocaml_compiler_Driver = global_data.Js_of_ocaml_compiler__Driver,
    Js_of_ocaml_compiler_Primitive =
      global_data.Js_of_ocaml_compiler__Primitive,
    Js_of_ocaml_compiler_Ocaml_ver =
      global_data.Js_of_ocaml_compiler__Ocaml_version,
    Js_of_ocaml_compiler_Instr = global_data.Js_of_ocaml_compiler__Instr,
    Stdlib_BytesLabels = global_data.Stdlib__BytesLabels,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Js_of_ocaml_compiler_Config = global_data.Js_of_ocaml_compiler__Config,
    Jsoo_runtime = global_data.Jsoo_runtime,
    Js_of_ocaml_compiler_Linker = global_data.Js_of_ocaml_compiler__Linker,
    cst_toplevel_eval_not_initiali = "toplevel: eval not initialized",
    eval_ref =
      [0,
       function(param){
        return Stdlib[2].call(null, cst_toplevel_eval_not_initiali);
       }],
    match = Stdlib_Sys[5];
   a:
   {
    var
     a = [0, 5, [0, 2, 0]],
     cst_Expected_backend_js_of_oca = "Expected backend `js_of_ocaml`",
     cst_use_js_string = "use-js-string";
    if(typeof match !== "number" && match[1] === "js_of_ocaml"){
     Js_of_ocaml_compiler_Config[4].call(null, 500616045);
     break a;
    }
    Stdlib[2].call(null, cst_Expected_backend_js_of_oca);
   }
   var
    aliases = runtime.jsoo_get_runtime_aliases(0),
    global = globalThis,
    b = runtime.caml_jsoo_flags_use_js_string(0);
   caml_call2(Js_of_ocaml_compiler_Config[1][3], cst_use_js_string, b);
   var c = Jsoo_runtime[2][1][1].call(null, 0);
   Js_of_ocaml_compiler_Config[6].call(null, c);
   Js_of_ocaml_compiler_Linker[2].call(null, 0);
   Js_of_ocaml_compiler_Stdlib[24][16].call
    (null,
     function(param){
      var b = param[2], a = param[1];
      return Js_of_ocaml_compiler_Primitive[8].call(null, a, b);
     },
     aliases);
   function toplevel_compile(code, debug){
    var
     c =
       Js_of_ocaml_compiler_Ocaml_ver[2].call
        (null, Js_of_ocaml_compiler_Ocaml_ver[1], a);
    if(Js_of_ocaml_compiler_Stdlib[11].call(null, c, 0))
     var s = code;
    else{
     var
      opcode = Js_of_ocaml_compiler_Instr[1].call(null, 40)[4],
      len = runtime.caml_ml_string_length(code),
      b = runtime.caml_create_bytes(len + 8 | 0);
     Stdlib_BytesLabels[12].call(null, code, 0, b, 0, len);
     Stdlib_BytesLabels[87].call(null, b, len, opcode);
     Stdlib_BytesLabels[87].call(null, b, len + 4 | 0, 1);
     var s = Stdlib_BytesLabels[6].call(null, b);
    }
    var
     d = caml_call1(Js_of_ocaml_compiler_Ocaml_com[3][5], 0),
     prims = Js_of_ocaml_compiler_Stdlib[44][12].call(null, d),
     b$0 = Js_of_ocaml_compiler_Stdlib[33][1].call(null, 100),
     fmt = Js_of_ocaml_compiler_Pretty_pr[11].call(null, b$0);
    Js_of_ocaml_compiler_Driver[8].call(null, fmt);
    Js_of_ocaml_compiler_Driver[4].call(null, prims, debug, s, fmt);
    Stdlib_Format[38].call(null, Stdlib_Format[109], 0);
    Stdlib_Format[38].call(null, Stdlib_Format[110], 0);
    Stdlib[63].call(null, Stdlib[39]);
    Stdlib[63].call(null, Stdlib[40]);
    var js = Js_of_ocaml_compiler_Stdlib[33][2].call(null, b$0);
    return caml_call1(eval_ref[1], js);
   }
   function toplevel_eval(x){
    var f = runtime.caml_js_eval_string(x);
    return function(param){
     var res = f(global);
     Stdlib_Format[38].call(null, Stdlib_Format[109], 0);
     Stdlib_Format[38].call(null, Stdlib_Format[110], 0);
     Stdlib[63].call(null, Stdlib[39]);
     Stdlib[63].call(null, Stdlib[40]);
     return res;};
   }
   var
    toc = runtime.caml_dynlink_get_bytecode_sections(0),
    t = toc[1],
    sym =
      caml_call3
       (Js_of_ocaml_compiler_Ocaml_com[3][2][5],
        function(i, n, acc){
         var a = caml_call1(Js_of_ocaml_compiler_Ocaml_com[3][1][1], i);
         return caml_call3(Js_of_ocaml_compiler_Stdlib[40][4], a, n, acc);
        },
        t,
        Js_of_ocaml_compiler_Stdlib[40][1]);
   function toplevel_reloc(name){
    var
     name$0 = runtime.caml_string_of_jsstring(name),
     match = caml_call2(Js_of_ocaml_compiler_Stdlib[40][29], name$0, sym);
    if(! match)
     return caml_call1(Js_of_ocaml_compiler_Ocaml_com[3][3], name$0);
    var i = match[1];
    return i;
   }
   eval_ref[1] = toplevel_eval;
   runtime.jsoo_toplevel_init_compile(toplevel_compile);
   runtime.jsoo_toplevel_init_reloc(toplevel_reloc);
   var Js_of_ocaml_compiler_dynlink = [0, eval_ref];
   runtime.caml_register_global
    (21, Js_of_ocaml_compiler_dynlink, "Js_of_ocaml_compiler_dynlink");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
