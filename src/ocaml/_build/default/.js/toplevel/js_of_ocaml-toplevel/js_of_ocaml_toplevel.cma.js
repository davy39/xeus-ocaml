// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Js_of_ocaml_toplevel__
//# shape: Js_of_ocaml_toplevel__:[[]]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   runtime.jsoo_create_file
    ("/static/cmis/js_of_ocaml_toplevel__.cmi",
     'Caml1999I031\x84\x95\xa6\xbe\0\0\x01\xf5\0\0\0K\0\0\x01@\0\0\x01!\xa06Js_of_ocaml_toplevel__\xa0\xd3\xa0\'JsooTopHA\xc0\x93\x90\x92=Js_of_ocaml_toplevel__JsooTop@\xb0\xc0\t*toplevel/lib/js_of_ocaml_toplevel__.ml-genD\0H\0H\xc0\x04\x02D\0H\0v@\xa1\x04\x0f@@@\xa0\xd3\xa0,JsooTopErrorIA\xc0\x93\x90\x92\t"Js_of_ocaml_toplevel__JsooTopError@\xb0\xc0\x04\x0eG\x01\0\xac\x01\0\xac\xc0\x04\x0fG\x01\0\xac\x01\0\xe4@\xa1\x04\x1cA@@\xa0\xd3\xa0*JsooTopPpxJA\xc0\x93\x90\x92\t Js_of_ocaml_toplevel__JsooTopPpx@\xb0\xc0\x04\x1bJ\x01\x01\x18\x01\x01\x18\xc0\x04\x1cJ\x01\x01\x18\x01\x01L@\xa1\x04)B@@\xa0\xd3\xa06Js_of_ocaml_toplevel__K@\xc0\x91@\xa0\xb0\xa0*deprecated\xb0\xc0\x04)M\x01\x01y\x01\x01|\xc0\x04*M\x01\x01y\x01\x01\x86@\x90\xa0\xa0\xa0\xc0\x91\xb27this module is shadowed\xb0\xc0\x044M\x01\x01y\x01\x01\x88\xc0\x045M\x01\x01y\x01\x01\x9f@@\xb0\xc0\x047M\x01\x01y\x01\x01\x87\xc0\x048M\x01\x01y\x01\x01\xa0@@@@\x04\x03@\xb0\xc0\x04:M\x01\x01y\x01\x01y\xc0\x04;M\x01\x01y\x01\x01\xa1@@\xb0\xc0\x04=L\x01\x01N\x01\x01N\x04\x03@\xa1\x04JC@@@\x84\x95\xa6\xbe\0\0\0\x99\0\0\0\x0e\0\0\0D\0\0\x003\xa0\xa06Js_of_ocaml_toplevel__\x900\xf6\xe3k\x07SH>\xcbO\x87\xb7g*uU\xb4\xa0\xa0\t Js_of_ocaml_toplevel__JsooTopPpx@\xa0\xa0\t"Js_of_ocaml_toplevel__JsooTopError@\xa0\xa0=Js_of_ocaml_toplevel__JsooTop@@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@');
   var
    Js_of_ocaml_toplevel = [0],
    Js_of_ocaml_toplevel$0 = [0, Js_of_ocaml_toplevel];
   runtime.caml_register_global
    (0, Js_of_ocaml_toplevel$0, "Js_of_ocaml_toplevel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_toplevel__JsooTopPpx
//# unitInfo: Requires: Ast_mapper, Js_of_ocaml_compiler__Stdlib
//# shape: Js_of_ocaml_toplevel__JsooTopPpx:[F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   runtime.jsoo_create_file
    ("/static/cmis/js_of_ocaml_toplevel__JsooTopPpx.cmi",
     'Caml1999I031\x84\x95\xa6\xbe\0\0\x01\xee\0\0\0T\0\0\x01H\0\0\x01+\xa0\t Js_of_ocaml_toplevel__JsooTopPpx\xa0\xb0\xa04preprocess_structure\x01\x01Z\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x92)Parsetree)structure@\x90@\x02\x05\xf5\xe1\0@\0\xf6\xc0\xb3\xa1\x90\x92)Parsetree)structure@\x90@\x02\x05\xf5\xe1\0@\0\xf7@\x02\x05\xf5\xe1\0@\0\xf8@\xb0\xc0;toplevel/lib/jsooTopPpx.mli]\x01\x04D\x01\x04D\xc0\x04\x02]\x01\x04D\x01\x04\x89@@\xa1\x04\x1d@@\xa0\xb0\xa04preprocess_signature\x01\x01[\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x92)Parsetree)signature@\x90@\x02\x05\xf5\xe1\0@\0\xf9\xc0\xb3\xa1\x90\x92)Parsetree)signature@\x90@\x02\x05\xf5\xe1\0@\0\xfa@\x02\x05\xf5\xe1\0@\0\xfb@\xb0\xc0\x04\x1c_\x01\x04\x8b\x01\x04\x8b\xc0\x04\x1d_\x01\x04\x8b\x01\x04\xd0@@\xa1\x048A@\xa0\xb0\xa01preprocess_phrase\x01\x01\\\xd0\xc0\xc1@\xc0\xb3\xa1\x90\x92)Parsetree/toplevel_phrase@\x90@\x02\x05\xf5\xe1\0@\0\xfc\xc0\xb3\xa1\x90\x92)Parsetree/toplevel_phrase@\x90@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x047a\x01\x04\xd2\x01\x04\xd2\xc0\x048a\x01\x04\xd2\x01\x05 @@\xa1\x04SB@@\x84\x95\xa6\xbe\0\0\x02Q\0\0\0U\0\0\x01F\0\0\x01\x05\xa0\xa0\t Js_of_ocaml_toplevel__JsooTopPpx\x900\xd4\xe6C\xbd9k|)*\xbc\xf9\xbeKA\x1bN\xa0\xa0(Warnings\x900\x1c\x10\xe6\0z\xcad\xcd\xa6\x9bk\x05Ue\xb1$\xa0\xa0-Stdlib__Uchar\x900\xc0\xdd\xe0*Ujmy\xe3c\xad6]\x16]W\xa0\xa0+Stdlib__Seq\x900\xb65\x11\x03"\x11\xea\xe4\xb5g\xba1<\xd7)b\xa0\xa0.Stdlib__Lexing\x900\xc91\x8c\'j\xc7\xe3\x83\xfdh,-\xd0k\xe44\xa0\xa0,Stdlib__Lazy\x900\x01C\r4\f\x02\x83"\xc7$p1\xa8t\xe3U\xa0\xa0.Stdlib__Format\x900\xb6\xed\xb9{hX\x19\xe8sH\x1f\xe0W#\xc8\xbc\xa0\xa0.Stdlib__Either\x900&\x84]\xf2\x8d\x19XF\x87\xa3\x8a\x1a\xb8\x14\xc3\xf9\xa0\xa0.Stdlib__Buffer\x900K\t\xc9\xa6\xd0b+\xbfZ8)#KH\x18"\xa0\xa0&Stdlib\x900y\xb0\xe9\xd3\xb6\xf7\xfe\xd0~\xb3\xcc*\xbb\x96\x1b\x91\xa0\xa0)Parsetree\x900\xd1`\xa7\x03\xcc\x0f\xe2\xb0\xa7\xac\xd9\x7fk\xf2RE\xa0\xa0)Longident\x900\xdd\xdb\xcb,x\xe8e\xfdu\xe9\x91\x1cK\x82\xa7\xe2\xa0\xa0(Location\x900\xad\x05\xa1\x1cSP\xa8\x04=\x12\xb4\x81\x95u\xb0;\xa0\xa06Js_of_ocaml_toplevel__\x900\xf6\xe3k\x07SH>\xcbO\x87\xb7g*uU\xb4\xa0\xa00CamlinternalLazy\x900Se\xfe\xc4\xa5\x8d\xa3\xe2\xd8\xfa!\x86\xf7}\x9b\xe4\xa0\xa08CamlinternalFormatBasics\x900\x8f\x8fcEXy\x8e\xe4\b\xdf<P\xa5S\x9b\x15\xa0\xa0(Asttypes\x900\xc6\xcb\xda\x07\'\xab$\xf2O\xf7~\x01\x99\x81\x897@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@');
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_compiler_Stdlib = global_data.Js_of_ocaml_compiler__Stdlib,
    Ast_mapper = global_data.Ast_mapper,
    ppx_rewriters = [0, 0];
   Ast_mapper[5][1] =
    function(param, f){ppx_rewriters[1] = [0, f, ppx_rewriters[1]]; return 0;};
   function preprocess_structure(str){
    return Js_of_ocaml_compiler_Stdlib[24][24].call
            (null,
             function(ppx_rewriter, str){
              var mapper = caml_call1(ppx_rewriter, 0);
              return caml_call2(mapper[36], mapper, str);
             },
             ppx_rewriters[1],
             str);
   }
   function preprocess_signature(str){
    return Js_of_ocaml_compiler_Stdlib[24][24].call
            (null,
             function(ppx_rewriter, str){
              var mapper = caml_call1(ppx_rewriter, 0);
              return caml_call2(mapper[34], mapper, str);
             },
             ppx_rewriters[1],
             str);
   }
   function preprocess_phrase(phrase){
    if(0 !== phrase[0]) return phrase;
    var str = phrase[1];
    return [0, preprocess_structure(str)];
   }
   var
    Js_of_ocaml_toplevel_JsooTopPp =
      [0, preprocess_structure, preprocess_signature, preprocess_phrase];
   runtime.caml_register_global
    (2, Js_of_ocaml_toplevel_JsooTopPp, "Js_of_ocaml_toplevel__JsooTopPpx");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_toplevel__JsooTopError
//# unitInfo: Requires: Lexer, Syntaxerr, Translclass, Translcore, Translmod, Typeclass, Typecore, Typedecl, Typemod, Typetexp
//# shape: Js_of_ocaml_toplevel__JsooTopError:[F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   runtime.jsoo_create_file
    ("/static/cmis/js_of_ocaml_toplevel__JsooTopError.cmi",
     'Caml1999I031\x84\x95\xa6\xbe\0\0\0\xbd\0\0\0#\0\0\0\x83\0\0\0y\xa0\t"Js_of_ocaml_toplevel__JsooTopError\xa0\xb0\xa0#loc\x01\x01M\xd0\xc0\xc1@\xc0\xb3\x90\xa3#exnG@\x90@\x02\x05\xf5\xe1\0@\0\xfb\xc0\xb3\x90\xa3&optionJ\xa0\xc0\xb3\xa1\x90\x92(Location!t@\x90@\x02\x05\xf5\xe1\0@\0\xfc@\x90@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0=toplevel/lib/jsooTopError.mliT\x01\x03b\x01\x03b\xc0\x04\x02T\x01\x03b\x01\x03\x84@@\xa1\x04"@@@\x84\x95\xa6\xbe\0\0\x01\xfa\0\0\0F\0\0\x01\x10\0\0\0\xd8\xa0\xa0\t"Js_of_ocaml_toplevel__JsooTopError\x900q\xc9bM\x92n\xcd\xc5\'XO\xc6\xaf\x01\x18\xe3\xa0\xa0(Warnings\x900\x1c\x10\xe6\0z\xcad\xcd\xa6\x9bk\x05Ue\xb1$\xa0\xa0-Stdlib__Uchar\x900\xc0\xdd\xe0*Ujmy\xe3c\xad6]\x16]W\xa0\xa0+Stdlib__Seq\x900\xb65\x11\x03"\x11\xea\xe4\xb5g\xba1<\xd7)b\xa0\xa0.Stdlib__Lexing\x900\xc91\x8c\'j\xc7\xe3\x83\xfdh,-\xd0k\xe44\xa0\xa0,Stdlib__Lazy\x900\x01C\r4\f\x02\x83"\xc7$p1\xa8t\xe3U\xa0\xa0.Stdlib__Format\x900\xb6\xed\xb9{hX\x19\xe8sH\x1f\xe0W#\xc8\xbc\xa0\xa0.Stdlib__Either\x900&\x84]\xf2\x8d\x19XF\x87\xa3\x8a\x1a\xb8\x14\xc3\xf9\xa0\xa0.Stdlib__Buffer\x900K\t\xc9\xa6\xd0b+\xbfZ8)#KH\x18"\xa0\xa0&Stdlib\x900y\xb0\xe9\xd3\xb6\xf7\xfe\xd0~\xb3\xcc*\xbb\x96\x1b\x91\xa0\xa0(Location\x900\xad\x05\xa1\x1cSP\xa8\x04=\x12\xb4\x81\x95u\xb0;\xa0\xa06Js_of_ocaml_toplevel__\x900\xf6\xe3k\x07SH>\xcbO\x87\xb7g*uU\xb4\xa0\xa00CamlinternalLazy\x900Se\xfe\xc4\xa5\x8d\xa3\xe2\xd8\xfa!\x86\xf7}\x9b\xe4\xa0\xa08CamlinternalFormatBasics\x900\x8f\x8fcEXy\x8e\xe4\b\xdf<P\xa5S\x9b\x15@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@');
   var
    global_data = runtime.caml_get_global_data(),
    Syntaxerr = global_data.Syntaxerr,
    Lexer = global_data.Lexer,
    Typecore = global_data.Typecore,
    Typetexp = global_data.Typetexp,
    Typeclass = global_data.Typeclass,
    Typemod = global_data.Typemod,
    Typedecl = global_data.Typedecl,
    Translcore = global_data.Translcore,
    Translclass = global_data.Translclass,
    Translmod = global_data.Translmod;
   function loc(param){
    var tag = param[1];
    if(tag === Syntaxerr[1]){
     var x = param[2];
     return [0, Syntaxerr[3].call(null, x)];
    }
    if(param[1] === Lexer[4])
     var loc = param[3];
    else if
     (param[1] === Typecore[23]
      ||
       param[1] === Typetexp[15]
       ||
        param[1] === Typeclass[5]
        ||
         param[1] === Typemod[15]
         ||
          param[1] === Typedecl[12]
          || param[1] === Translcore[7] || param[1] === Translclass[2])
     var loc = param[2];
    else{
     var tag$0 = param[1];
     if(tag$0 !== Translmod[12]) return 0;
     var loc = param[2];
    }
    return [0, loc];
   }
   var Js_of_ocaml_toplevel_JsooTopEr = [0, loc];
   runtime.caml_register_global
    (10, Js_of_ocaml_toplevel_JsooTopEr, "Js_of_ocaml_toplevel__JsooTopError");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_toplevel__JsooTop
//# unitInfo: Requires: CamlinternalLazy, Errors, Js_of_ocaml_compiler__Config, Js_of_ocaml_compiler__Debug, Js_of_ocaml_compiler__Stdlib, Js_of_ocaml_toplevel__JsooTopError, Js_of_ocaml_toplevel__JsooTopPpx, Stdlib, Stdlib__BytesLabels, Stdlib__Format, Stdlib__Sys, Topdirs, Toploop
//# shape: Js_of_ocaml_toplevel__JsooTop:[F(2),F(5),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_js_of_ocaml = "js_of_ocaml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   runtime.jsoo_create_file
    ("/static/cmis/js_of_ocaml_toplevel__JsooTop.cmi",
     "Caml1999I031\x84\x95\xa6\xbe\0\0\x02x\0\0\0\x83\0\0\x01\xe6\0\0\x01\xd0\xa0=Js_of_ocaml_toplevel__JsooTop\xa0\xb0\xa0#use\x01\x01\xf2\xd0\xc0\xc1@\xc0\xb3\xa1\xa1\x90\x92&Stdlib&Format)formatter@\x90@\x02\x05\xf5\xe1\0@\0\xe8\xc0\xc1@\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xe9\xc0\xb3\x90\xa3$boolE@\x90@\x02\x05\xf5\xe1\0@\0\xea@\x02\x05\xf5\xe1\0@\0\xeb@\x02\x05\xf5\xe1\0@\0\xec@\xb0\xc08toplevel/lib/jsooTop.mliW\x01\x03\x97\x01\x03\x97\xc0\x04\x02W\x01\x03\x97\x01\x03\xbc@@\xa1\x04%@@\xa0\xb0\xa0'execute\x01\x01\xf3\xd0\xc0\xc1@\xc0\xb3\x90\x04\x12@\x90@\x02\x05\xf5\xe1\0@\0\xed\xc0\xc1\x91'pp_code\xc0\xb3\x90\xa3&optionJ\xa0\xc0\xb3\xa1\xa1\x042\x04/)formatter@\x90@\x02\x05\xf5\xe1\0@\0\xee@\x90@\x02\x05\xf5\xe1\0@\0\xef\xc0\xc1\x912highlight_location\xc0\xb3\x04\x11\xa0\xc0\xc1@\xc0\xb3\xa1\x90\x92(Location!t@\x90@\x02\x05\xf5\xe1\0@\0\xf0\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xf1@\x02\x05\xf5\xe1\0@\0\xf2@\x90@\x02\x05\xf5\xe1\0@\0\xf3\xc0\xc1@\xc0\xb3\xa1\xa1\x04S\x04P)formatter@\x90@\x02\x05\xf5\xe1\0@\0\xf4\xc0\xc1@\xc0\xb3\x90\x04O@\x90@\x02\x05\xf5\xe1\0@\0\xf5\xc0\xb3\x90\x04\x15@\x90@\x02\x05\xf5\xe1\0@\0\xf6@\x02\x05\xf5\xe1\0@\0\xf7@\x02\x05\xf5\xe1\0@\0\xf8@\x02\x05\xf5\xe1\0@\0\xf9@\x02\x05\xf5\xe1\0@\0\xfa@\x02\x05\xf5\xe1\0@\0\xfb@\xb0\xc0\x04KZ\x01\x04\x17\x01\x04\x17\xc0\x04L`\x01\x04\x90\x01\x04\x99@@\xa1\x04oA@\xa0\xb0\xa0*initialize\x01\x01\xf4\xd0\xc0\xc1@\xc0\xb3\x90\x04$@\x90@\x02\x05\xf5\xe1\0@\0\xfc\xc0\xb3\x90\x04(@\x90@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x04^e\x01\x05j\x01\x05j\xc0\x04_e\x01\x05j\x01\x05\x87@@\xa1\x04\x82B@@\x84\x95\xa6\xbe\0\0\x01\xf4\0\0\0F\0\0\x01\x0f\0\0\0\xd7\xa0\xa0=Js_of_ocaml_toplevel__JsooTop\x900\t\xcd3D\x02.\xd9l\xcc\x99\xcdO\xcb\x1b\xc5\x82\xa0\xa0(Warnings\x900\x1c\x10\xe6\0z\xcad\xcd\xa6\x9bk\x05Ue\xb1$\xa0\xa0-Stdlib__Uchar\x900\xc0\xdd\xe0*Ujmy\xe3c\xad6]\x16]W\xa0\xa0+Stdlib__Seq\x900\xb65\x11\x03\"\x11\xea\xe4\xb5g\xba1<\xd7)b\xa0\xa0.Stdlib__Lexing\x900\xc91\x8c'j\xc7\xe3\x83\xfdh,-\xd0k\xe44\xa0\xa0,Stdlib__Lazy\x900\x01C\r4\f\x02\x83\"\xc7$p1\xa8t\xe3U\xa0\xa0.Stdlib__Format\x900\xb6\xed\xb9{hX\x19\xe8sH\x1f\xe0W#\xc8\xbc\xa0\xa0.Stdlib__Either\x900&\x84]\xf2\x8d\x19XF\x87\xa3\x8a\x1a\xb8\x14\xc3\xf9\xa0\xa0.Stdlib__Buffer\x900K\t\xc9\xa6\xd0b+\xbfZ8)#KH\x18\"\xa0\xa0&Stdlib\x900y\xb0\xe9\xd3\xb6\xf7\xfe\xd0~\xb3\xcc*\xbb\x96\x1b\x91\xa0\xa0(Location\x900\xad\x05\xa1\x1cSP\xa8\x04=\x12\xb4\x81\x95u\xb0;\xa0\xa06Js_of_ocaml_toplevel__\x900\xf6\xe3k\x07SH>\xcbO\x87\xb7g*uU\xb4\xa0\xa00CamlinternalLazy\x900Se\xfe\xc4\xa5\x8d\xa3\xe2\xd8\xfa!\x86\xf7}\x9b\xe4\xa0\xa08CamlinternalFormatBasics\x900\x8f\x8fcEXy\x8e\xe4\b\xdf<P\xa5S\x9b\x15@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Sys = global_data.Stdlib__Sys,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Toploop = global_data.Toploop,
    Js_of_ocaml_compiler_Stdlib = global_data.Js_of_ocaml_compiler__Stdlib,
    Js_of_ocaml_toplevel_JsooTopPp =
      global_data.Js_of_ocaml_toplevel__JsooTopPpx,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_toplevel_JsooTopEr =
      global_data.Js_of_ocaml_toplevel__JsooTopError,
    Stdlib_Format = global_data.Stdlib__Format,
    Errors = global_data.Errors,
    Stdlib_BytesLabels = global_data.Stdlib__BytesLabels,
    Topdirs = global_data.Topdirs,
    Js_of_ocaml_compiler_Config = global_data.Js_of_ocaml_compiler__Config,
    Js_of_ocaml_compiler_Debug = global_data.Js_of_ocaml_compiler__Debug,
    cst_static_cmis = "/static/cmis",
    a = [0, cst_js_of_ocaml, "Enable the given flag"],
    cst_enable = "enable",
    b = [0, cst_js_of_ocaml, "Disable the given flag"],
    cst_disable = "disable",
    c = [0, cst_js_of_ocaml, "Enable debug for the given section"],
    cst_debug_on = "debug_on",
    d = [0, cst_js_of_ocaml, "Disable debug for the given section"],
    cst_debug_off = "debug_off",
    e =
      [0,
       cst_js_of_ocaml,
       "Set the depth of tail calls before going through a trampoline"],
    cst_tc = "tc",
    cst_tailcall = "tailcall",
    setup =
      [246,
       function(param){
        Topdirs[2].call(null, cst_static_cmis);
        Toploop[7].call
         (null, cst_enable, [1, Js_of_ocaml_compiler_Config[1][30]], a);
        Toploop[7].call
         (null, cst_disable, [1, Js_of_ocaml_compiler_Config[1][31]], b);
        Toploop[7].call
         (null, cst_debug_on, [1, Js_of_ocaml_compiler_Debug[3]], c);
        Toploop[7].call
         (null, cst_debug_off, [1, Js_of_ocaml_compiler_Debug[4]], d);
        var f = [1, caml_call1(Js_of_ocaml_compiler_Config[2][1], cst_tc)];
        return Toploop[7].call(null, cst_tailcall, f, e);
       }],
    f = [0, [2, 0, 0], "%s"],
    cst_toplevel = "//toplevel//";
   function use(ffp, content){
    return Toploop[20].call(null, ffp, [1, content]);
   }
   function execute(printval, pp_code, highlight_location, pp_answer, s){
    var
     p = [0, 0],
     lb =
       Js_of_ocaml_compiler_Stdlib[55][4].call
        (null,
         0,
         function(buffer, len$2){
          if
           (Js_of_ocaml_compiler_Stdlib[14].call
             (null, p[1], caml_ml_string_length(s)))
           return 0;
          try{
           var
            b = p[1],
            nl$0 = 0,
            c =
              (Js_of_ocaml_compiler_Stdlib[34][31].call(null, s, p[1], 10) - b
              | 0)
              + 1
              | 0,
            nl = nl$0,
            len$0 = c;
          }
          catch(exn){
           var len = caml_ml_string_length(s) - p[1] | 0, nl = 1, len$0 = len;
          }
          var
           len$1 = Js_of_ocaml_compiler_Stdlib[20].call(null, len$2, len$0);
          Js_of_ocaml_compiler_Stdlib[34][46].call
           (null, s, p[1], buffer, 0, len$1);
          if(pp_code){
           var
            ppf = pp_code[1],
            a = Stdlib_BytesLabels[8].call(null, buffer, 0, len$1);
           caml_call1(Stdlib_Format[129].call(null, ppf)(f), a);
           if(nl) Stdlib_Format[40].call(null, ppf, 0);
           Stdlib_Format[38].call(null, ppf, 0);
          }
          p[1] = p[1] + len$1 | 0;
          return len$1;
         });
    try{
     for(;;)
      try{
       var
        phr = caml_call1(Toploop[37][1], lb),
        phr$0 = Js_of_ocaml_toplevel_JsooTopPp[3].call(null, phr);
       Toploop[16].call(null, printval, pp_answer, phr$0);
      }
      catch(x$0){
       var x = caml_wrap_exception(x$0);
       if(x === Stdlib[12]) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
       if(highlight_location){
        var
         f$0 = highlight_location[1],
         match = Js_of_ocaml_toplevel_JsooTopEr[1].call(null, x);
        if(match){var loc = match[1]; caml_call1(f$0, loc);}
       }
       Errors[1].call(null, Stdlib_Format[110], x);
      }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return Stdlib[64].call(null, 0);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function initialize(param){
    Stdlib_Sys[3][1] = 0;
    var a = runtime.caml_obj_tag(setup);
    if(250 !== a && 246 === a) CamlinternalLazy[2].call(null, setup);
    Toploop[14].call(null, 0);
    Toploop[42][1] = cst_toplevel;
    Stdlib_Sys[3][1] = 1;
    return 0;
   }
   var Js_of_ocaml_toplevel_JsooTop = [0, use, execute, initialize];
   runtime.caml_register_global
    (27, Js_of_ocaml_toplevel_JsooTop, "Js_of_ocaml_toplevel__JsooTop");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Js_of_ocaml_toplevel
//# shape: Js_of_ocaml_toplevel:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   runtime.jsoo_create_file
    ("/static/cmis/js_of_ocaml_toplevel.cmi",
     "Caml1999I031\x84\x95\xa6\xbe\0\0\0\x8b\0\0\0\x12\0\0\0M\0\0\0@\xa04Js_of_ocaml_toplevel\xa0\xd3\xa0'JsooTop\x01\x01\x10A\xc0\x93\xa1\x90\x926Js_of_ocaml_toplevel__'JsooTop@\xb0\xc0\t$toplevel/lib/js_of_ocaml_toplevel.mlT\x01\x03b\x01\x03b\xc0\x04\x02T\x01\x03b\x01\x03z@\xa1\x04\x11@@@@\x84\x95\xa6\xbe\0\0\0\x9d\0\0\0\x14\0\0\0Q\0\0\0?\xa0\xa04Js_of_ocaml_toplevel\x900\x07\x7f\xee\xbch\x9bq\xe1j\x1b\xacP:\x86\x95\xac\xa0\xa0&Stdlib\x900y\xb0\xe9\xd3\xb6\xf7\xfe\xd0~\xb3\xcc*\xbb\x96\x1b\x91\xa0\xa06Js_of_ocaml_toplevel__\x900\xf6\xe3k\x07SH>\xcbO\x87\xb7g*uU\xb4\xa0\xa08CamlinternalFormatBasics\x900\x8f\x8fcEXy\x8e\xe4\b\xdf<P\xa5S\x9b\x15@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var Js_of_ocaml_toplevel = [0];
   runtime.caml_register_global
    (0, Js_of_ocaml_toplevel, "Js_of_ocaml_toplevel");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
