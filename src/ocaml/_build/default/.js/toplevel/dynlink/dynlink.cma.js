// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=cma, use-js-string=true, version=6.2.0

//# unitInfo: Provides: Dynlink_compilerlibs, Dynlink_compilerlibs.Arg_helper, Dynlink_compilerlibs.Ast_helper, Dynlink_compilerlibs.Ast_mapper, Dynlink_compilerlibs.Asttypes, Dynlink_compilerlibs.Attr_helper, Dynlink_compilerlibs.Binutils, Dynlink_compilerlibs.Btype, Dynlink_compilerlibs.Build_path_prefix_map, Dynlink_compilerlibs.Builtin_attributes, Dynlink_compilerlibs.Bytesections, Dynlink_compilerlibs.Clflags, Dynlink_compilerlibs.Cmi_format, Dynlink_compilerlibs.Cmo_format, Dynlink_compilerlibs.Cmxs_format, Dynlink_compilerlibs.Config, Dynlink_compilerlibs.Consistbl, Dynlink_compilerlibs.Datarepr, Dynlink_compilerlibs.Debuginfo, Dynlink_compilerlibs.Dll, Dynlink_compilerlibs.Docstrings, Dynlink_compilerlibs.Env, Dynlink_compilerlibs.Ident, Dynlink_compilerlibs.Identifiable, Dynlink_compilerlibs.Instruct, Dynlink_compilerlibs.Int_replace_polymorphic_compare, Dynlink_compilerlibs.Lambda, Dynlink_compilerlibs.Lazy_backtrack, Dynlink_compilerlibs.Load_path, Dynlink_compilerlibs.Local_store, Dynlink_compilerlibs.Location, Dynlink_compilerlibs.Longident, Dynlink_compilerlibs.Meta, Dynlink_compilerlibs.Misc, Dynlink_compilerlibs.Numbers, Dynlink_compilerlibs.Opcodes, Dynlink_compilerlibs.Outcometree, Dynlink_compilerlibs.Parsetree, Dynlink_compilerlibs.Path, Dynlink_compilerlibs.Persistent_env, Dynlink_compilerlibs.Predef, Dynlink_compilerlibs.Primitive, Dynlink_compilerlibs.Profile, Dynlink_compilerlibs.Runtimedef, Dynlink_compilerlibs.Shape, Dynlink_compilerlibs.Subst, Dynlink_compilerlibs.Symtable, Dynlink_compilerlibs.Syntaxerr, Dynlink_compilerlibs.Terminfo, Dynlink_compilerlibs.Type_immediacy, Dynlink_compilerlibs.Types, Dynlink_compilerlibs.Warnings
//# unitInfo: Requires: Assert_failure, CamlinternalLazy, Stdlib, Stdlib__Arg, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Digest, Stdlib__Filename, Stdlib__Float, Stdlib__Format, Stdlib__Fun, Stdlib__Gc, Stdlib__Hashtbl, Stdlib__Int, Stdlib__Int32, Stdlib__Int64, Stdlib__Lexing, Stdlib__List, Stdlib__Map, Stdlib__Nativeint, Stdlib__Obj, Stdlib__Option, Stdlib__Parsing, Stdlib__Printexc, Stdlib__Printf, Stdlib__Seq, Stdlib__Set, Stdlib__String, Stdlib__Sys
//# shape: Dynlink_compilerlibs:[[F(1),F(1),F(2),F(2)],N,[F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2)],[F(1),F(1),N,F(3),F(2),F(3),F(2),F(3),F(2),F(2),F(1),F(2),N,F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(3),F(1),F(3),F(2),F(1),F(2)*,F(2)*,F(2)*,F(2),F(2)*,N,F(1),F(3),F(3),F(1),F(1),F(3),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,[F(1),F(1),F(2),F(3),F(5),F(5),F(4),F(3),F(2)],F(3),F(2),F(2),F(2),F(1)*,N,[N],F(1),F(1),F(4),F(1),F(1),F(1),F(1),F(4),N],[F(2)*,F(1)*],[[N,N,N,N,N,N,N,N,N,F(1),F(1)*],[N,N,F(1),F(1)*],N,[N,N,N,N,N,N,N,N,N]],[F(1)*],[N,N,N,N,N,N,F(2),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1)*,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(1)*,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(2),N,N,N,N,N,N,N,N,N,N,N,F(1)*,F(2),F(1),N,F(2),F(1),F(1),F(1)],[F(1),F(3),F(4),F(2),N,N,N,N,N],[F(1)*],[F(1),F(1),F(2),F(2),F(2)],[F(2),F(1),F(1),F(1),F(1),N,N,F(1),F(1),N,F(1),F(1),F(1),F(1)*,F(1),F(2),F(1)*,N],[F(1),F(2),F(1),F(2),F(1),F(1)*],[F(1),F(1),F(1),F(1),F(1),F(1),F(1),N,F(1),F(1),F(1),F(1)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*],[F(2),F(1)*,F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(3),F(1)],[N,F(1)*,F(1)*,F(2),F(1)*,F(1),F(1),F(1),F(2),F(1)*,F(1)*,F(2)*,N,N,N,F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(3),F(2),N,F(1)*,F(1),F(2),N,F(1),F(2),N,F(2),N,F(3),F(2),F(2),N,F(2),F(3),F(2),F(4),F(5),F(3)*,F(2)*->F(1),F(4)*,F(2)*,F(1),F(1),N,N,F(2)*->F(1),F(2)],[F(1),F(1),F(1),F(1)],[F(1),F(1),F(2)*,F(1),F(1)*,F(1)*,F(2),F(2),F(2),F(2),F(2),N,F(1)*,F(2),F(1),F(1),F(2),F(2),F(1),F(2),N,F(1)*,F(2),F(1),F(1),N,N,F(1)*,F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),N],[N,N,F(1)*,F(2)],[N,F(2),N,[F(3)*],[F(3)*,F(2),F(3)*,F(3)*,F(5)*,F(3)*,F(4)*,F(4)*,F(4)*,F(4)*,F(5)*,F(4)*,F(4)*,F(3)*,F(1)*,F(2)],[F(3)*,F(2),F(3)*,F(3)*,F(4)*,F(3)*,F(4)*,F(3)*,F(4)*,F(4)*,F(4)*,F(3)*,F(4)*,F(4)*,F(3)*,F(3)*,F(3)*,F(4)*,F(3)*,F(3)*],N,[F(6)],[F(10),F(7),F(6)],[F(7),F(4),F(6),F(8),F(6)],[F(3)*,F(2),F(3)*,F(3)*,F(3)*,F(4)*,F(4)*,F(3)*,F(3)*],[F(3)*,F(2),F(3)*,F(3)*,F(4)*,F(4)*,F(4)*,F(3)*,F(3)*],[F(2)*,F(2)*,F(3)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(3)*,F(2)*,F(1)],[F(2)*,F(3)*,F(3)*,F(2)*,F(3)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(3)*,F(2)*,F(1)],[F(6)],[F(6)],[F(6)],[F(6)],[F(5)],[F(4)],[F(6)],[F(3)*,F(2),F(4)*,F(3)*,F(5)*,F(3)*,F(4)*],N,[F(3)*,F(2),F(4)*,F(3)*,F(6)*,F(4)*,F(5)*,F(4)*,F(3)*,F(4)*],N,[F(8)],[F(2)*],[F(2)*],[F(3)*,F(5)*,F(2)*],[F(3)*,F(4)*,F(2)*]],[N,F(1)*,F(3),F(1),N,F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(1)],[F(2),F(2),N,F(2)],[F(3),F(6),F(1),F(1),F(1),F(3),F(6),F(1),F(1),F(1)*->F(1),F(3),F(1),F(1),F(1),F(1),F(1),F(1)],[N,F(2)*,N,N,N,N,N,N,F(2),F(2),F(1),F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,N,F(1)*,F(1)*,F(1)*,N,N,F(1),N,F(3),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(1)*->F(1)],[F(2),F(2),F(2),F(2),F(1),F(1),F(2),F(1),F(2),F(1),F(1),F(1),F(1),F(1),N,N],[F(3),F(5),F(3),F(2),F(1)*,F(1)*,F(2)*,F(2)*,F(1),N],[[],F(2)*,F(1)],[N,[F(1)*,F(1)*],N,F(1),N,F(2),F(2)*,F(3)*,F(3)*,F(2)*,F(3),F(1)*,F(1)*,F(1),N,[N,F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3)],N,F(2)*->F(1),F(2)*,F(1)*,F(1)],[F(1),N,F(1)*,F(1),N,N,F(1)*,F(1),F(1),F(1),F(1),F(1),N,F(4)*,F(3),F(2),N,F(2),F(2),F(5)*,F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(1),F(1),F(1)*,N,F(4),F(1)*,F(2),F(2),F(4),N,N,N,N,N,N,F(1)*,F(2),F(2),F(1),F(1)*,F(1),F(2),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1)],[[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(1),F(1),F(1),F(1)],N,[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(1),F(1),F(1)],[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1)->F(1),F(1)->F(1),F(1)],N,N,F(1),F(2),F(1),F(1),F(1),F(1),N,F(1),F(1),F(1),F(2)*,F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(3),F(2),F(3),F(2),F(2),F(2),F(2),N,N,F(3),F(5),[F(3),F(1)],N,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(3),F(1),F(5),F(2),F(1),F(1),F(1)*,F(1)*,F(1)*,F(2),F(1),F(1),F(1),F(1),F(3),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),N,F(1)],[N,F(3),F(3),F(4),F(3),F(3),F(3),F(3),F(1)*,F(1),F(2)*,F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(3),F(3),F(3),F(2),N,[F(1),F(1),F(1),F(1)*,F(1)*,F(1),F(3),F(3),F(3),F(3),F(3),F(1),F(1),F(1),F(1),F(1),F(1)]],[N,N,N,N,N,N,N,N,F(1),F(1),F(1),N,N,N,F(1),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(3),N,N,N,N],[F(3),F(2),F(3),N,F(2),F(2)],[F(3),F(1),F(1),N,F(2)],[N,N,F(1)*->F(1),[N],F(1),F(1),F(1),F(3),F(4),F(3),F(2),F(4),F(2),F(2),F(2),F(2),F(4),F(3),F(1)*,F(2),F(3),F(3),F(1),F(3),N],[F(2),F(1)*,N,N,N,F(2),F(1)*->F(2),F(1),F(2)*,F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2)*,F(2),F(2),F(3),F(3),F(3),F(2),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(3),F(4),F(4),F(4),F(4),F(4),F(4),F(5),F(4),F(4)*->F(1),F(5),F(5),F(4)*->F(1),F(5),F(5),F(4),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1)->F(1)*,F(1)*->F(3),F(1)*->F(3),F(1)*->F(4),F(6),F(5),F(7),F(5),F(3),F(4),F(3),F(3),F(3),F(2),F(1),F(2),F(2),F(6),F(2),F(2),F(4),F(4),F(5),F(6),F(7),F(4),F(4),F(4),F(4),F(5),F(3),F(3),F(1),F(1),F(1),F(1)*,F(2),F(4),F(5),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(2),N,F(2),F(4),F(2)*,F(1)*,F(2),F(2),N,N,N,N,N,N,N,F(1)*->F(3),F(1)*->F(3),F(1)*->F(3),F(1)*->F(3),F(4),F(1)*->F(3),F(1)*->F(3),F(1)*->F(3),F(2),F(2),F(2)],[N,N,F(1)*,F(1),F(1),F(1)*,F(2),F(2),F(1),F(2)],[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(1),N,F(1)*,N,F(3),F(2),F(6),F(2),F(3),F(2),F(1),F(3),F(3),F(3),F(3),F(2),F(4),F(2),F(1),F(1)*->F(1),F(2),F(4)*,F(4)*,F(1)*,F(1)*,F(1)*,F(1)*,N,N,F(1)*,F(3),F(1)*,F(1),N,F(1),F(2),F(1)*,F(2)*,F(1)],[N,N],[N,N],[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N],[F(1),F(2),F(1),F(1),N,F(1),F(2),F(2),F(2),F(1),F(1)],[F(1),F(2),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(1)],[],[F(1),F(2),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1),F(1),F(1),F(1),N,F(1)*,F(1),F(1),F(2),F(2),F(2),N,F(2),F(1)],[],[],[],[],[]]
//# shape: Dynlink_compilerlibs.Arg_helper:[F(1)*]
//# shape: Dynlink_compilerlibs.Ast_helper:[N,F(2),N,[F(3)*],[F(3)*,F(2),F(3)*,F(3)*,F(5)*,F(3)*,F(4)*,F(4)*,F(4)*,F(4)*,F(5)*,F(4)*,F(4)*,F(3)*,F(1)*,F(2)],[F(3)*,F(2),F(3)*,F(3)*,F(4)*,F(3)*,F(4)*,F(3)*,F(4)*,F(4)*,F(4)*,F(3)*,F(4)*,F(4)*,F(3)*,F(3)*,F(3)*,F(4)*,F(3)*,F(3)*],N,[F(6)],[F(10),F(7),F(6)],[F(7),F(4),F(6),F(8),F(6)],[F(3)*,F(2),F(3)*,F(3)*,F(3)*,F(4)*,F(4)*,F(3)*,F(3)*],[F(3)*,F(2),F(3)*,F(3)*,F(4)*,F(4)*,F(4)*,F(3)*,F(3)*],[F(2)*,F(2)*,F(3)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(3)*,F(2)*,F(1)],[F(2)*,F(3)*,F(3)*,F(2)*,F(3)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(3)*,F(2)*,F(1)],[F(6)],[F(6)],[F(6)],[F(6)],[F(5)],[F(4)],[F(6)],[F(3)*,F(2),F(4)*,F(3)*,F(5)*,F(3)*,F(4)*],N,[F(3)*,F(2),F(4)*,F(3)*,F(6)*,F(4)*,F(5)*,F(4)*,F(3)*,F(4)*],N,[F(8)],[F(2)*],[F(2)*],[F(3)*,F(5)*,F(2)*],[F(3)*,F(4)*,F(2)*]]
//# shape: Dynlink_compilerlibs.Ast_mapper:[N,F(1)*,F(3),F(1),N,F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(1)]
//# shape: Dynlink_compilerlibs.Asttypes:[]
//# shape: Dynlink_compilerlibs.Attr_helper:[F(2),F(2),N,F(2)]
//# shape: Dynlink_compilerlibs.Binutils:[F(1),F(1),F(2),F(2)]
//# shape: Dynlink_compilerlibs.Btype:[[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(1),F(1),F(1),F(1)],N,[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(1),F(1),F(1)],[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1)->F(1),F(1)->F(1),F(1)],N,N,F(1),F(2),F(1),F(1),F(1),F(1),N,F(1),F(1),F(1),F(2)*,F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(3),F(2),F(3),F(2),F(2),F(2),F(2),N,N,F(3),F(5),[F(3),F(1)],N,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(3),F(1),F(5),F(2),F(1),F(1),F(1)*,F(1)*,F(1)*,F(2),F(1),F(1),F(1),F(1),F(3),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),N,F(1)]
//# shape: Dynlink_compilerlibs.Build_path_prefix_map:[F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2)]
//# shape: Dynlink_compilerlibs.Builtin_attributes:[F(3),F(6),F(1),F(1),F(1),F(3),F(6),F(1),F(1),F(1)*->F(1),F(3),F(1),F(1),F(1),F(1),F(1),F(1)]
//# shape: Dynlink_compilerlibs.Bytesections:[F(1),F(2),F(1),F(1),N,F(1),F(2),F(2),F(2),F(1),F(1)]
//# shape: Dynlink_compilerlibs.Clflags:[N,N,N,N,N,N,F(2),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1)*,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(1)*,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(2),N,N,N,N,N,N,N,N,N,N,N,F(1)*,F(2),F(1),N,F(2),F(1),F(1),F(1)]
//# shape: Dynlink_compilerlibs.Cmi_format:[F(3),F(1),F(1),N,F(2)]
//# shape: Dynlink_compilerlibs.Cmo_format:[]
//# shape: Dynlink_compilerlibs.Cmxs_format:[]
//# shape: Dynlink_compilerlibs.Consistbl:[F(1)*]
//# shape: Dynlink_compilerlibs.Datarepr:[F(3),F(2),F(3),N,F(2),F(2)]
//# shape: Dynlink_compilerlibs.Debuginfo:[N,N,F(1)*,F(1),F(1),F(1)*,F(2),F(2),F(1),F(2)]
//# shape: Dynlink_compilerlibs.Dll:[F(1),F(2),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(1)]
//# shape: Dynlink_compilerlibs.Docstrings:[F(1),F(1),F(2)*,F(1),F(1)*,F(1)*,F(2),F(2),F(2),F(2),F(2),N,F(1)*,F(2),F(1),F(1),F(2),F(2),F(1),F(2),N,F(1)*,F(2),F(1),F(1),N,N,F(1)*,F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),N]
//# shape: Dynlink_compilerlibs.Env:[F(2),F(1)*,N,N,N,F(2),F(1)*->F(2),F(1),F(2)*,F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2)*,F(2),F(2),F(3),F(3),F(3),F(2),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(3),F(4),F(4),F(4),F(4),F(4),F(4),F(5),F(4),F(4)*->F(1),F(5),F(5),F(4)*->F(1),F(5),F(5),F(4),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1)->F(1)*,F(1)*->F(3),F(1)*->F(3),F(1)*->F(4),F(6),F(5),F(7),F(5),F(3),F(4),F(3),F(3),F(3),F(2),F(1),F(2),F(2),F(6),F(2),F(2),F(4),F(4),F(5),F(6),F(7),F(4),F(4),F(4),F(4),F(5),F(3),F(3),F(1),F(1),F(1),F(1)*,F(2),F(4),F(5),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(2),N,F(2),F(4),F(2)*,F(1)*,F(2),F(2),N,N,N,N,N,N,N,F(1)*->F(3),F(1)*->F(3),F(1)*->F(3),F(1)*->F(3),F(4),F(1)*->F(3),F(1)*->F(3),F(1)*->F(3),F(2),F(2),F(2)]
//# shape: Dynlink_compilerlibs.Ident:[N,F(2)*,N,N,N,N,N,N,F(2),F(2),F(1),F(1)*,F(1),F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,N,F(1)*,F(1)*,F(1)*,N,N,F(1),N,F(3),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(1)*->F(1)]
//# shape: Dynlink_compilerlibs.Identifiable:[F(2)*,F(1)*]
//# shape: Dynlink_compilerlibs.Instruct:[N,N]
//# shape: Dynlink_compilerlibs.Int_replace_polymorphic_compare:[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*]
//# shape: Dynlink_compilerlibs.Lambda:[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(1),N,F(1)*,N,F(3),F(2),F(6),F(2),F(3),F(2),F(1),F(3),F(3),F(3),F(3),F(2),F(4),F(2),F(1),F(1)*->F(1),F(2),F(4)*,F(4)*,F(1)*,F(1)*,F(1)*,F(1)*,N,N,F(1)*,F(3),F(1)*,F(1),N,F(1),F(2),F(1)*,F(2)*,F(1)]
//# shape: Dynlink_compilerlibs.Lazy_backtrack:[F(2),F(1)*,F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(3),F(1)]
//# shape: Dynlink_compilerlibs.Load_path:[F(1),F(1),F(1),F(1),F(1),F(1),F(1),N,F(1),F(1),F(1),F(1)]
//# shape: Dynlink_compilerlibs.Local_store:[F(1),F(2),F(1),F(2),F(1),F(1)*]
//# shape: Dynlink_compilerlibs.Location:[N,F(1)*,F(1)*,F(2),F(1)*,F(1),F(1),F(1),F(2),F(1)*,F(1)*,F(2)*,N,N,N,F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(3),F(2),N,F(1)*,F(1),F(2),N,F(1),F(2),N,F(2),N,F(3),F(2),F(2),N,F(2),F(3),F(2),F(4),F(5),F(3)*,F(2)*->F(1),F(4)*,F(2)*,F(1),F(1),N,N,F(2)*->F(1),F(2)]
//# shape: Dynlink_compilerlibs.Longident:[F(1),F(1),F(1),F(1)]
//# shape: Dynlink_compilerlibs.Meta:[]
//# shape: Dynlink_compilerlibs.Misc:[F(1),F(1),N,F(3),F(2),F(3),F(2),F(3),F(2),F(2),F(1),F(2),N,F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(3),F(1),F(3),F(2),F(1),F(2)*,F(2)*,F(2)*,F(2),F(2)*,N,F(1),F(3),F(3),F(1),F(1),F(3),F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,[F(1),F(1),F(2),F(3),F(5),F(5),F(4),F(3),F(2)],F(3),F(2),F(2),F(2),F(1)*,N,[N],F(1),F(1),F(4),F(1),F(1),F(1),F(1),F(4),N]
//# shape: Dynlink_compilerlibs.Numbers:[[N,N,N,N,N,N,N,N,N,F(1),F(1)*],[N,N,F(1),F(1)*],N,[N,N,N,N,N,N,N,N,N]]
//# shape: Dynlink_compilerlibs.Opcodes:[N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N]
//# shape: Dynlink_compilerlibs.Outcometree:[]
//# shape: Dynlink_compilerlibs.Parsetree:[]
//# shape: Dynlink_compilerlibs.Path:[F(2),F(2),F(2),F(2),F(1),F(1),F(2),F(1),F(2),F(1),F(1),F(1),F(1),F(1),N,N]
//# shape: Dynlink_compilerlibs.Persistent_env:[N,N,F(1)*->F(1),[N],F(1),F(1),F(1),F(3),F(4),F(3),F(2),F(4),F(2),F(2),F(2),F(2),F(4),F(3),F(1)*,F(2),F(3),F(3),F(1),F(3),N]
//# shape: Dynlink_compilerlibs.Predef:[N,N,N,N,N,N,N,N,F(1),F(1),F(1),N,N,N,F(1),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(3),N,N,N,N]
//# shape: Dynlink_compilerlibs.Primitive:[F(3),F(5),F(3),F(2),F(1)*,F(1)*,F(2)*,F(2)*,F(1),N]
//# shape: Dynlink_compilerlibs.Profile:[F(1),F(3),F(4),F(2),N,N,N,N,N]
//# shape: Dynlink_compilerlibs.Runtimedef:[N,N]
//# shape: Dynlink_compilerlibs.Shape:[N,[F(1)*,F(1)*],N,F(1),N,F(2),F(2)*,F(3)*,F(3)*,F(2)*,F(3),F(1)*,F(1)*,F(1),N,[N,F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3)],N,F(2)*->F(1),F(2)*,F(1)*,F(1)]
//# shape: Dynlink_compilerlibs.Subst:[N,F(3),F(3),F(4),F(3),F(3),F(3),F(3),F(1)*,F(1),F(2)*,F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(3),F(3),F(3),F(2),N,[F(1),F(1),F(1),F(1)*,F(1)*,F(1),F(3),F(3),F(3),F(3),F(3),F(1),F(1),F(1),F(1),F(1),F(1)]]
//# shape: Dynlink_compilerlibs.Symtable:[F(1),F(2),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1),F(1),F(1),F(1),N,F(1)*,F(1),F(1),F(2),F(2),F(2),N,F(2),F(1)]
//# shape: Dynlink_compilerlibs.Syntaxerr:[N,N,F(1)*,F(2)]
//# shape: Dynlink_compilerlibs.Terminfo:[F(1),F(1),F(2),F(2),F(2)]
//# shape: Dynlink_compilerlibs.Type_immediacy:[[],F(2)*,F(1)]
//# shape: Dynlink_compilerlibs.Types:[F(1),N,F(1)*,F(1),N,N,F(1)*,F(1),F(1),F(1),F(1),F(1),N,F(4)*,F(3),F(2),N,F(2),F(2),F(5)*,F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(1),F(1),F(1)*,N,F(4),F(1)*,F(2),F(2),F(4),N,N,N,N,N,N,F(1)*,F(2),F(2),F(1),F(1)*,F(1),F(2),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1)]
//# shape: Dynlink_compilerlibs.Warnings:[F(2),F(1),F(1),F(1),F(1),N,N,F(1),F(1),N,F(1),F(1),F(1),F(1)*,F(1),F(2),F(1)*,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$115 = "",
    cst$137 = "\n",
    cst_The_first_one_was_selected$1 =
      "\nThe first one was selected. Please disambiguate if this is wrong.",
    cst$123 = "\x1b[",
    cst$116 = " ",
    cst$129 = "  ",
    cst_0$3 = "  0 };\n",
    cst$118 = " (",
    cst$127 = " ( ",
    cst_which_is_later_used = " (which is later used)",
    cst$130 = " [",
    cst_and = " and ",
    cst_is_never_used_to_build_val$3 =
      " is never used to build values.\n(However, this constructor appears in patterns.)",
    cst_is_out_of_range = " is out of range",
    cst_is_overridden$1 = " is overridden.",
    cst_version_of_OCaml = " version of OCaml.",
    cst_was_expected = " was expected",
    cst_when = " when ",
    cst$141 = "#",
    cst_a = "%a",
    cst_s$1 = "%s",
    cst_s_i_i = "%s %i-%i",
    cst$138 = "'.",
    cst$139 = "(",
    cst$140 = "()",
    cst$128 = ")",
    cst_dummy_method = "*dummy method*",
    cst_predef = "*predef*",
    cst$124 = ", ",
    cst$125 = "-",
    cst_D_FILE_OFFSET_BITS_64 = "-D_FILE_OFFSET_BITS=64 ",
    cst_O2_fno_strict_aliasing_fwr =
      "-O2 -fno-strict-aliasing -fwrapv -pthread -fPIC ",
    cst_Wl_rpath = "-Wl,-rpath,",
    cst$132 = ".",
    cst$131 = ".\n",
    cst_cmi$1 = ".cmi",
    cst_i = "/%i",
    cst_toplevel = "//toplevel//",
    cst_0$2 = "0",
    cst_0x = "0x",
    cst_1$1 = "1",
    cst_3$1 = "3",
    cst_4$1 = "4",
    cst$133 = ":\n ",
    cst$117 = ": ",
    cst$135 = "::",
    cst$122 = ";",
    cst_a$0 = "<%a>",
    cst_1$2 = "<1>",
    cst_error$0 = "<error>",
    cst_hov = "<hov>",
    cst_hv_4 = "<hv 4>",
    cst_loc = "<loc>",
    cst_v = "<v>",
    cst_warning$0 = "<warning>",
    cst$126 = "@ ",
    cst$119 = "@,",
    cst_s_a_s = "@.@[%s %a, %s@]",
    cst_1_a = "@[<1>{@[%a@ @]}@]",
    cst_v$0 = "@[<v>",
    cst$121 = "@]",
    cst$134 = "@}",
    cst_Assert_failure$0 = "Assert_failure",
    cst_Caml1999A$0 = "Caml1999A",
    cst_Caml1999D$0 = "Caml1999D",
    cst_Caml1999I$0 = "Caml1999I",
    cst_Caml1999M$0 = "Caml1999M",
    cst_Caml1999N$0 = "Caml1999N",
    cst_Caml1999O$0 = "Caml1999O",
    cst_Caml1999T$0 = "Caml1999T",
    cst_Caml1999X$0 = "Caml1999X",
    cst_Caml1999Y$0 = "Caml1999Y",
    cst_Caml1999Z$0 = "Caml1999Z",
    cst_Caml1999y$0 = "Caml1999y",
    cst_Caml1999z$0 = "Caml1999z",
    cst_Deepsep = "Deepsep",
    cst_Division_by_zero$0 = "Division_by_zero",
    cst_End_of_file$0 = "End_of_file",
    cst_Error = "Error",
    cst_Failure$0 = "Failure",
    cst_Ill_formed_list_of_alert_s$2 = "Ill-formed list of alert settings",
    cst_Illegal_recursive_module_r = "Illegal recursive module reference",
    cst_Ind = "Ind",
    cst_Internal_error_invalid = "Internal error: invalid [",
    cst_Internal_error_vmthreads_n =
      "Internal error: vmthreads not supported after 4.09.0",
    cst_Internal_path = "Internal path",
    cst_Invalid_import_of = "Invalid import of ",
    cst_Invalid_syntax_for_sub_mes =
      "Invalid syntax for sub-message of extension '",
    cst_Invalid_syntax_for_sub_mes$0 =
      "Invalid syntax for sub-message of extension '%s'.",
    cst_Invalid_argument$0 = "Invalid_argument",
    cst_Map_disjoint_union = "Map.disjoint_union ",
    cst_Match_failure$0 = "Match_failure",
    cst_None$2 = "None",
    cst_Not_found$0 = "Not_found",
    cst_Out_of_memory$0 = "Out_of_memory",
    cst_Sep = "Sep",
    cst_Some$1 = "Some",
    cst_Stack_overflow$0 = "Stack_overflow",
    cst_Subst_modtype_path$1 = "Subst.modtype_path",
    cst_Sys_blocked_io$0 = "Sys_blocked_io",
    cst_Sys_error$0 = "Sys_error",
    cst_TERM = "TERM",
    cst_The_module = "The module ",
    cst_Undefined_recursive_module$0 = "Undefined_recursive_module",
    cst_Uninterpreted_extension = "Uninterpreted extension '",
    cst_Uninterpreted_extension_s = "Uninterpreted extension '%s'.",
    cst_Usage = "Usage: ",
    cst_Win32 = "Win32",
    cst$136 = "[]",
    cst$114 = "_",
    cst_none$3 = "_none_",
    cst_a_newer$1 = "a newer",
    cst_alert = "alert",
    cst_all = "all",
    cst_always$0 = "always",
    cst_amd64 = "amd64",
    cst_an_older$1 = "an older",
    cst_auto$0 = "auto",
    cst_c_primitive_caml_builtin_c = "c_primitive caml_builtin_cprim[] = {\n",
    cst_caml_ppx_context = "caml.ppx.context { ",
    cst_cannot_be_accessed_from_th =
      "cannot be accessed from the definition of an instance variable",
    cst_class$0 = "class",
    cst_class_type$0 = "class type",
    cst_const_char_caml_names_of_b =
      "const char * caml_names_of_builtin_cprim[] = {\n",
    cst_constructor$2 = "constructor",
    cst_constructor$1 = "constructor ",
    cst_contextual$0 = "contextual",
    cst_cookies$0 = "cookies",
    cst_debug$0 = "debug",
    cst_deprecated$5 = "deprecated",
    cst_dumb = "dumb",
    cst_dynlink_compilerlibs_btype = "dynlink_compilerlibs/btype.ml",
    cst_dynlink_compilerlibs_env_m = "dynlink_compilerlibs/env.ml",
    cst_dynlink_compilerlibs_ident = "dynlink_compilerlibs/ident.ml",
    cst_dynlink_compilerlibs_lambd = "dynlink_compilerlibs/lambda.ml",
    cst_dynlink_compilerlibs_load_ = "dynlink_compilerlibs/load_path.ml",
    cst_dynlink_compilerlibs_local = "dynlink_compilerlibs/local_store.ml",
    cst_dynlink_compilerlibs_locat = "dynlink_compilerlibs/location.ml",
    cst_dynlink_compilerlibs_misc_ = "dynlink_compilerlibs/misc.ml",
    cst_dynlink_compilerlibs_path_ = "dynlink_compilerlibs/path.ml",
    cst_dynlink_compilerlibs_persi = "dynlink_compilerlibs/persistent_env.ml",
    cst_dynlink_compilerlibs_subst = "dynlink_compilerlibs/subst.ml",
    cst_dynlink_compilerlibs_types = "dynlink_compilerlibs/types.ml",
    cst_dynlink_compilerlibs_warni = "dynlink_compilerlibs/warnings.ml",
    cst_emit$0 = "emit",
    cst_error$1 = "error",
    cst_extension_constructor$2 = "extension constructor",
    cst_false$1 = "false",
    cst_flambda$1 = "flambda",
    cst_float$0 = "float",
    cst_for_package$0 = "for_package",
    cst_gcc_O2_fno_strict_aliasing$1 =
      "gcc -O2 -fno-strict-aliasing -fwrapv -pthread -Wall -Wdeclaration-after-statement -fno-common -fexcess-precision=standard -fno-tree-vrp -ffunction-sections  -Wl,-E ",
    cst_gcc_shared$3 = "gcc -shared ",
    cst_include_dirs$0 = "include_dirs",
    cst_label$0 = "label",
    cst_let$1 = "let",
    cst_load_path$0 = "load_path",
    cst_module$0 = "module",
    cst_module_type$0 = "module type",
    cst_mutating_field = "mutating field ",
    cst_mutating_field_s = "mutating field %s",
    cst_never$0 = "never",
    cst_noalloc = "noalloc",
    cst_ocaml_alert = "ocaml.alert",
    cst_ocaml_doc$0 = "ocaml.doc",
    cst_ocaml_error$2 = "ocaml.error",
    cst_ocaml_ppwarning$0 = "ocaml.ppwarning",
    cst_ocaml_ppx_context$0 = "ocaml.ppx.context",
    cst_ocaml_text$0 = "ocaml.text",
    cst_ocaml_warn_on_literal_patt = "ocaml.warn_on_literal_pattern",
    cst_open_modules$0 = "open_modules",
    cst_other$0 = "other",
    cst_parsing$0 = "parsing",
    cst_principal$0 = "principal",
    cst_recursive_types$0 = "recursive_types",
    cst_s$2 = "s",
    cst_scheduling$0 = "scheduling",
    cst_short$0 = "short",
    cst_the = "the ",
    cst_this_open_statement_shadow = "this open statement shadows the ",
    cst_tool_name$0 = "tool_name",
    cst_transparent_modules$0 = "transparent_modules",
    cst_true$1 = "true",
    cst_type$0 = "type",
    cst_typedef_value_c_primitive_ = "typedef value (*c_primitive)(void);\n",
    cst_typing$0 = "typing",
    cst_unboxed = "unboxed",
    cst_unboxed_types$0 = "unboxed_types",
    cst_unsafe_string$0 = "unsafe_string",
    cst_use_threads$0 = "use_threads",
    cst_use_vmthreads$0 = "use_vmthreads",
    cst_value$0 = "value",
    cst_warning$1 = "warning",
    cst_x86_64_pc_linux_gnu = "x86_64-pc-linux-gnu",
    cst$120 = "|",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_check_bound = runtime.caml_check_bound,
    caml_compare = runtime.caml_compare,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_div = runtime.caml_div,
    caml_equal = runtime.caml_equal,
    caml_float_of_string = runtime.caml_float_of_string,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_get_global_data = runtime.caml_get_global_data,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_create_lo_mi_hi = runtime.caml_int64_create_lo_mi_hi,
    caml_int64_neg = runtime.caml_int64_neg,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_of_string = runtime.caml_int64_of_string,
    caml_int64_shift_left = runtime.caml_int64_shift_left,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int_compare = runtime.caml_int_compare,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_lessequal = runtime.caml_lessequal,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_mod = runtime.caml_mod,
    caml_mul = runtime.caml_mul,
    caml_notequal = runtime.caml_notequal,
    caml_obj_dup = runtime.caml_obj_dup,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_register_global = runtime.caml_register_global,
    caml_restore_raw_backtrace = runtime.caml_restore_raw_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_get = runtime.caml_string_get,
    caml_sys_file_exists = runtime.caml_sys_file_exists,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_sys_isatty = runtime.caml_sys_isatty,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) === 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   function caml_call14
   (f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13){
    return (f.l >= 0 ? f.l : f.l = f.length) === 14
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
            : runtime.caml_call_gen
              (f,
               [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13]);
   }
   var
    dummy = 0,
    global_data = caml_get_global_data(),
    cst$1 = cst$114,
    cst$0 = cst$115,
    cst = cst$116,
    bindir = "/home/davy/.opam/4.14.2/bin",
    standard_library_default = "/home/davy/.opam/4.14.2/lib/ocaml",
    ccomp_type = "cc",
    c_compiler = "gcc",
    c_output_obj = "-o ",
    ocamlc_cflags = cst_O2_fno_strict_aliasing_fwr,
    ocamlc_cppflags = cst_D_FILE_OFFSET_BITS_64,
    ocamlopt_cflags = cst_O2_fno_strict_aliasing_fwr,
    ocamlopt_cppflags = cst_D_FILE_OFFSET_BITS_64,
    bytecomp_c_libraries = "-lm  -lpthread",
    cst$2 = cst$116,
    cst$3 = cst$116,
    cst$4 = cst$116,
    cst$5 = cst$116,
    native_c_libraries = "-lm ",
    native_pack_linker = "ld -r -o ",
    default_rpath = cst_Wl_rpath,
    mksharedlibrpath = cst_Wl_rpath,
    ar = "ar",
    cst$112 = cst$116,
    cst$113 = cst$115,
    exec_magic_number = "Caml1999X031",
    cmi_magic_number = "Caml1999I031",
    cmo_magic_number = "Caml1999O031",
    cma_magic_number = "Caml1999A031",
    cmx_magic_number = "Caml1999Y031",
    cmxa_magic_number = "Caml1999Z031",
    ast_impl_magic_number = "Caml1999M031",
    ast_intf_magic_number = "Caml1999N031",
    cmxs_magic_number = "Caml1999D031",
    cmt_magic_number = "Caml1999T031",
    linear_magic_number = "Caml1999L031",
    architecture = cst_amd64,
    model = "default",
    system = "linux",
    asm = "as",
    ext_exe = cst$115,
    ext_obj = ".o",
    ext_asm = ".s",
    ext_lib = ".a",
    ext_dll = ".so",
    host = cst_x86_64_pc_linux_gnu,
    target = cst_x86_64_pc_linux_gnu,
    cst_camlprog_exe = "camlprog.exe",
    cst$10 = cst$115,
    cst$11 = ":",
    cst$9 = "=",
    cst$8 = "%+",
    cst$7 = "%.",
    cst$6 = "%#",
    cst$20 = cst$120,
    cst$19 = cst$115,
    cst$18 = cst$115,
    cst$17 = cst$115,
    cst$15 = cst$122,
    cst$16 = cst$123,
    cst$13 = cst$115,
    cst$14 = cst$124,
    cst$12 = cst$125,
    default_styles =
      [0, [0, 0, [0, [0, 1], 0]], [0, 0, [0, [0, 5], 0]], [0, 0, 0]],
    all_native_obj_configs = [0, [0, 1], [0, [0, 0], 0]],
    ext = "linear",
    cst$23 = cst$115,
    cst$21 = cst$115,
    cst$22 = cst$115,
    cst$24 = cst$115,
    o1_arguments = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    all = [0, 0, 0],
    passes = [0, 0, [0, 1, [0, 2, [0, 3, 0]]]],
    cst$25 = cst$116,
    cst$26 = cst$129,
    cst$27 = cst$115,
    zero = [0, 0., 0., 0],
    column_mapping =
      [0,
       [0, "time", 936769581],
       [0,
        [0, "alloc", 885068885],
        [0,
         [0, "top-heap", 208707190],
         [0, [0, "absolute-top-heap", -494364893], 0]]]],
    cst$28 = cst$116,
    generate = "generate",
    transl = "transl",
    typing = cst_typing$0,
    cst$29 = cst$115,
    cst$56 = "]",
    cst$57 = cst$130,
    cst$58 = cst$115,
    cst$59 = cst$124,
    cst$30 = cst$132,
    cst$31 = cst$124,
    cst$32 = cst$133,
    cst$33 = cst$116,
    cst$34 = cst$133,
    cst$35 = cst$116,
    cst$36 = cst$132,
    cst$37 = cst$116,
    cst$39 = cst$132,
    cst$40 = cst$132,
    cst$41 = cst$132,
    cst$42 = cst$132,
    cst$43 = cst$132,
    cst$44 = cst$132,
    cst$45 = cst$116,
    cst$46 = cst$116,
    cst$48 = cst$116,
    cst$47 = cst$116,
    cst$49 = cst$124,
    cst$50 = cst$115,
    in_different_places =
      "in different places in different or-pattern alternatives",
    cst$51 = cst$124,
    cst$52 = cst$132,
    cst$53 = cst$132,
    cst$54 = cst$132,
    cst$55 = cst$132,
    cst$38 = cst$132,
    partial = [16, [17, 2, [17, 0, 0]]],
    partial$0 =
      [17,
       [0, cst$126, 1, 0],
       [18,
        [1, [0, 0, cst$115]],
        [11,
         "Use the equivalent signed form:",
         [17,
          [0, cst$126, 1, 0],
          [16,
           [12,
            46,
            [17,
             0,
             [17,
              [0, cst$126, 1, 0],
              [18,
               [1, [0, 0, cst$115]],
               [11,
                "Hint: Enabling or disabling a warning by its mnemonic name requires a + or - prefix.",
                [17, 0, partial]]]]]]]]]]],
    descriptions =
      caml_list_of_js_array
       ([[0,
          1,
          [0, "comment-start", 0],
          "Suspicious-looking start-of-comment mark."],
         [0,
          2,
          [0, "comment-not-end", 0],
          "Suspicious-looking end-of-comment mark."],
         [0, 3, 0, "Deprecated synonym for the 'deprecated' alert."],
         [0,
          4,
          [0, "fragile-match", 0],
          "Fragile pattern matching: matching that will remain complete even\n    if additional constructors are added to one of the variant types\n    matched."],
         [0,
          5,
          [0, "ignored-partial-application", 0],
          "Partially applied function: expression whose result has function\n    type and is ignored."],
         [0,
          6,
          [0, "labels-omitted", 0],
          "Label omitted in function application."],
         [0, 7, [0, "method-override", 0], "Method overridden."],
         [0,
          8,
          [0, "partial-match", 0],
          "Partial match: missing cases in pattern-matching."],
         [0,
          9,
          [0, "missing-record-field-pattern", 0],
          "Missing fields in a record pattern."],
         [0,
          10,
          [0, "non-unit-statement", 0],
          'Expression on the left-hand side of a sequence that doesn\'t have type\n    "unit" (and that is not a function, see warning number 5).'],
         [0,
          11,
          [0, "redundant-case", 0],
          "Redundant case in a pattern matching (unused match case)."],
         [0,
          12,
          [0, "redundant-subpat", 0],
          "Redundant sub-pattern in a pattern-matching."],
         [0,
          13,
          [0, "instance-variable-override", 0],
          "Instance variable overridden."],
         [0,
          14,
          [0, "illegal-backslash", 0],
          "Illegal backslash escape in a string constant."],
         [0,
          15,
          [0, "implicit-public-methods", 0],
          "Private method made public implicitly."],
         [0,
          16,
          [0, "unerasable-optional-argument", 0],
          "Unerasable optional argument."],
         [0,
          17,
          [0, "undeclared-virtual-method", 0],
          "Undeclared virtual method."],
         [0, 18, [0, "not-principal", 0], "Non-principal type."],
         [0, 19, [0, "non-principal-labels", 0], "Type without principality."],
         [0,
          20,
          [0, "ignored-extra-argument", 0],
          "Unused function argument."],
         [0, 21, [0, "nonreturning-statement", 0], "Non-returning statement."],
         [0, 22, [0, "preprocessor", 0], "Preprocessor warning."],
         [0,
          23,
          [0, "useless-record-with", 0],
          'Useless record "with" clause.'],
         [0,
          24,
          [0, "bad-module-name", 0],
          "Bad module name: the source file name is not a valid OCaml module name."],
         [0, 25, 0, "Ignored: now part of warning 8."],
         [0,
          26,
          [0, "unused-var", 0],
          'Suspicious unused variable: unused variable that is bound\n    with "let" or "as", and doesn\'t start with an underscore ("_")\n    character.'],
         [0,
          27,
          [0, "unused-var-strict", 0],
          'Innocuous unused variable: unused variable that is not bound with\n    "let" nor "as", and doesn\'t start with an underscore ("_")\n    character.'],
         [0,
          28,
          [0, "wildcard-arg-to-constant-constr", 0],
          "Wildcard pattern given as argument to a constant constructor."],
         [0,
          29,
          [0, "eol-in-string", 0],
          "Unescaped end-of-line in a string constant (non-portable code)."],
         [0,
          30,
          [0, "duplicate-definitions", 0],
          "Two labels or constructors of the same name are defined in two\n    mutually recursive types."],
         [0,
          31,
          [0, "module-linked-twice", 0],
          "A module is linked twice in the same executable."],
         [0,
          32,
          [0, "unused-value-declaration", 0],
          "Unused value declaration."],
         [0, 33, [0, "unused-open", 0], "Unused open statement."],
         [0,
          34,
          [0, "unused-type-declaration", 0],
          "Unused type declaration."],
         [0, 35, [0, "unused-for-index", 0], "Unused for-loop index."],
         [0, 36, [0, "unused-ancestor", 0], "Unused ancestor variable."],
         [0, 37, [0, "unused-constructor", 0], "Unused constructor."],
         [0, 38, [0, "unused-extension", 0], "Unused extension constructor."],
         [0, 39, [0, "unused-rec-flag", 0], "Unused rec flag."],
         [0,
          40,
          [0, "name-out-of-scope", 0],
          "Constructor or label name used out of scope."],
         [0,
          41,
          [0, "ambiguous-name", 0],
          "Ambiguous constructor or label name."],
         [0,
          42,
          [0, "disambiguated-name", 0],
          "Disambiguated constructor or label name (compatibility warning)."],
         [0,
          43,
          [0, "nonoptional-label", 0],
          "Nonoptional label applied as optional."],
         [0,
          44,
          [0, "open-shadow-identifier", 0],
          "Open statement shadows an already defined identifier."],
         [0,
          45,
          [0, "open-shadow-label-constructor", 0],
          "Open statement shadows an already defined label or constructor."],
         [0, 46, [0, "bad-env-variable", 0], "Error in environment variable."],
         [0, 47, [0, "attribute-payload", 0], "Illegal attribute payload."],
         [0,
          48,
          [0, "eliminated-optional-arguments", 0],
          "Implicit elimination of optional arguments."],
         [0,
          49,
          [0, "no-cmi-file", 0],
          "Absent cmi file when looking up module alias."],
         [0,
          50,
          [0, "unexpected-docstring", 0],
          "Unexpected documentation comment."],
         [0,
          51,
          [0, "wrong-tailcall-expectation", 0],
          "Function call annotated with an incorrect @tailcall attribute"],
         [0,
          52,
          [0, "fragile-literal-pattern", 0],
          "Fragile constant pattern."],
         [0,
          53,
          [0, "misplaced-attribute", 0],
          "Attribute cannot appear in this context."],
         [0,
          54,
          [0, "duplicated-attribute", 0],
          "Attribute used more than once on an expression."],
         [0, 55, [0, "inlining-impossible", 0], "Inlining impossible."],
         [0,
          56,
          [0, "unreachable-case", 0],
          "Unreachable case in a pattern-matching (based on type information)."],
         [0,
          57,
          [0, "ambiguous-var-in-pattern-guard", 0],
          "Ambiguous or-pattern variables under guard."],
         [0, 58, [0, "no-cmx-file", 0], "Missing cmx file."],
         [0,
          59,
          [0, "flambda-assignment-to-non-mutable-value", 0],
          "Assignment to non-mutable value."],
         [0, 60, [0, "unused-module", 0], "Unused module declaration."],
         [0,
          61,
          [0, "unboxable-type-in-prim-decl", 0],
          "Unboxable type in primitive declaration."],
         [0,
          62,
          [0, "constraint-on-gadt", 0],
          "Type constraint on GADT type declaration."],
         [0,
          63,
          [0, "erroneous-printed-signature", 0],
          "Erroneous printed signature."],
         [0,
          64,
          [0, "unsafe-array-syntax-without-parsing", 0],
          "-unsafe used with a preprocessor returning a syntax tree."],
         [0,
          65,
          [0, "redefining-unit", 0],
          "Type declaration defining a new '()' constructor."],
         [0, 66, [0, "unused-open-bang", 0], "Unused open! statement."],
         [0,
          67,
          [0, "unused-functor-parameter", 0],
          "Unused functor parameter."],
         [0,
          68,
          [0, "match-on-mutable-state-prevent-uncurry", 0],
          "Pattern-matching depending on mutable state prevents the remaining \n    arguments from being uncurried."],
         [0, 69, [0, "unused-field", 0], "Unused record field."],
         [0, 70, [0, "missing-mli", 0], "Missing interface file."],
         [0,
          71,
          [0, "unused-tmc-attribute", 0],
          "Unused @tail_mod_cons attribute"],
         [0,
          72,
          [0, "tmc-breaks-tailcall", 0],
          "A tail call is turned into a non-tail call by the @tail_mod_cons transformation."]]),
    defaults_w = "+a-4-7-9-27-29-30-32..42-44-45-48-50-60-66..70",
    defaults_warn_error = "-a+31",
    cst_deprecated$3 = cst_deprecated$5,
    partial$1 = [17, 4, 0],
    cst_error = cst_error$1,
    cst_warning = cst_warning$1,
    cst$62 = cst$115,
    cst$63 = cst$115,
    cst$60 = "# ",
    cst$61 = cst$129,
    empty_docs = [0, 0, 0],
    cst$64 = cst$135,
    cst$65 = cst$136,
    cst$68 = cst$137,
    cst$67 = cst$115,
    cst$66 = cst$115,
    cst$71 = cst$115,
    cst$73 = cst$115,
    cst$72 = cst$115,
    cst$74 = cst$115,
    cst$70 = "/",
    cst$69 = cst$114,
    key_name = cst$115,
    cst$75 = " )",
    cst$76 = ".( ",
    cst$77 = cst$132,
    cst$78 = cst$128,
    cst$79 = cst$139,
    cst$81 = cst$115,
    cst$82 = cst$115,
    message$0 = '[@@unboxed] + [@@noalloc] should be used\ninstead of "float"',
    message$1 = '[@@noalloc] should be used instead of "noalloc"',
    cst$80 = cst$115,
    oattr_unboxed = [0, cst_unboxed],
    oattr_untagged = [0, "untagged"],
    oattr_noalloc = [0, cst_noalloc],
    partial$2 = [15, [17, 0, [17, 0, [12, 41, [17, 0, 0]]]]],
    partial$3 = [1, [0, 0, cst$115]],
    partial$4 = [17, 0, 0],
    cst$83 = cst$140,
    leaf_for_unpack = [0, 0, 0],
    cst$85 = cst$115,
    cst$86 = "~",
    cst$87 = "?",
    cst$84 = cst$115,
    L = [0, 0],
    dummy_method = cst_dummy_method,
    tvar_none = [0, 0],
    tunivar_none = [9, 0],
    txt = cst_ocaml_warn_on_literal_patt,
    cst$88 = cst$140,
    cst$89 = cst$136,
    cst$90 = cst$135,
    desc$12 = [2, 0],
    cst$91 = cst$115,
    partial$5 = [2, 0, [17, 0, 0]],
    cst$96 = cst$115,
    partial$6 = [17, 0, 0],
    partial$7 =
      [17,
       [0, cst$126, 1, 0],
       [11,
        "applied",
        [17,
         [0, cst$126, 1, 0],
         [11,
          "in",
          [17,
           [0, cst$126, 1, 0],
           [11,
            cst_type$0,
            [17, [0, cst$126, 1, 0], [11, "expressions", [17, 0, 0]]]]]]]]],
    cst$97 = cst$115,
    cst$98 = cst$137,
    cst$94 = cst$141,
    cst$95 = cst$141,
    cst$93 = cst$115,
    M = [0, 1],
    cst$92 = cst$115,
    cst$104 = "}",
    cst$105 = cst$122,
    cst$106 = "{",
    cst$107 = cst$115,
    cst$103 = "??",
    cst$102 = cst$132,
    cst$101 = cst$115,
    cst$99 = cst$128,
    cst$100 = cst$139,
    default_function_attribute = [0, 3, 2, 2, 1, 0, 0, 0],
    staticfail = [11, 0, 0],
    cst$108 = cst$117,
    cst$109 = cst$117,
    cst$111 = cst$115,
    cst$110 = cst$115,
    Stdlib = global_data.Stdlib,
    Stdlib_Fun = global_data.Stdlib__Fun,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Option = global_data.Stdlib__Option,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Set = global_data.Stdlib__Set,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Arg = global_data.Stdlib__Arg,
    Stdlib_Float = global_data.Stdlib__Float,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Stdlib_Parsing = global_data.Stdlib__Parsing,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    Stdlib_Digest = global_data.Stdlib__Digest,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Obj = global_data.Stdlib__Obj,
    _ = [0, [11, cst_0x, [4, 6, [0, 2, 2], 0, 0]], "0x%02x"],
    cst_Truncated_file = "Truncated file",
    aa =
      [0, [11, "Unrecognized magic: ", [2, 0, 0]], "Unrecognized magic: %s"],
    ab =
      [0,
       [11, "Unsupported: ", [2, 0, [11, ": 0x", [7, 6, 0, 0, 0]]]],
       "Unsupported: %s: 0x%Lx"],
    ac =
      [0,
       [11, "Out of range constant: ", [2, 0, 0]],
       "Out of range constant: %s"];
   function error_to_string(param){
    if(typeof param === "number") return cst_Truncated_file;
    switch(param[0]){
      case 0:
       var
        magic = param[1],
        a =
          Stdlib_List[10].call
           (null,
            caml_ml_string_length(magic),
            function(i){
             var c = caml_string_get(magic, i);
             return caml_call1(Stdlib_Printf[4].call(null, _), c);
            }),
        b = Stdlib_String[6].call(null, cst, a);
       return caml_call1(Stdlib_Printf[4].call(null, aa), b);
      case 1:
       var n = param[2], s = param[1];
       return caml_call2(Stdlib_Printf[4].call(null, ab), s, n);
      default:
       var s$0 = param[1];
       return caml_call1(Stdlib_Printf[4].call(null, ac), s$0);
    }
   }
   var
    Error = [248, "Dynlink_compilerlibs.Binutils.Error", caml_fresh_oo_id(0)],
    $ = [0, [11, cst_0x, [4, 6, 0, 0, 0]], "0x%x"],
    ad = caml_int64_create_lo_mi_hi(16777215, 255, 0);
   function name_at(max_len, buf, start){
    var
     a = start < 0 ? 1 : 0,
     b = a || (caml_ml_bytes_length(buf) < start ? 1 : 0);
    if(b)
     throw caml_maybe_attach_backtrace
            ([0,
              Error,
              [2, caml_call1(Stdlib_Printf[4].call(null, $), start)]],
             1);
    if(max_len)
     var
      n = max_len[1],
      max_pos =
        Stdlib_Int[10].call(null, caml_ml_bytes_length(buf), start + n | 0);
    else
     var max_pos = caml_ml_bytes_length(buf);
    var pos = start;
    for(;;){
     if(max_pos > pos && 0 !== caml_bytes_get(buf, pos)){var pos$0 = pos + 1 | 0; pos = pos$0; continue;}
     return Stdlib_Bytes[8].call(null, buf, start, pos - start | 0);
    }
   }
   function array_find(f, a){
    var i$0 = 0;
    for(;;){
     if(a.length - 1 <= i$0) return 0;
     var
      x = caml_check_bound(a, i$0)[i$0 + 1],
      r = caml_call1(f, x) ? [0, x] : 0;
     if(r) return r;
     var i = i$0 + 1 | 0;
     i$0 = i;
    }
   }
   function really_input_bytes(ic, len){
    var buf = caml_create_bytes(len);
    Stdlib[85].call(null, ic, buf, 0, len);
    return buf;
   }
   function uint64_of_uint32(n){
    return runtime.caml_int64_and(caml_int64_of_int32(n), ad);
   }
   function word_size(param){return param[3] ? 8 : 4;}
   function get_uint16(param, buf, idx){
    var endianness = param[2];
    return endianness
            ? Stdlib_Bytes[66].call(null, buf, idx)
            : Stdlib_Bytes[67].call(null, buf, idx);
   }
   function get_uint32(param, buf, idx){
    var endianness = param[2];
    return endianness
            ? Stdlib_Bytes[72].call(null, buf, idx)
            : Stdlib_Bytes[73].call(null, buf, idx);
   }
   function get_uint(s, d, buf, idx){
    var n = get_uint32(d, buf, idx), match = Stdlib_Int32[12].call(null, n);
    if(! match)
     throw caml_maybe_attach_backtrace
            ([0, Error, [1, s, caml_int64_of_int32(n)]], 1);
    var n$0 = match[1];
    return n$0;
   }
   function get_uint64(param, buf, idx){
    var endianness = param[2];
    return endianness
            ? Stdlib_Bytes[75].call(null, buf, idx)
            : Stdlib_Bytes[76].call(null, buf, idx);
   }
   function get_word(d, buf, idx){
    return d[3]
            ? get_uint64(d, buf, idx)
            : uint64_of_uint32(get_uint32(d, buf, idx));
   }
   function uint64_to_int(s, n){
    var match = Stdlib_Int64[12].call(null, n);
    if(! match) throw caml_maybe_attach_backtrace([0, Error, [1, s, n]], 1);
    var n$0 = match[1];
    return n$0;
   }
   function load_bytes(d, off, len){
    caml_call2(Stdlib[96][4], d[1], off);
    return really_input_bytes(d[1], len);
   }
   function load_section_body(d, param){
    var sh_size = param[5], sh_offset = param[4];
    return load_bytes(d, sh_offset, sh_size);
   }
   function find_section(sections, type, sectname){
    function f(param){
     var
      sh_name_str = param[7],
      sh_type = param[2],
      a = sh_type === type ? 1 : 0,
      b = a ? sh_name_str === sectname ? 1 : 0 : a;
     return b;
    }
    return array_find(f, sections);
   }
   function find_symbol(symbols, symname){
    function f(param){
     var st_name = param[1];
     return 0 === param[3] ? 0 : st_name === symname ? 1 : 0;
    }
    return array_find(f, symbols);
   }
   function header_size(param){
    var bitness = param[3], a = bitness ? 6 : 5;
    return (a * 4 | 0) + 8 | 0;
   }
   function size_nlist(d){return 8 + word_size(d) | 0;}
   function fix(symname){return Stdlib[28].call(null, cst$1, symname);}
   function find_symbol$0(symbols, symname){
    function f(param){
     var
      n_type = param[2],
      n_name = param[1],
      a = 15 === (n_type & 15) ? 1 : 0,
      b = a ? n_name === symname ? 1 : 0 : a;
     return b;
    }
    return array_find(f, symbols);
   }
   var
    ae = caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_sh_name = "sh_name",
    cst_sh_size = "sh_size",
    cst_sh_entsize = "sh_entsize",
    af = caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_e_shnum = "e_shnum",
    cst_e_shstrndx = "e_shstrndx",
    cst_dynsym = ".dynsym",
    ag = [2, "sh_entsize=0"],
    cst_dynstr = ".dynstr",
    cst_st_name = "st_name",
    cst_ELFCLASS = "ELFCLASS",
    cst_ELFDATA = "ELFDATA",
    ah = caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_ncmds = "ncmds",
    cst_sizeofcmds = "sizeofcmds",
    cst_cmdsize = "cmdsize",
    cst_nsyms = "nsyms",
    cst_strsize = "strsize",
    cst_n_name = "n_name",
    header_size$0 = 24,
    ai = [0, "SizeOfOptionalHeader=0"],
    cst_optional_header_magic = "optional_header_magic",
    aj = [0, 8],
    cst_virtual_size = "virtual_size",
    cst_size_of_raw_data = "size_of_raw_data",
    cst_exptbl = ".exptbl",
    cst_numexports = "numexports",
    cst_exptbl_name_offset = "exptbl name offset",
    cst_data = ".data",
    cst_MACHINETYPE = "MACHINETYPE",
    ak = [1, 0];
   function find_section$0(sections, sectname){
    return array_find
            (function(param){
              var name = param[1];
              return name === sectname ? 1 : 0;
             },
             sections);
   }
   function defines_symbol(symbols, symname){
    return Stdlib_Array[23].call
            (null,
             function(param){
              var name = param[1];
              return name === symname ? 1 : 0;
             },
             symbols);
   }
   function f(ic){
    Stdlib[90].call(null, ic, 0);
    var
     magic$2 = Stdlib[86].call(null, ic, 4),
     match$8 = caml_string_get(magic$2, 0),
     match$9 = caml_string_get(magic$2, 1),
     match$10 = caml_string_get(magic$2, 2),
     match$11 = caml_string_get(magic$2, 3);
    a:
    {
     if(128 <= match$8){
      if(208 <= match$8){
       if
        (254 !== match$8
         || 237 !== match$9 || 250 !== match$10 || 1 < match$11 - 206 >>> 0)
        break a;
      }
      else if
       (206 > match$8
        || 250 !== match$9 || 237 !== match$10 || 254 !== match$11)
       break a;
      Stdlib[90].call(null, ic, 0);
      var
       magic = really_input_bytes(ic, 4),
       match$3 = Stdlib_Bytes[71].call(null, magic, 0);
      b:
      {
       if(runtime.caml_lessthan(match$3, -17958194)){
        if(! caml_notequal(match$3, -822415874)){var magic$0 = 1; break b;}
        if(! caml_notequal(match$3, -805638658)){var magic$0 = 3; break b;}
       }
       else{
        if(! caml_notequal(match$3, -17958194)){var magic$0 = 0; break b;}
        if(! caml_notequal(match$3, -17958193)){var magic$0 = 2; break b;}
       }
       throw caml_maybe_attach_backtrace
              ([0, Error, [0, Stdlib_Bytes[6].call(null, magic)]], 1);
      }
      var bitness$0 = 2 <= magic$0 ? 1 : 0, match$4 = Stdlib_Sys[11];
      b:
      {
       c:
       {
        d:
        {
         if(1 !== magic$0 && 3 > magic$0){if(match$4) break d; break c;}
         if(match$4) break c;
        }
        var endianness$0 = 1;
        break b;
       }
       var endianness$0 = 0;
      }
      var
       d$0 = [0, ic, endianness$0, bitness$0],
       buf$3 = load_bytes(d$0, ah, header_size(d$0)),
       ncmds = get_uint(cst_ncmds, d$0, buf$3, 16),
       sizeofcmds = get_uint(cst_sizeofcmds, d$0, buf$3, 20),
       buf$4 =
         load_bytes(d$0, caml_int64_of_int32(header_size(d$0)), sizeofcmds),
       base = [0, 0],
       mk$1 =
         function(param){
          var
           cmd = get_uint32(d$0, buf$4, base[1] | 0),
           cmdsize = get_uint(cst_cmdsize, d$0, buf$4, base[1] + 4 | 0);
          if(caml_notequal(cmd, 2))
           var lc = 0;
          else
           var
            symoff = get_uint32(d$0, buf$4, base[1] + 8 | 0),
            nsyms = get_uint(cst_nsyms, d$0, buf$4, base[1] + 12 | 0),
            stroff = get_uint32(d$0, buf$4, base[1] + 16 | 0),
            strsize = get_uint(cst_strsize, d$0, buf$4, base[1] + 20 | 0),
            lc = [0, [0, symoff, nsyms, stroff, strsize]];
          base[1] = base[1] + cmdsize | 0;
          return lc;
         },
       load_commands = Stdlib_Array[2].call(null, ncmds, mk$1);
      b:
      {
       var i = 0;
       for(;;){
        if(load_commands.length - 1 <= i) break;
        var param = caml_check_bound(load_commands, i)[i + 1];
        if(param) var symtab = param[1], r = [0, symtab]; else var r = 0;
        if(r){var match$1 = r; break b;}
        var i$0 = i + 1 | 0;
        i = i$0;
       }
       var match$1 = 0;
      }
      if(match$1)
       var
        match$2 = match$1[1],
        strsize = match$2[4],
        stroff = match$2[3],
        nsyms = match$2[2],
        symoff = match$2[1],
        strtbl$0 = load_bytes(d$0, uint64_of_uint32(stroff), strsize),
        k = caml_mul(nsyms, size_nlist(d$0)),
        buf$5 = load_bytes(d$0, uint64_of_uint32(symoff), k),
        size_nlist$0 = size_nlist(d$0),
        mk$2 =
          function(i){
           var
            base = caml_mul(i, size_nlist$0),
            n_name =
              name_at(0, strtbl$0, get_uint(cst_n_name, d$0, buf$5, base | 0)),
            n_type = Stdlib_Bytes[63].call(null, buf$5, base + 4 | 0),
            n_value = get_word(d$0, buf$5, base + 8 | 0);
           return [0, n_name, n_type, n_value];
          },
        symbols$0 = Stdlib_Array[2].call(null, nsyms, mk$2);
      else
       var symbols$0 = [0];
      var
       symbol_offset$0 =
         function(symname$0){
          var
           symname = fix(symname$0),
           match = find_symbol$0(symbols$0, symname);
          if(! match) return 0;
          var n_value = match[1][3];
          return [0, n_value];
         },
       defines_symbol$1 =
         function(symname$0){
          var symname = fix(symname$0), a = find_symbol$0(symbols$0, symname);
          return Stdlib_Option[11].call(null, a);
         };
      return [0, defines_symbol$1, symbol_offset$0];
     }
     if(77 === match$8){
      if(90 === match$9){
       Stdlib[90].call(null, ic, 60);
       var
        buf$9 = really_input_bytes(ic, 4),
        e_lfanew = uint64_of_uint32(Stdlib_Bytes[73].call(null, buf$9, 0));
       caml_call2(Stdlib[96][4], ic, e_lfanew);
       var
        buf$10 = really_input_bytes(ic, header_size$0),
        magic$1 = Stdlib_Bytes[8].call(null, buf$10, 0, 4);
       if(magic$1 !== "PE\0\0")
        throw caml_maybe_attach_backtrace([0, Error, [0, magic$1]], 1);
       var n$0 = Stdlib_Bytes[67].call(null, buf$10, 4);
       b:
       {
        if(449 <= n$0){
         if(34404 === n$0){var machine = 2; break b;}
         if(43620 === n$0){var machine = 1; break b;}
        }
        else{
         if(332 === n$0){var machine = 3; break b;}
         if(448 <= n$0){var machine = 0; break b;}
        }
        throw caml_maybe_attach_backtrace
               ([0, Error, [1, cst_MACHINETYPE, caml_int64_of_int32(n$0)]], 1);
       }
       var
        bitness$1 = 1 < machine - 1 >>> 0 ? 0 : 1,
        d$1 = [0, ic, 0, bitness$1],
        number_of_sections = get_uint16(d$1, buf$10, 6),
        size_of_optional_header = get_uint16(d$1, buf$10, 20);
       get_uint16(d$1, buf$10, 22);
       if(0 === size_of_optional_header)
        throw caml_maybe_attach_backtrace([0, Error, ai], 1);
       var
        buf$6 =
          load_bytes
           (d$1,
            caml_int64_add(e_lfanew, caml_int64_create_lo_mi_hi(24, 0, 0)),
            size_of_optional_header),
        n = get_uint16(d$1, buf$6, 0);
       if(267 === n)
        var
         image_base = uint64_of_uint32(get_uint32(d$1, buf$6, 28)),
         image_base$0 = image_base;
       else{
        if(523 !== n)
         throw caml_maybe_attach_backtrace
                ([0,
                  Error,
                  [1, cst_optional_header_magic, caml_int64_of_int32(n)]],
                 1);
        var image_base$0 = get_uint64(d$1, buf$6, 24);
       }
       var
        buf$7 =
          load_bytes
           (d$1,
            caml_int64_add
             (e_lfanew, caml_int64_of_int32(24 + size_of_optional_header | 0)),
            number_of_sections * 40 | 0),
        mk$3 =
          function(i){
           var
            base = i * 40 | 0,
            name = name_at(aj, buf$7, base | 0),
            virtual_size =
              get_uint(cst_virtual_size, d$1, buf$7, base + 8 | 0),
            virtual_address =
              uint64_of_uint32(get_uint32(d$1, buf$7, base + 12 | 0)),
            size_of_raw_data =
              get_uint(cst_size_of_raw_data, d$1, buf$7, base + 16 | 0),
            pointer_to_raw_data =
              uint64_of_uint32(get_uint32(d$1, buf$7, base + 20 | 0));
           return [0,
                   name,
                   virtual_size,
                   virtual_address,
                   size_of_raw_data,
                   pointer_to_raw_data];
          },
        sections$1 = Stdlib_Array[2].call(null, number_of_sections, mk$3),
        match$5 = find_section$0(sections$1, cst_exptbl);
       if(match$5)
        var
         exptbl = match$5[1],
         virtual_address = exptbl[3],
         pointer_to_raw_data = exptbl[5],
         size_of_raw_data = exptbl[4],
         buf$8 = load_bytes(d$1, pointer_to_raw_data, size_of_raw_data),
         numexports = uint64_to_int(cst_numexports, get_word(d$1, buf$8, 0)),
         word_size$4 = word_size(d$1),
         mk$4 =
           function(i){
            var
             address =
               get_word
                (d$1, buf$8, caml_mul(word_size$4, (2 * i | 0) + 1 | 0)),
             nameoff =
               get_word
                (d$1, buf$8, caml_mul(word_size$4, (2 * i | 0) + 2 | 0)),
             off =
               caml_int64_sub
                (nameoff, caml_int64_add(virtual_address, image_base$0)),
             name =
               name_at(0, buf$8, uint64_to_int(cst_exptbl_name_offset, off));
            return [0, name, address];
           },
         symbols$1 = Stdlib_Array[2].call(null, numexports, mk$4);
       else
        var symbols$1 = [0];
       var match$6 = find_section$0(sections$1, cst_data);
       if(match$6)
        var
         match$7 = match$6[1],
         pointer_to_raw_data$0 = match$7[5],
         virtual_address$0 = match$7[3],
         symbol_offset$1 =
           function(symname){
            var
             match =
               array_find
                (function(param){
                  var name = param[1];
                  return name === symname ? 1 : 0;
                 },
                 symbols$1);
            if(! match) return 0;
            var address = match[1][2];
            return [0,
                    caml_int64_add
                     (pointer_to_raw_data$0,
                      caml_int64_sub
                       (address, caml_int64_add(virtual_address$0, image_base$0)))];
           };
       else
        var
         l = 0,
         m = Stdlib_Fun[1],
         symbol_offset$1 = function(a){return m(l, a);};
       var
        defines_symbol$2 = function(a){return defines_symbol(symbols$1, a);};
       return [0, defines_symbol$2, symbol_offset$1];
      }
     }
     else if
      (127 <= match$8 && 69 === match$9 && 76 === match$10 && 70 === match$11){
      Stdlib[90].call(null, ic, 0);
      var
       identification = really_input_bytes(ic, 16),
       c = caml_bytes_get(identification, 4);
      b:
      if(3 > c){
       switch(c){
         case 1:
          var bitness = 0; break;
         case 2:
          var bitness = 1; break;
         default: break b;
       }
       var c$0 = caml_bytes_get(identification, 5);
       c:
       if(3 > c$0){
        switch(c$0){
          case 1:
           var endianness = 0; break;
          case 2:
           var endianness = 1; break;
          default: break c;
        }
        var
         d = [0, ic, endianness, bitness],
         buf = load_bytes(d, ae, 40 + (3 * word_size(d) | 0) | 0),
         word_size$0 = word_size(d),
         e_shnum = get_uint16(d, buf, 36 + (3 * word_size$0 | 0) | 0),
         e_shentsize = get_uint16(d, buf, 34 + (3 * word_size$0 | 0) | 0),
         e_shoff = get_word(d, buf, 24 + (2 * word_size$0 | 0) | 0),
         e_shstrndx = get_uint16(d, buf, 38 + (3 * word_size$0 | 0) | 0);
        if(caml_equal(e_shoff, af))
         var sections$0 = [0];
        else{
         var
          buf$1 =
            [246, function(a){return load_bytes(d, e_shoff, e_shentsize);}],
          word_size$2 = word_size(d);
         if(0 === e_shnum)
          var
           a = caml_obj_tag(buf$1),
           e = 8 + (3 * word_size$2 | 0) | 0,
           f =
             250 === a
              ? buf$1[1]
              : 246 === a ? CamlinternalLazy[2].call(null, buf$1) : buf$1,
           e_shnum$0 = uint64_to_int(cst_e_shnum, get_word(d, f, e));
         else
          var e_shnum$0 = e_shnum;
         if(65535 === e_shstrndx)
          var
           b = caml_obj_tag(buf$1),
           g = 8 + (4 * word_size$2 | 0) | 0,
           h =
             250 === b
              ? buf$1[1]
              : 246 === b ? CamlinternalLazy[2].call(null, buf$1) : buf$1,
           e_shstrndx$0 = get_uint(cst_e_shstrndx, d, h, g);
         else
          var e_shstrndx$0 = e_shstrndx;
         var
          buf$0 = load_bytes(d, e_shoff, caml_mul(e_shnum$0, e_shentsize)),
          word_size$1 = word_size(d),
          mk =
            function(i){
             var
              base = caml_mul(i, e_shentsize),
              sh_name = get_uint(cst_sh_name, d, buf$0, base | 0),
              match = get_uint32(d, buf$0, base + 4 | 0),
              sh_type =
                caml_notequal(match, 3) ? caml_notequal(match, 11) ? 2 : 1 : 0,
              sh_addr = get_word(d, buf$0, (base + 8 | 0) + word_size$1 | 0),
              sh_offset =
                get_word(d, buf$0, (base + 8 | 0) + (2 * word_size$1 | 0) | 0),
              sh_size =
                uint64_to_int
                 (cst_sh_size,
                  get_word
                   (d, buf$0, (base + 8 | 0) + (3 * word_size$1 | 0) | 0)),
              sh_entsize =
                uint64_to_int
                 (cst_sh_entsize,
                  get_word
                   (d, buf$0, (base + 16 | 0) + (5 * word_size$1 | 0) | 0));
             return [0,
                     sh_name,
                     sh_type,
                     sh_addr,
                     sh_offset,
                     sh_size,
                     sh_entsize,
                     cst$0];
            },
          sections = Stdlib_Array[2].call(null, e_shnum$0, mk);
         if(0 === e_shstrndx$0)
          var sections$0 = sections;
         else
          var
           shstrtbl =
             load_section_body
              (d, caml_check_bound(sections, e_shstrndx$0)[e_shstrndx$0 + 1]),
           set_name =
             function(sec){
              var sh_name_str = name_at(0, shstrtbl, sec[1]);
              return [0,
                      sec[1],
                      sec[2],
                      sec[3],
                      sec[4],
                      sec[5],
                      sec[6],
                      sh_name_str];
             },
           sections$0 = Stdlib_Array[15].call(null, set_name, sections);
        }
        var match = find_section(sections$0, 1, cst_dynsym);
        if(match){
         var dynsym = match[1];
         if(0 === dynsym[6])
          throw caml_maybe_attach_backtrace([0, Error, ag], 1);
         var match$0 = find_section(sections$0, 0, cst_dynstr);
         if(match$0)
          var
           dynstr = match$0[1],
           strtbl = load_section_body(d, dynstr),
           buf$2 = load_section_body(d, dynsym),
           word_size$3 = word_size(d),
           mk$0 =
             function(i){
              var
               base = caml_mul(i, dynsym[6]),
               st_name =
                 name_at(0, strtbl, get_uint(cst_st_name, d, buf$2, base)),
               st_value = get_word(d, buf$2, base + word_size$3 | 0),
               off = d[3] ? 6 : 14,
               st_shndx = get_uint16(d, buf$2, base + off | 0);
              return [0, st_name, st_value, st_shndx];
             },
           j = caml_div(dynsym[5], dynsym[6]),
           symbols = Stdlib_Array[2].call(null, j, mk$0);
         else
          var symbols = [0];
        }
        else
         var symbols = [0];
        var
         symbol_offset =
           function(symname){
            var match = find_symbol(symbols, symname);
            if(! match) return 0;
            var
             match$0 = match[1],
             st_shndx = match$0[3],
             st_value = match$0[2],
             a =
               caml_int64_sub
                (st_value,
                 caml_check_bound(sections$0, st_shndx)[st_shndx + 1][3]);
            return [0, caml_int64_add(sections$0[st_shndx + 1][4], a)];
           },
         defines_symbol$0 =
           function(symname){
            var a = find_symbol(symbols, symname);
            return Stdlib_Option[11].call(null, a);
           };
        return [0, defines_symbol$0, symbol_offset];
       }
       throw caml_maybe_attach_backtrace
              ([0, Error, [1, cst_ELFDATA, caml_int64_of_int32(c$0)]], 1);
      }
      throw caml_maybe_attach_backtrace
             ([0, Error, [1, cst_ELFCLASS, caml_int64_of_int32(c)]], 1);
     }
    }
    throw caml_maybe_attach_backtrace([0, Error, [0, magic$2]], 1);
   }
   function read(filename){
    try{
     var
      ic = Stdlib[80].call(null, filename),
      t =
        Stdlib_Fun[4].call
         (null,
          function(param){return Stdlib[94].call(null, ic);},
          function(param){return f(ic);});
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return ak;
     var tag = exn[1];
     if(tag !== Error) throw caml_maybe_attach_backtrace(exn, 0);
     var err = exn[2];
     return [1, err];
    }
    return [0, t];
   }
   function defines_symbol$0(param, symname){
    var defines_symbol = param[1];
    return caml_call1(defines_symbol, symname);
   }
   function symbol_offset(param, symname){
    var symbol_offset = param[2];
    return caml_call1(symbol_offset, symname);
   }
   var
    Dynlink_compilerlibs_Binutils =
      [0, error_to_string, read, defines_symbol$0, symbol_offset];
   caml_register_global
    (1265, Dynlink_compilerlibs_Binutils, "Dynlink_compilerlibs.Binutils");
   var
    version = Stdlib_Sys[46],
    bi = [0, [2, 0, [11, cst$117, [15, [12, 10, 0]]]], "%s: %a\n"],
    bf = [0, [2, 0, 0], cst_s$1],
    bg = [0, [4, 0, 0, 0, 0], "%d"],
    bh = [0, [9, 0, 0], "%B"],
    cst_maindll = " -maindll",
    cst_exe_link_Wl_E = ' -exe -link "-Wl,-E"',
    cst_gcc_shared = cst_gcc_shared$3,
    cst_gcc_O2_fno_strict_aliasing = cst_gcc_O2_fno_strict_aliasing$1,
    cst_gcc_shared$0 = cst_gcc_shared$3,
    cst_gcc_shared$1 = cst_gcc_shared$3,
    cst_gcc_O2_fno_strict_aliasing$0 = cst_gcc_O2_fno_strict_aliasing$1,
    cst_gcc_shared$2 = cst_gcc_shared$3,
    cst_mli = ".mli",
    cst_a_out = "a.out",
    cst_camlprog = "camlprog",
    cst_linear_magic_number = "linear_magic_number",
    cst_cmt_magic_number = "cmt_magic_number",
    cst_cmxs_magic_number = "cmxs_magic_number",
    cst_ast_intf_magic_number = "ast_intf_magic_number",
    cst_ast_impl_magic_number = "ast_impl_magic_number",
    cst_cmxa_magic_number = "cmxa_magic_number",
    cst_cmx_magic_number = "cmx_magic_number",
    cst_cma_magic_number = "cma_magic_number",
    cst_cmo_magic_number = "cmo_magic_number",
    cst_cmi_magic_number = "cmi_magic_number",
    cst_exec_magic_number = "exec_magic_number",
    cst_naked_pointers = "naked_pointers",
    cst_supports_shared_libraries = "supports_shared_libraries",
    cst_windows_unicode = "windows_unicode",
    cst_afl_instrument = "afl_instrument",
    cst_function_sections = "function_sections",
    cst_flat_float_array = "flat_float_array",
    cst_default_safe_string = "default_safe_string",
    cst_safe_string = "safe_string",
    cst_flambda = cst_flambda$1,
    cst_target = "target",
    cst_host = "host",
    cst_systhread_supported = "systhread_supported",
    cst_default_executable_name = "default_executable_name",
    cst_os_type = "os_type",
    cst_ext_dll = "ext_dll",
    cst_ext_lib = "ext_lib",
    cst_ext_asm = "ext_asm",
    cst_ext_obj = "ext_obj",
    cst_ext_exe = "ext_exe",
    cst_with_frame_pointers = "with_frame_pointers",
    cst_asm_cfi_supported = "asm_cfi_supported",
    cst_asm = "asm",
    cst_system = "system",
    cst_word_size = "word_size",
    cst_int_size = "int_size",
    cst_model = "model",
    cst_architecture = "architecture",
    cst_native_pack_linker = "native_pack_linker",
    cst_native_c_libraries = "native_c_libraries",
    cst_bytecomp_c_libraries = "bytecomp_c_libraries",
    cst_native_c_compiler = "native_c_compiler",
    cst_bytecomp_c_compiler = "bytecomp_c_compiler",
    cst_ocamlopt_cppflags = "ocamlopt_cppflags",
    cst_ocamlopt_cflags = "ocamlopt_cflags",
    cst_ocamlc_cppflags = "ocamlc_cppflags",
    cst_ocamlc_cflags = "ocamlc_cflags",
    cst_c_compiler = "c_compiler",
    cst_ccomp_type = "ccomp_type",
    cst_standard_library = "standard_library",
    cst_standard_library_default = "standard_library_default",
    cst_version = "version",
    cst_Shortcut = "Shortcut",
    bm =
      [0,
       [11, "invalid key/value pair ", [3, 0, [11, ", no '=' separator", 0]]],
       "invalid key/value pair %S, no '=' separator"],
    bl =
      [0,
       [11, "invalid character '", [0, [11, "' in key or value", 0]]],
       "invalid character '%c' in key or value"],
    bj =
      [0,
       [11,
        "invalid encoded string ",
        [3, 0, [11, " (trailing '", [12, 37, [11, "')", 0]]]]],
       "invalid encoded string %S (trailing '%%')"],
    bk =
      [0,
       [11,
        "invalid ",
        [12, 37, [11, "-escaped character '", [0, [12, 39, 0]]]]],
       "invalid %%-escaped character '%c'"],
    bq = [0, cst_dynlink_compilerlibs_misc_, 92, 10],
    b3 = [0, 0],
    b1 =
      [0,
       [11,
        "We expected a ",
        [2,
         0,
         [11,
          cst$118,
          [2,
           0,
           [11,
            ") but got a ",
            [2, 0, [11, cst$118, [2, 0, [11, ") instead.", 0]]]]]]]]],
       "We expected a %s (%s) but got a %s (%s) instead."],
    cst_an_older = cst_an_older$1,
    cst_a_newer = cst_a_newer$1,
    b2 =
      [0,
       [11,
        "This seems to be a ",
        [2,
         0,
         [11,
          cst$118,
          [2, 0, [11, ") for ", [2, 0, [11, cst_version_of_OCaml, 0]]]]]]],
       "This seems to be a %s (%s) for %s version of OCaml."],
    b0 = [0, cst_dynlink_compilerlibs_misc_, 1086, 14],
    bZ = [0, [2, 0, [4, 0, [0, 2, 3], 0, 0]], "%s%03d"],
    cst_is_empty = "is empty",
    cst_is_truncated = "is truncated",
    cst_has_a_different_format = "has a different format",
    cst_object_file = "object file",
    bY =
      [0,
       [11,
        "We expected a valid ",
        [2, 0, [11, ", but the file ", [2, 0, [12, 46, 0]]]]],
       "We expected a valid %s, but the file %s."],
    cst_executable = "executable",
    cst_compiled_interface_file = "compiled interface file",
    cst_bytecode_object_file = "bytecode object file",
    cst_bytecode_library = "bytecode library",
    cst_dynamic_native_library = "dynamic native library",
    cst_compiled_typedtree_file = "compiled typedtree file",
    cst_serialized_implementation_ = "serialized implementation AST",
    cst_serialized_interface_AST = "serialized interface AST",
    bW =
      [0,
       [11, "native compilation unit description (", [2, 0, [12, 41, 0]]],
       "native compilation unit description (%s)"],
    bX =
      [0,
       [11, "static native library (", [2, 0, [12, 41, 0]]],
       "static native library (%s)"],
    cst_flambda$0 = cst_flambda$1,
    cst_non_flambda = "non flambda",
    cst_exec = "exec",
    cst_cmi = "cmi",
    cst_cmo = "cmo",
    cst_cma = "cma",
    cst_cmxs = "cmxs",
    cst_cmt = "cmt",
    cst_ast_impl = "ast_impl",
    cst_ast_intf = "ast_intf",
    cst_cmx = "cmx",
    cst_cmxa = "cmxa",
    cst_Caml1999X = cst_Caml1999X$0,
    cst_Caml1999I = cst_Caml1999I$0,
    cst_Caml1999O = cst_Caml1999O$0,
    cst_Caml1999A = cst_Caml1999A$0,
    cst_Caml1999D = cst_Caml1999D$0,
    cst_Caml1999T = cst_Caml1999T$0,
    cst_Caml1999M = cst_Caml1999M$0,
    cst_Caml1999N = cst_Caml1999N$0,
    cst_Caml1999y = cst_Caml1999y$0,
    cst_Caml1999Y = cst_Caml1999Y$0,
    cst_Caml1999z = cst_Caml1999z$0,
    cst_Caml1999Z = cst_Caml1999Z$0,
    bR = [0, 2],
    bS = [0, 7],
    bT = [0, 6],
    bU = [0, 1],
    bV = [0, 3],
    bM = [0, [1, [0, 1]]],
    bN = [0, [0, [0, 1]]],
    bO = [0, [1, [0, 0]]],
    bP = [0, [0, [0, 0]]],
    bQ = [0, 0],
    bL = [0, 4],
    bK = [0, 5],
    bD = [0, [15, [17, 4, 0]], "%a@."],
    bC =
      [0,
       [11, "--debug-prefix-map ", [2, 0, [12, 61, [2, 0, 0]]]],
       "--debug-prefix-map %s=%s"],
    bB =
      [0,
       [11,
        "Invalid value for the environment variable BUILD_PATH_PREFIX_MAP: ",
        [2, 0, 0]],
       "Invalid value for the environment variable BUILD_PATH_PREFIX_MAP: %s"],
    by = [0, [11, "...", [17, [0, cst$119, 0, 0], 0]], "...@,"],
    bz =
      [0,
       [2,
        [1, 1],
        [12, 32, [2, 0, [12, 32, [2, 0, [17, [0, cst$119, 0, 0], 0]]]]]],
       "%*s %s %s@,"],
    bx = [0, [18, [1, [0, [11, cst_v, 0], cst_v]], 0], cst_v$0],
    bA = [0, [17, 0, 0], cst$121],
    bw = [0, 1, 0],
    cst_m = "m",
    cst_1$0 = cst_1$1,
    cst_0$0 = cst_0$2,
    cst_3$0 = cst_3$1,
    cst_4$0 = cst_4$1,
    cst_0 = cst_0$2,
    cst_1 = cst_1$1,
    cst_2 = "2",
    cst_3 = cst_3$1,
    cst_4 = cst_4$1,
    cst_5 = "5",
    cst_6 = "6",
    cst_7 = "7",
    cst_st = "st",
    cst_nd = "nd",
    cst_rd = "rd",
    cst_th = "th",
    bu = [0, [17, 2, 0], "@?"],
    cst_or = " or ",
    bv =
      [0,
       [17,
        3,
        [11,
         "Hint: Did you mean ",
         [2, 0, [2, 0, [2, 0, [12, 63, [17, 2, 0]]]]]]],
       "@\nHint: Did you mean %s%s%s?@?"],
    bt = [0, 7, 0],
    cst_tmp = ".tmp",
    bs = [0, 438],
    cst_Misc_Stdlib_Array_exists2 = "Misc.Stdlib.Array.exists2",
    br =
      [0,
       [18,
        [1, [0, 0, cst$115]],
        [11, "(Some", [17, [0, cst$126, 1, 0], [15, [12, 41, [17, 0, 0]]]]]],
       "@[(Some@ %a)@]"],
    cst_None = cst_None$2,
    cst_split_at = "split_at",
    cst_map2_prefix = "map2_prefix",
    bp = [0, [2, 0, 0], cst_s$1],
    bn = [0, [17, 4, 0], "@."],
    bo = [0, [17, 2, [11, ">> Fatal error: ", 0]], "@?>> Fatal error: "],
    cst_Dynlink_compilerlibs_Misc_ = "Dynlink_compilerlibs.Misc.Fatal_error",
    cst_Dynlink_compilerlibs_Misc_$0 = "Dynlink_compilerlibs.Misc.Color.Style",
    bE = [0, 5, [0, 6, [0, 7, 0]]],
    bJ = [0, 0, [0, 1, [0, 2, [0, 3, 0]]]],
    cd = [0, [15, 0], cst_a],
    cb = [0, [17, [0, cst$126, 1, 0], [15, 0]], "@ %a"],
    cc =
      [0,
       [18,
        [1, [0, [11, cst_1$2, 0], cst_1$2]],
        [12,
         123,
         [18,
          [1, [0, 0, cst$115]],
          [15, [17, [0, cst$126, 1, 0], [17, 0, [12, 125, [17, 0, 0]]]]]]]],
       cst_1_a],
    b$ = [0, [15, [12, 32, 0]], "%a "],
    b_ = [0, [11, cst$127, 0], cst$127],
    ca = [0, [12, 41, 0], cst$128],
    b8 =
      [0,
       [17,
        [0, cst$126, 1, 0],
        [12,
         40,
         [18,
          [1, [0, 0, cst$115]],
          [15, [17, [0, cst$126, 1, 0], [15, [17, 0, [12, 41, 0]]]]]]]],
       "@ (@[%a@ %a@])"],
    b9 =
      [0,
       [18,
        [1, [0, [11, cst_1$2, 0], cst_1$2]],
        [12,
         123,
         [18,
          [1, [0, 0, cst$115]],
          [15, [17, [0, cst$126, 1, 0], [17, 0, [12, 125, [17, 0, 0]]]]]]]],
       cst_1_a],
    b6 =
      [0,
       [11,
        cst_Map_disjoint_union,
        [15, [11, " => ", [15, [11, " <> ", [15, 0]]]]]],
       "Map.disjoint_union %a => %a <> %a"],
    b7 = [0, [11, cst_Map_disjoint_union, [15, 0]], "Map.disjoint_union %a"],
    b5 =
      [0,
       [11,
        cst$118,
        [15, [11, cst$124, [17, [0, cst$126, 1, 0], [15, [12, 41, 0]]]]]],
       " (%a, @ %a)"],
    b4 =
      [0, [11, cst$118, [15, [11, cst$124, [15, [12, 41, 0]]]]], " (%a, %a)"],
    ci = [0, [8, [0, 0, 0], 0, 0, 0], "%f"],
    ch =
      [0,
       [11,
        "Int16.of_int64_exn: ",
        [7, 0, 0, 0, [11, cst_is_out_of_range, 0]]],
       "Int16.of_int64_exn: %Ld is out of range"],
    cg =
      [0,
       [11, "Int16.of_int_exn: ", [4, 0, 0, 0, [11, cst_is_out_of_range, 0]]],
       "Int16.of_int_exn: %d is out of range"],
    cf =
      [0,
       [11, "Int8.of_int_exn: ", [4, 0, 0, 0, [11, cst_is_out_of_range, 0]]],
       "Int8.of_int_exn: %d is out of range"],
    ce = [0, [4, 3, 0, 0, 0], "%i"],
    ck = [0, [2, 0, [11, cst$117, [2, 0, 0]]], "%s: %s"],
    cj = [0, "dynlink_compilerlibs/arg_helper.ml", 78, 12],
    cst_Missing_key_in_argument_sp = "Missing key in argument specification",
    cst_Dynlink_compilerlibs_Arg_h =
      "Dynlink_compilerlibs.Arg_helper.Make(S).Parse_failure",
    cH =
      [0,
       [11,
        cst_Usage,
        [2,
         0,
         [11,
          " <options> <files>\nTry '",
          [2, 0, [11, " --help' for more information.", 0]]]]],
       "Usage: %s <options> <files>\nTry '%s --help' for more information."],
    cE =
      [0,
       [11,
        "Warning: compiler argument ",
        [2, 0, [11, " is already defined:\n", 0]]],
       "Warning: compiler argument %s is already defined:\n"],
    cF =
      [0,
       [11, "   First definition: ", [2, 0, [12, 10, 0]]],
       "   First definition: %s\n"],
    cG =
      [0,
       [11, "   New definition: ", [2, 0, [12, 10, 0]]],
       "   New definition: %s\n"],
    cD = [0, 3],
    cst_Not_supported = "Not supported",
    cz = [0, 1],
    cA = [0, 2],
    cB = [0, 0],
    cC = [0, 3],
    cst_parsing = cst_parsing$0,
    cst_typing = cst_typing$0,
    cst_scheduling = cst_scheduling$0,
    cst_emit = cst_emit$0,
    cst_cmir = ".cmir-",
    cx = [0, 1],
    cy = [0, 0],
    cst_short = cst_short$0,
    cst_contextual = cst_contextual$0,
    cu = [0, 2],
    cv = [0, 0],
    cw = [0, 1],
    cst_auto = cst_auto$0,
    cst_always = cst_always$0,
    cst_never = cst_never$0,
    ct = [0, "dynlink_compilerlibs/clflags.ml", 361, 2],
    cm = [0, 1],
    cn = [0, 25.],
    co = [0, 2],
    cp = [0, 50.],
    cq = [0, 1],
    cr = [0, 3],
    cs = [0, 0.],
    cst_OCAML_COLOR = "OCAML_COLOR",
    cst_expected_auto_always_or_ne = 'expected "auto", "always" or "never"',
    cst_OCAML_ERROR_STYLE = "OCAML_ERROR_STYLE",
    cst_expected_contextual_or_sho = 'expected "contextual" or "short"',
    cst_other = cst_other$0,
    cL = [0, [2, 0, [2, 0, [12, 32, [2, 0, [17, 3, 0]]]]], "%s%s %s@\n"],
    cJ = [0, [8, [0, 0, 0], 0, 1, 0], "%.*f"],
    cK = [0, [2, [1, 1], 0], "%*s"],
    cst_s = cst_s$2,
    cI = [0, [8, [0, 0, 0], [1, 2], [0, 3], 0], "%0*.03f"],
    cst_GB = "GB",
    cst_MB = "MB",
    cst_kB = "kB",
    cst_B = "B",
    cN =
      [0,
       [11,
        " Print performance information for each pass\n    The columns are: ",
        [2, 0, [12, 46, 0]]],
       " Print performance information for each pass\n    The columns are: %s."],
    cst_Dynlink_compilerlibs_Consi =
      "Dynlink_compilerlibs.Consistbl.Make(Module_name).Inconsistency",
    cst_Dynlink_compilerlibs_Consi$0 =
      "Dynlink_compilerlibs.Consistbl.Make(Module_name).Not_available",
    cst_4m = "\x1b[4m",
    cst_0m = "\x1b[0m",
    cP = [0, [11, cst$123, [4, 0, 0, 0, [12, 66, [10, 0]]]], "\x1b[%dB%!"],
    cO = [0, [11, cst$123, [4, 0, 0, 0, [12, 65, [10, 0]]]], "\x1b[%dA%!"],
    dE =
      [0,
       [4, 3, [0, 1, 3], 0, [2, 0, [12, 32, [2, 0, [12, 10, 0]]]]],
       "%3i%s %s\n"],
    cst_A_all_warnings = "  A all warnings",
    dF =
      [0,
       [11, cst$129, [0, [11, " warnings ", [2, 0, [11, cst$131, 0]]]]],
       "  %c warnings %s.\n"],
    dG =
      [0,
       [11,
        cst$129,
        [0, [11, " Alias for warning ", [4, 3, 0, 0, [11, cst$131, 0]]]]],
       "  %c Alias for warning %i.\n"],
    cst_Expected_signature = "Expected signature",
    cst_Definition = "Definition",
    dD = [0, [4, 0, 0, 0, [11, cst$130, [2, 0, [12, 93, 0]]]], "%d [%s]"],
    cst_this_is_the_start_of_a_com =
      "this `(*' is the start of a comment.\nHint: Did you forget spaces when writing the infix operator `( * )'?",
    cst_this_is_not_the_end_of_a_c = "this is not the end of a comment.",
    cst_this_function_application_ =
      "this function application is partial,\nmaybe some arguments are missing.",
    cst_this_expression_should_hav = "this expression should have type unit.",
    cst_this_match_case_is_unused = "this match case is unused.",
    cst_this_sub_pattern_is_unused = "this sub-pattern is unused.",
    cst_illegal_backslash_escape_i = "illegal backslash escape in string.",
    cst_this_optional_argument_can =
      "this optional argument cannot be erased.",
    cst_this_argument_will_not_be_ =
      "this argument will not be used by the function.",
    cst_this_statement_never_retur =
      "this statement never returns (or has an unsound type.)",
    cst_all_the_fields_are_explici =
      "all the fields are explicitly listed in this record:\nthe 'with' clause is useless.",
    cst_this_pattern_matching_is_n =
      "this pattern-matching is not exhaustive.\nAll clauses in this pattern-matching are guarded.",
    cst_wildcard_pattern_given_as_ =
      "wildcard pattern given as argument to a constant constructor",
    cst_unescaped_end_of_line_in_a =
      "unescaped end-of-line in a string constant (non-portable code)",
    cst_unused_rec_flag = "unused rec flag.",
    df =
      [0,
       [11,
        "Code should not depend on the actual values of\nthis constructor's arguments. They are only for information\nand may change in future versions. ",
        [16, 0]],
       "Code should not depend on the actual values of\nthis constructor's arguments. They are only for information\nand may change in future versions. %t"],
    cst_this_match_case_is_unreach =
      "this match case is unreachable.\nConsider replacing it with a refutation case '<pat> -> .'",
    cst_A_potential_assignment_to_ =
      "A potential assignment to a non-mutable value was detected \nin this source file.  Such assignments may generate incorrect code \nwhen using Flambda.",
    cst_Type_constraints_do_not_ap =
      "Type constraints do not apply to GADT cases of variant types.",
    cst_option_unsafe_used_with_a_ =
      "option -unsafe used with a preprocessor returning a syntax tree",
    cst_This_pattern_depends_on_mu =
      "This pattern depends on mutable state.\nIt prevents the remaining arguments from being uncurried, which will cause additional closure allocations.",
    cst_Cannot_find_interface_file = "Cannot find interface file.",
    cst_This_function_is_marked_ta =
      "This function is marked @tail_mod_cons\nbut is never applied in TMC position.",
    cst_This_call_is_in_tail_modul =
      "This call\nis in tail-modulo-cons positionin a TMC function,\nbut the function called is not itself specialized for TMC,\nso the call will not be transformed into a tail call.\nPlease either mark the called function with the [@tail_mod_cons]\nattribute, or mark this call with the [@tailcall false] attribute\nto make its non-tailness explicit.",
    cst_this_pattern_matching_is_f$0 = "this pattern-matching is fragile.",
    cst_this_pattern_matching_is_f =
      "this pattern-matching is fragile.\nIt will remain exhaustive when constructors are added to type ",
    cst_were_omitted_in_the_applic =
      " were omitted in the application of this function.",
    cst_labels = "labels ",
    cst_was_omitted_in_the_applica =
      " was omitted in the application of this function.",
    cst_label = "label ",
    dg = [0, cst_dynlink_compilerlibs_warni, 804, 25],
    cst_the_following_methods_are_ =
      "the following methods are overridden by the class",
    cst_is_overridden = cst_is_overridden$1,
    cst_the_method = "the method ",
    dh = [0, cst_dynlink_compilerlibs_warni, 816, 26],
    cst_this_pattern_matching_is_n$1 =
      "this pattern-matching is not exhaustive.",
    cst_this_pattern_matching_is_n$0 =
      "this pattern-matching is not exhaustive.\nHere is an example of a case that is not matched:\n",
    cst_Either_bind_these_labels_e =
      "\nEither bind these labels explicitly or add '; _' to the pattern.",
    cst_the_following_labels_are_n =
      "the following labels are not bound in this record pattern:\n",
    cst_the_following_instance_var =
      "the following instance variables are overridden by the class",
    cst_is_overridden$0 = cst_is_overridden$1,
    cst_the_instance_variable = "the instance variable ",
    di = [0, cst_dynlink_compilerlibs_warni, 834, 37],
    cst_the_following_private_meth =
      "the following private methods were made public implicitly:\n ",
    cst_is_not_declared = " is not declared.",
    cst_the_virtual_method = "the virtual method ",
    cst_is_not_principal = " is not principal.",
    cst_without_principality = " without principality.",
    cst_is_not_a_valid_module_name = '" is not a valid module name.',
    cst_bad_source_file_name = 'bad source file name: "',
    dj =
      [0,
       [11,
        cst_the,
        [2,
         0,
         [12,
          32,
          [2,
           0,
           [11,
            " is defined in both types ",
            [2, 0, [11, cst_and, [2, 0, [12, 46, 0]]]]]]]]],
       "the %s %s is defined in both types %s and %s."],
    dk =
      [0,
       [11,
        "files ",
        [2,
         0,
         [11,
          cst_and,
          [2, 0, [11, " both define a module named ", [2, 0, 0]]]]]],
       "files %s and %s both define a module named %s"],
    cst_unused_value = "unused value ",
    cst_unused_open = "unused open ",
    cst_unused_type = "unused type ",
    cst_unused_for_loop_index = "unused for-loop index ",
    cst_unused_ancestor_variable = "unused ancestor variable ",
    cst_unused_constructor = "unused constructor ",
    cst_is_never_used_to_build_val = cst_is_never_used_to_build_val$3,
    cst_constructor = cst_constructor$1,
    cst_is_never_used_to_build_val$0 =
      " is never used to build values.\nIts type is exported as a private type.",
    cst_constructor$0 = cst_constructor$1,
    cst_exception = "exception",
    cst_extension_constructor = cst_extension_constructor$2,
    cst_unused = "unused ",
    cst_is_never_used_to_build_val$1 = cst_is_never_used_to_build_val$3,
    cst_is_never_used_to_build_val$2 =
      " is never used to build values.\nIt is exported or rebound as a private extension.",
    cst_It_is_not_visible_in_the_c =
      ".\nIt is not visible in the current scope, and will not \nbe selected if the type becomes unknown.",
    cst_was_selected_from_type = " was selected from type ",
    cst_They_will_not_be_selected_ =
      ".\nThey will not be selected if the type becomes unknown.",
    cst_contains_fields_that_are_n =
      " contains fields that are \nnot visible in the current scope: ",
    cst_this_record_of_type = "this record of type ",
    dl = [0, cst_dynlink_compilerlibs_warni, 903, 39],
    cst_The_first_one_was_selected$0 = cst_The_first_one_was_selected$1,
    cst_belongs_to_several_types = " belongs to several types: ",
    cst_The_first_one_was_selected = cst_The_first_one_was_selected$1,
    cst_these_field_labels_belong_ =
      "these field labels belong to several types: ",
    dm = [0, cst_dynlink_compilerlibs_warni, 913, 40],
    cst_relies_on_type_directed_di =
      " relies on type-directed disambiguation,\nit will not compile with OCaml 4.00 or earlier.",
    cst_this_use_of = "this use of ",
    cst_is_not_optional = " is not optional.",
    cst_the_label = "the label ",
    dn =
      [0,
       [11,
        cst_this_open_statement_shadow,
        [2, 0, [11, " identifier ", [2, 0, [11, cst_which_is_later_used, 0]]]]],
       "this open statement shadows the %s identifier %s (which is later used)"],
    dp =
      [0,
       [11,
        cst_this_open_statement_shadow,
        [2, 0, [12, 32, [2, 0, [11, cst_which_is_later_used, 0]]]]],
       "this open statement shadows the %s %s (which is later used)"],
    dq =
      [0,
       [11, "illegal environment variable ", [2, 0, [11, " : ", [2, 0, 0]]]],
       "illegal environment variable %s : %s"],
    dr =
      [0,
       [11,
        "illegal payload for attribute '",
        [2, 0, [11, "'.\n", [2, 0, 0]]]],
       "illegal payload for attribute '%s'.\n%s"],
    cst_s$0 = cst_s$2,
    ds =
      [0,
       [11,
        "implicit elimination of optional argument",
        [2, 0, [12, 32, [2, 0, 0]]]],
       "implicit elimination of optional argument%s %s"],
    dt =
      [0,
       [11,
        "no valid cmi file was found in path for module ",
        [2, 0, [11, ". ", [2, 0, 0]]]],
       "no valid cmi file was found in path for module %s. %s"],
    cst_no_cmi_file_was_found_in_p =
      "no cmi file was found in path for module ",
    cst_unattached_documentation_c =
      "unattached documentation comment (ignored)",
    cst_ambiguous_documentation_co = "ambiguous documentation comment",
    cst_tailcall = "tailcall",
    cst_non_tailcall = "non-tailcall",
    du = [0, [11, "expected ", [2, 0, 0]], "expected %s"],
    dv =
      [0,
       [11,
        cst_the,
        [3, 0, [11, " attribute cannot appear in this context", 0]]],
       "the %S attribute cannot appear in this context"],
    dw =
      [0,
       [11,
        cst_the,
        [3,
         0,
         [11, " attribute is used more than once on this expression", 0]]],
       "the %S attribute is used more than once on this expression"],
    dx = [0, [11, "Cannot inline: ", [2, 0, 0]], "Cannot inline: %s"],
    cst_appear = " appear ",
    cst_variables = "variables ",
    cst_appears = " appears ",
    cst_variable = "variable ",
    dz = [0, cst_dynlink_compilerlibs_warni, 975, 16],
    dy =
      [0,
       [11,
        "Ambiguous or-pattern variables under guard;\n",
        [2,
         0,
         [11,
          ".\nOnly the first match will be used to evaluate the guard expression.\n",
          [16, 0]]]],
       "Ambiguous or-pattern variables under guard;\n%s.\nOnly the first match will be used to evaluate the guard expression.\n%t"],
    dA =
      [0,
       [11,
        "no cmx file was found in path for module ",
        [2, 0, [11, ", and its interface was not compiled with -opaque", 0]]],
       "no cmx file was found in path for module %s, and its interface was not compiled with -opaque"],
    cst_unused_module = "unused module ",
    dB =
      [0,
       [11,
        "This primitive declaration uses type ",
        [2,
         0,
         [11,
          ", whose representation\nmay be either boxed or unboxed. Without an annotation to indicate\nwhich representation is intended, the boxed representation has been\nselected by default. This default choice may change in future\nversions of the compiler, breaking the primitive implementation.\nYou should explicitly annotate the declaration of ",
          [2,
           0,
           [11,
            "\nwith [",
            [17,
             5,
             [11,
              "boxed] or [",
              [17,
               5,
               [11,
                "unboxed], so that its external interface\nremains stable in the future.",
                0]]]]]]]]],
       "This primitive declaration uses type %s, whose representation\nmay be either boxed or unboxed. Without an annotation to indicate\nwhich representation is intended, the boxed representation has been\nselected by default. This default choice may change in future\nversions of the compiler, breaking the primitive implementation.\nYou should explicitly annotate the declaration of %s\nwith [@@boxed] or [@@unboxed], so that its external interface\nremains stable in the future."],
    cst_Beware_that_this_warning_i =
      "\nBeware that this warning is purely informational and will not catch\nall instances of erroneous printed interface.",
    cst_The_printed_interface_diff =
      "The printed interface differs from the inferred interface.\nThe inferred interface contained items which could not be printed\nproperly due to name collisions between identifiers.",
    dC =
      [0,
       [11,
        "This type declaration is defining a new '()' constructor\nwhich shadows the existing one.\nHint: Did you mean 'type ",
        [2, 0, [11, " = unit'?", 0]]],
       "This type declaration is defining a new '()' constructor\nwhich shadows the existing one.\nHint: Did you mean 'type %s = unit'?"],
    cst_unused_open$0 = "unused open! ",
    cst_unused_functor_parameter = "unused functor parameter ",
    cst_unused_record_field = "unused record field ",
    cst_is_never_read_However_this =
      " is never read.\n(However, this field is used to build or mutate values.)",
    cst_record_field = "record field ",
    cst_is_never_mutated = " is never mutated.",
    cst_mutable_record_field = "mutable record field ",
    cst_unused_variable = "unused variable ",
    de =
      [0,
       [11,
        "(See manual section ",
        [4, 0, 0, 0, [12, 46, [4, 0, 0, 0, [12, 41, 0]]]]],
       "(See manual section %d.%d)"],
    cst_deprecated = cst_deprecated$5,
    cst_deprecated$0 = cst_deprecated$5,
    cst_deprecated$1 = cst_deprecated$5,
    cst_deprecated$2 = cst_deprecated$5,
    cst_Ill_formed_list_of_warning = "Ill-formed list of warnings",
    dc =
      [0,
       [17,
        [0, cst$126, 1, 0],
        [18,
         [1, [0, 0, cst$115]],
         [11,
          "Hint: Did you make a spelling mistake when using a mnemonic name?",
          [17, 0, 0]]]],
       "@ @[Hint: Did you make a spelling mistake when using a mnemonic name?@]"],
    c_ = [0, [15, [0, 0]], "%a%c"],
    c$ = [0, [15, [4, 0, 0, 0, 0]], "%a%d"],
    da = [0, [15, [4, 0, 0, 0, [11, "..", [4, 0, 0, 0, 0]]]], "%a%d..%d"],
    c7 = [0, [12, 43, 0], "+"],
    c8 = [0, [12, 45, 0], cst$125],
    c9 = [0, [12, 64, 0], "@"],
    c6 = [0, [0, [0, 0]], "%c%c"],
    db = [0, 0, 0],
    cst_none = cst_none$3,
    dd =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [18,
         [1, [0, 0, cst$115]],
         [11,
          "Setting a warning with a sequence of lowercase or uppercase letters,",
          [17,
           [0, cst$126, 1, 0],
           [11,
            "like '",
            [15,
             [11,
              "',",
              [17,
               [0, cst$126, 1, 0],
               [11, "is deprecated.", [17, 0, partial$0]]]]]]]]]],
       "@[<v>@[Setting a warning with a sequence of lowercase or uppercase letters,@ like '%a',@ is deprecated.@]@ @[Use the equivalent signed form:@ %t.@]@ @[Hint: Enabling or disabling a warning by its mnemonic name requires a + or - prefix.@]%t@?@]"],
    cst_ocaml_deprecated_cli = "ocaml_deprecated_cli",
    cst_Ill_formed_list_of_alert_s = cst_Ill_formed_list_of_alert_s$2,
    cst_Ill_formed_list_of_alert_s$0 = cst_Ill_formed_list_of_alert_s$2,
    cst_Ill_formed_list_of_alert_s$1 = cst_Ill_formed_list_of_alert_s$2,
    cQ = [0, cst_dynlink_compilerlibs_warni, 491, 9],
    cR = [0, 1, [0, 2, 0]],
    cS = [0, 3, 0],
    cT = [0, 4, 0],
    cU = [0, 5, 0],
    cV =
      [0,
       32,
       [0, 33, [0, 34, [0, 35, [0, 36, [0, 37, [0, 38, [0, 39, 0]]]]]]]],
    cW = [0, 6, 0],
    cX = [0, 7, 0],
    cY = [0, 8, 0],
    cZ = [0, 9, 0],
    c0 = [0, 10, 0],
    c1 = [0, 11, [0, 12, 0]],
    c2 = [0, 13, 0],
    c3 =
      caml_list_of_js_array([14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30]),
    c4 = [0, 26, 0],
    c5 = [0, 27, 0],
    cst_Dynlink_compilerlibs_Warni = "Dynlink_compilerlibs.Warnings.Errors",
    dK = [0, cst_dynlink_compilerlibs_local, 68, 2],
    dJ = [0, cst_dynlink_compilerlibs_local, 47, 2],
    dI = [0, cst_dynlink_compilerlibs_local, 41, 2],
    dH = [0, cst_dynlink_compilerlibs_local, 32, 2],
    dQ = [0, cst_dynlink_compilerlibs_load_, 120, 2],
    dP = [0, cst_dynlink_compilerlibs_load_, 113, 2],
    dO = [0, cst_dynlink_compilerlibs_load_, 106, 2],
    dN = [0, cst_dynlink_compilerlibs_load_, 87, 2],
    dM = [0, cst_dynlink_compilerlibs_load_, 75, 2],
    dL = [0, cst_dynlink_compilerlibs_load_, 50, 2],
    en = [0, [11, "I/O error: ", [2, 0, 0]], "I/O error: %s"],
    em = [0, 301815898],
    ej = [0, [15, [12, 58, [17, [0, cst$126, 1, 0], 0]]], "%a:@ "],
    ei =
      [0,
       [18, [1, [0, 0, cst$115]], [15, [11, cst$129, [15, [17, 0, 0]]]]],
       "@[%a  %a@]"],
    eh = [0, [17, [0, cst$119, 0, 0], [15, 0]], "@,%a"],
    ec =
      [0,
       [18,
        [0, [0, [11, cst_error$0, 0], cst_error$0]],
        [11, cst_Error, [17, 1, 0]]],
       "@{<error>Error@}"],
    ed =
      [0,
       [18,
        [0, [0, [11, cst_warning$0, 0], cst_warning$0]],
        [11, "Warning", [17, 1, [12, 32, [2, 0, 0]]]]],
       "@{<warning>Warning@} %s"],
    ee =
      [0,
       [18,
        [0, [0, [11, cst_error$0, 0], cst_error$0]],
        [11, cst_Error, [17, 1, [11, " (warning ", [2, 0, [12, 41, 0]]]]]],
       "@{<error>Error@} (warning %s)"],
    ef =
      [0,
       [18,
        [0, [0, [11, cst_warning$0, 0], cst_warning$0]],
        [11, "Alert", [17, 1, [12, 32, [2, 0, 0]]]]],
       "@{<warning>Alert@} %s"],
    eg =
      [0,
       [18,
        [0, [0, [11, cst_error$0, 0], cst_error$0]],
        [11, cst_Error, [17, 1, [11, " (alert ", [2, 0, [12, 41, 0]]]]]],
       "@{<error>Error@} (alert %s)"],
    eb =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [15,
         [15, [15, [11, cst$117, [15, [15, [15, [15, [17, 0, partial$1]]]]]]]]]],
       "@[<v>%a%a%a: %a%a%a%a@]@."],
    ea = [0, [18, [1, [0, 0, cst$115]], [16, [17, 0, 0]]], "@[%t@]"],
    d$ =
      [0,
       [18,
        [1, [0, [11, cst_v, 0], cst_v]],
        [15, [12, 58, [17, [0, cst$126, 1, 0], [15, [17, 0, 0]]]]]],
       "@[<v>%a:@ %a@]"],
    d8 =
      [0, [18, [0, [0, [12, 60, [2, 0, [12, 62, 0]]], "<%s>"]], 0], "@{<%s>"],
    d9 = [0, [17, 1, 0], cst$134],
    d3 = [0, [18, [1, [0, [11, cst_v, 0], cst_v]], 0], cst_v$0],
    d6 =
      [0,
       [2, 0, [11, " | ", [2, 0, [17, [0, cst$119, 0, 0], 0]]]],
       "%s | %s@,"],
    d7 = [0, [2, [1, 1], [11, "   ", 0]], "%*s   "],
    d_ = [0, [17, 1, [17, [0, cst$119, 0, 0], 0]], "@}@,"],
    d4 = [0, cst$120],
    d5 = [0, [17, 0, 0], cst$121],
    d2 = [0, 0, 0, 1],
    d0 = [0, cst_dynlink_compilerlibs_locat, 286, 26],
    dZ = [0, 867153157, 0],
    d1 = [0, cst_dynlink_compilerlibs_locat, 290, 4],
    dY = [0, [12, 44, [17, [0, cst$126, 1, 0], 0]], ",@ "],
    dR = [0, [11, cst$124, 0], cst$124],
    dS = [0, [18, [0, [0, [11, cst_loc, 0], cst_loc]], 0], "@{<loc>"],
    cst_file = "file",
    dT = [0, [2, 0, [11, ' "', [15, [12, 34, 0]]]], '%s "%a"'],
    cst_line = "line",
    dU = [0, [2, 0, [12, 32, [4, 3, 0, 0, 0]]], "%s %i"],
    cst_lines = "lines",
    dX =
      [0,
       [2, 0, [12, 32, [4, 3, 0, 0, [12, 45, [4, 3, 0, 0, 0]]]]],
       cst_s_i_i],
    cst_characters = "characters",
    dV =
      [0,
       [2, 0, [12, 32, [4, 3, 0, 0, [12, 45, [4, 3, 0, 0, 0]]]]],
       cst_s_i_i],
    dW = [0, [17, 1, 0], cst$134],
    cst_none$0 = cst_none$3,
    cst_none$1 = cst_none$3,
    cst_Dynlink_compilerlibs_Locat = "Dynlink_compilerlibs.Location.Error",
    cst_Longident_flat = "Longident.flat",
    eo = [0, cst$115],
    cst_Longident_last = "Longident.last",
    er = [33, 1],
    es = [33, 0],
    ep = [33, 1],
    cst_ocaml_doc = cst_ocaml_doc$0,
    cst_ocaml_text = cst_ocaml_text$0,
    cst_Dynlink_compilerlibs_Synta = "Dynlink_compilerlibs.Syntaxerr.Error",
    cst_Dynlink_compilerlibs_Synta$0 =
      "Dynlink_compilerlibs.Syntaxerr.Escape_error",
    eu = [0, 0],
    et = [0, 0],
    eE =
      [0,
       [11,
        cst_Usage,
        [2, 0, [11, " [extra_args] <infile> <outfile>\n", [10, 0]]]],
       "Usage: %s [extra_args] <infile> <outfile>\n%!"],
    cst_Ast_mapper_OCaml_version_m =
      "Ast_mapper: OCaml version mismatch or malformed input",
    eD = [0, 0],
    cst_ocaml_error$1 = cst_ocaml_error$2,
    ex =
      [0,
       [11,
        cst_Internal_error_invalid,
        [17,
         5,
         [17,
          [2, 111],
          [11, cst_caml_ppx_context, [2, 0, [11, " }] string syntax", 0]]]]]],
       "Internal error: invalid [@@@ocaml.ppx.context { %s }] string syntax"],
    ey =
      [0,
       [11,
        cst_Internal_error_invalid,
        [17,
         5,
         [17,
          [2, 111],
          [11, cst_caml_ppx_context, [2, 0, [11, " }] bool syntax", 0]]]]]],
       "Internal error: invalid [@@@ocaml.ppx.context { %s }] bool syntax"],
    ez =
      [0,
       [11,
        cst_Internal_error_invalid,
        [17,
         5,
         [17,
          [2, 111],
          [11, cst_caml_ppx_context, [2, 0, [11, " }] list syntax", 0]]]]]],
       "Internal error: invalid [@@@ocaml.ppx.context { %s }] list syntax"],
    eA =
      [0,
       [11,
        cst_Internal_error_invalid,
        [17,
         5,
         [17,
          [2, 111],
          [11, cst_caml_ppx_context, [2, 0, [11, " }] pair syntax", 0]]]]]],
       "Internal error: invalid [@@@ocaml.ppx.context { %s }] pair syntax"],
    eB =
      [0,
       [11,
        cst_Internal_error_invalid,
        [17,
         5,
         [17,
          [2, 111],
          [11, cst_caml_ppx_context, [2, 0, [11, " }] option syntax", 0]]]]]],
       "Internal error: invalid [@@@ocaml.ppx.context { %s }] option syntax"],
    eC =
      [0,
       [11, cst_Internal_error_vmthreads_n, 0],
       cst_Internal_error_vmthreads_n],
    ew =
      [0,
       [11,
        cst_Internal_error_invalid,
        [17, 5, [17, [2, 111], [11, "caml.ppx.context] syntax", 0]]]],
       "Internal error: invalid [@@@ocaml.ppx.context] syntax"],
    cst_unsafe_string = cst_unsafe_string$0,
    cst_unboxed_types = cst_unboxed_types$0,
    cst_transparent_modules = cst_transparent_modules$0,
    cst_principal = cst_principal$0,
    cst_recursive_types = cst_recursive_types$0,
    cst_use_vmthreads = cst_use_vmthreads$0,
    cst_use_threads = cst_use_threads$0,
    cst_debug = cst_debug$0,
    cst_for_package = cst_for_package$0,
    cst_open_modules = cst_open_modules$0,
    cst_load_path = cst_load_path$0,
    cst_include_dirs = cst_include_dirs$0,
    cst_tool_name = cst_tool_name$0,
    cst_ocaml_ppx_context = cst_ocaml_ppx_context$0,
    cst_cookies = cst_cookies$0,
    cst_Some = cst_Some$1,
    cst_None$0 = cst_None$2,
    cst_true = cst_true$1,
    cst_false = cst_false$1,
    cst_ocaml_ppwarning = cst_ocaml_ppwarning$0,
    cst_ocaml_error = cst_ocaml_error$2,
    ev = [0, [16, 0], "%t"],
    cst_extension_of_error_expecte =
      "extension_of_error: expected kind Report_error",
    cst_ocaml_error$0 = cst_ocaml_error$2,
    cst_none$2 = cst_none$3,
    eF =
      [0,
       [11, "Too many `", [2, 0, [11, "' attributes", 0]]],
       "Too many `%s' attributes"],
    eG =
      [0,
       [11, "Attribute `", [2, 0, [11, "' does not accept a payload", 0]]],
       "Attribute `%s' does not accept a payload"],
    cst_Dynlink_compilerlibs_Attr_ = "Dynlink_compilerlibs.Attr_helper.Error",
    eT = [0, "ocaml.boxed", [0, "boxed", 0]],
    eS = [0, "ocaml.unboxed", [0, cst_unboxed, 0]],
    cst_The_alert_name_all_is_rese = "The alert name 'all' is reserved",
    cst_Invalid_payload = "Invalid payload",
    cst_A_single_string_literal_is = "A single string literal is expected",
    eN = [0, [11, cst_mutating_field, [2, 0, 0]], cst_mutating_field_s],
    eM = [0, [11, cst_mutating_field, [2, 0, 0]], cst_mutating_field_s],
    cst_deprecated$4 = cst_deprecated$5,
    eJ =
      [0,
       [11, cst_Invalid_syntax_for_sub_mes, [2, 0, [11, cst$138, 0]]],
       cst_Invalid_syntax_for_sub_mes$0],
    eI =
      [0,
       [11, cst_Uninterpreted_extension, [2, 0, [11, cst$138, 0]]],
       cst_Uninterpreted_extension_s],
    eH =
      [0,
       [11, cst_Invalid_syntax_for_sub_mes, [2, 0, [11, cst$138, 0]]],
       cst_Invalid_syntax_for_sub_mes$0],
    eK =
      [0,
       [11, cst_Uninterpreted_extension, [2, 0, [11, cst$138, 0]]],
       cst_Uninterpreted_extension_s],
    eL =
      [0,
       [11, "Invalid syntax for extension '", [2, 0, [11, cst$138, 0]]],
       "Invalid syntax for extension '%s'."],
    cst_Map_remove_min_elt = "Map.remove_min_elt",
    e5 =
      [0,
       [11, "Ident.make_key_generator () ", [2, 0, 0]],
       "Ident.make_key_generator () %s"],
    e3 = [0, cst_dynlink_compilerlibs_ident, 188, 11],
    e4 = [0, cst_dynlink_compilerlibs_ident, 197, 11],
    eV = [0, [12, 47, [4, 3, 0, 0, 0]], cst_i],
    eW = [0, [2, 0, [2, 0, 0]], "%s%s"],
    eX = [0, [12, 91, [4, 3, 0, 0, [12, 93, 0]]], "[%i]"],
    eY = [0, [12, 47, [4, 3, 0, 0, 0]], cst_i],
    eZ = [0, [2, 0, [2, 0, [2, 0, 0]]], "%s%s%s"],
    e0 = [0, [2, 0, [12, 33, 0]], "%s!"],
    e1 = [0, [12, 47, [4, 3, 0, 0, 0]], cst_i],
    e2 = [0, [2, 0, [2, 0, [12, 33, 0]]], "%s%s!"],
    cst_0$1 = "_0",
    eU = [0, [11, "Ident.rename ", [2, 0, 0]], "Ident.rename %s"],
    e6 = [0, [15, [12, 46, [2, 0, 0]]], "%a.%s"],
    e7 = [0, [15, [12, 40, [15, [12, 41, 0]]]], "%a(%a)"],
    e8 = [0, cst_dynlink_compilerlibs_path_, 77, 16],
    e9 = [0, cst_dynlink_compilerlibs_path_, 101, 2],
    e$ = [0, "dynlink_compilerlibs/primitive.ml", 152, 4],
    fa =
      [0,
       [11,
        'Cannot use "float" in conjunction with [',
        [12, 64, [11, "unboxed]/[", [12, 64, [11, "untagged].", 0]]]]],
       'Cannot use "float" in conjunction with [%@unboxed]/[%@untagged].'],
    fb =
      [0,
       [11,
        'Cannot use "noalloc" in conjunction with [',
        [12, 64, [12, 64, [11, "noalloc].", 0]]]],
       'Cannot use "noalloc" in conjunction with [%@%@noalloc].'],
    fc =
      [0,
       [12,
        91,
        [17,
         [2, 84],
         [11,
          "he native code version of the primitive is mandatory",
          [17,
           [0, cst$126, 1, 0],
           [11,
            "when attributes [",
            [12,
             64,
             [11,
              "untagged] or [",
              [12, 64, [11, "unboxed] are present.", [17, 0, 0]]]]]]]]]],
       "[@The native code version of the primitive is mandatory@ when attributes [%@untagged] or [%@unboxed] are present.@]"],
    cst_Primitive_parse_declaratio = "Primitive.parse_declaration",
    e_ = [0, cst_noalloc, [0, "ocaml.noalloc", 0]],
    cst_Dynlink_compilerlibs_Primi = "Dynlink_compilerlibs.Primitive.Error",
    ff = [1, 1],
    fe = [1, 0],
    fd = [0, 0],
    cst_shape_var = "shape-var",
    fq =
      [0,
       [18,
        [1, [0, [11, cst_hv_4, 0], cst_hv_4]],
        [15,
         [11,
          " ->",
          [17,
           [0, cst$126, 1, 0],
           [15, [12, 59, [17, 0, [17, [0, cst$119, 0, 0], 0]]]]]]]],
       "@[<hv 4>%a ->@ %a;@]@,"],
    fm = [0, [12, 60, [15, [12, 62, 0]]], cst_a$0],
    fn = [0, [15, [15, 0]], "%a%a"],
    fo =
      [0,
       [11,
        "Abs",
        [18,
         [1, [0, 0, cst$115]],
         [15,
          [17,
           [0, cst$119, 0, 0],
           [12,
            40,
            [18,
             [1, [0, 0, cst$115]],
             [15,
              [12, 44, [17, [0, cst$126, 1, 0], [18, partial$3, partial$2]]]]]]]]]],
       "Abs@[%a@,(@[%a,@ @[%a@]@])@]"],
    fp =
      [0,
       [18,
        [1, [0, 0, cst$115]],
        [15,
         [12, 40, [17, [0, cst$119, 0, 0], [15, [12, 41, [15, [17, 0, 0]]]]]]]],
       "@[%a(@,%a)%a@]"],
    fr =
      [0,
       [12,
        123,
        [18,
         [1, [0, [11, cst_v, 0], cst_v]],
         [15, [17, [0, cst$119, 0, 0], [15, [17, 0, [12, 125, 0]]]]]]],
       "{@[<v>%a@,%a@]}"],
    fs =
      [0,
       [18,
        [1, [0, 0, cst$115]],
        [12,
         40,
         [15,
          [17,
           [0, cst$126, 1, 0],
           [12,
            46,
            [17,
             [0, cst$126, 1, 0],
             [15, [11, ")<", [15, [12, 62, partial$4]]]]]]]]]],
       "@[(%a@ .@ %a)<%a>@]"],
    ft =
      [0,
       [18,
        [1, [0, 0, cst$115]],
        [15,
         [17,
          [0, cst$126, 1, 0],
          [12, 46, [17, [0, cst$126, 1, 0], [15, [17, 0, 0]]]]]]],
       "@[%a@ .@ %a@]"],
    fu = [0, [11, "CU ", [2, 0, 0]], "CU %s"],
    fl = [0, [12, 60, [15, [12, 62, 0]]], cst_a$0],
    fv =
      [0,
       [18, [1, [0, 0, cst$115]], [15, [17, 0, [17, [0, "@;", 1, 0], 0]]]],
       "@[%a@]@;"],
    fk = [0, [3, 0, [12, 91, [2, 0, [12, 93, 0]]]], "%S[%s]"],
    cst_value = cst_value$0,
    cst_type = cst_type$0,
    cst_module = cst_module$0,
    cst_module_type = cst_module_type$0,
    cst_extension_constructor$0 = cst_extension_constructor$2,
    cst_class = cst_class$0,
    cst_class_type = cst_class_type$0,
    fj =
      [0,
       [11, "Types.Uid.of_predef_id ", [3, 0, 0]],
       "Types.Uid.of_predef_id %S"],
    fi =
      [0,
       [11, "Types.Uid.of_compilation_unit_id ", [3, 0, 0]],
       "Types.Uid.of_compilation_unit_id %S"],
    cst_internal = "<internal>",
    fg = [0, [2, 0, [12, 46, [4, 0, 0, 0, 0]]], "%s.%d"],
    fh = [0, [11, "<predef:", [2, 0, [12, 62, 0]]], "<predef:%s>"],
    cst_Types_row_field_ext = "Types.row_field_ext ",
    cst_Types_link_row_field_ext = "Types.link_row_field_ext",
    cst_Types_link_kind = "Types.link_kind",
    cst_Types_link_commu = "Types.link_commu",
    fF = [0, cst_dynlink_compilerlibs_types, 818, 15],
    cst_Types_backtrack = "Types.backtrack",
    fD = [0, 0],
    fE = [0, cst_dynlink_compilerlibs_types, 550, 27],
    fB = [0, [12, 44, [17, [0, cst$119, 0, 0], 0]], ",@,"],
    fC =
      [0,
       [18, [1, [0, 0, cst$115]], [12, 40, [15, [12, 41, [17, 0, 0]]]]],
       "@[(%a)@]"],
    fy = [0, [11, cst_Ind, 0], cst_Ind],
    fz = [0, [11, cst_Sep, 0], cst_Sep],
    fA = [0, [11, cst_Deepsep, 0], cst_Deepsep],
    fQ = [0, 0],
    fR = [0, cst_dynlink_compilerlibs_btype, 454, 27],
    fS = [0, cst_dynlink_compilerlibs_btype, 448, 27],
    fV = [0, cst_dynlink_compilerlibs_btype, 771, 9],
    fU = [0, cst_dynlink_compilerlibs_btype, 703, 27],
    fT = [0, cst_dynlink_compilerlibs_btype, 698, 27],
    fP = [0, cst_dynlink_compilerlibs_btype, 281, 27],
    fO = [0, cst_dynlink_compilerlibs_btype, 256, 9],
    fN = [0, cst_dynlink_compilerlibs_btype, 184, 15],
    fM = [0, cst_dynlink_compilerlibs_btype, 150, 13],
    fL = [0, cst_dynlink_compilerlibs_btype, 97, 16],
    fY = [0, 0],
    fZ = [0, cst_dynlink_compilerlibs_subst, 195, 15],
    f0 = [0, cst_dynlink_compilerlibs_subst, 243, 23],
    cst_Subst_modtype = "Subst.modtype",
    fX = [0, cst_dynlink_compilerlibs_subst, 154, 42],
    cst_Subst_type_path = "Subst.type_path",
    fW = [0, cst_dynlink_compilerlibs_subst, 114, 23],
    cst_Subst_modtype_path = cst_Subst_modtype_path$1,
    cst_Subst_modtype_path$0 = cst_Subst_modtype_path$1,
    f6 = [0, 1],
    f5 = [0, 1],
    f4 = [0, 1],
    f3 = [0, 1],
    f2 = [0, 1],
    f1 = [0, 0],
    cst_int = "int",
    cst_char = "char",
    cst_bytes = "bytes",
    cst_float = cst_float$0,
    cst_bool = "bool",
    cst_unit = "unit",
    cst_exn = "exn",
    cst_array = "array",
    cst_list = "list",
    cst_option = "option",
    cst_nativeint = "nativeint",
    cst_int32 = "int32",
    cst_int64 = "int64",
    cst_lazy_t = "lazy_t",
    cst_string = "string",
    cst_extension_constructor$1 = "extension_constructor",
    cst_floatarray = "floatarray",
    cst_Match_failure = cst_Match_failure$0,
    cst_Out_of_memory = cst_Out_of_memory$0,
    cst_Invalid_argument = cst_Invalid_argument$0,
    cst_Failure = cst_Failure$0,
    cst_Not_found = cst_Not_found$0,
    cst_Sys_error = cst_Sys_error$0,
    cst_End_of_file = cst_End_of_file$0,
    cst_Division_by_zero = cst_Division_by_zero$0,
    cst_Stack_overflow = cst_Stack_overflow$0,
    cst_Sys_blocked_io = cst_Sys_blocked_io$0,
    cst_Assert_failure = cst_Assert_failure$0,
    cst_Undefined_recursive_module = cst_Undefined_recursive_module$0,
    cst_false$0 = cst_false$1,
    cst_true$0 = cst_true$1,
    cst_None$1 = cst_None$2,
    cst_Some$0 = cst_Some$1,
    f_ = [0, "dynlink_compilerlibs/datarepr.ml", 112, 12],
    f9 = [0, 1],
    f8 = [0, 0],
    f7 = [0, 1],
    cst_Dynlink_compilerlibs_Datar =
      "Dynlink_compilerlibs.Datarepr.Constr_not_found",
    f$ =
      [0,
       [15, [17, [0, cst$126, 1, 0], [11, "is not a compiled interface", 0]]],
       "%a@ is not a compiled interface"],
    ga =
      [0,
       [15,
        [17,
         [0, cst$126, 1, 0],
         [11,
          "is not a compiled interface for this version of OCaml.",
          [17,
           4,
           [11, "It seems to be for ", [2, 0, [11, cst_version_of_OCaml, 0]]]]]]],
       "%a@ is not a compiled interface for this version of OCaml.@.It seems to be for %s version of OCaml."],
    gb =
      [0,
       [11, "Corrupted compiled interface", [17, [0, cst$126, 1, 0], [15, 0]]],
       "Corrupted compiled interface@ %a"],
    cst_an_older$0 = cst_an_older$1,
    cst_a_newer$0 = cst_a_newer$1,
    cst_Dynlink_compilerlibs_Cmi_f = "Dynlink_compilerlibs.Cmi_format.Error",
    gp =
      [0,
       [11,
        "Wrong file naming: ",
        [15,
         [17,
          [0, cst$126, 1, 0],
          [11,
           "contains the compiled interface for",
           [17,
            [0, cst$126, 1, 0],
            [2, 0, [11, cst_when, [2, 0, [11, cst_was_expected, 0]]]]]]]]],
       "Wrong file naming: %a@ contains the compiled interface for@ %s when %s was expected"],
    gq =
      [0,
       [18,
        [1, [0, [11, cst_hov, 0], cst_hov]],
        [11,
         "The files ",
         [15,
          [17,
           [0, cst$126, 1, 0],
           [11,
            "and ",
            [15,
             [17,
              [0, cst$126, 1, 0],
              [11,
               "make inconsistent assumptions",
               [17, [0, cst$126, 1, 0], [11, "over interface ", partial$5]]]]]]]]]],
       "@[<hov>The files %a@ and %a@ make inconsistent assumptions@ over interface %s@]"],
    cst_The_compilation_flag_recty =
      "The compilation flag -rectypes is required",
    gr =
      [0,
       [18,
        [1, [0, [11, cst_hov, 0], cst_hov]],
        [11,
         cst_Invalid_import_of,
         [2,
          0,
          [11,
           ", which uses recursive types.",
           [17, [0, cst$126, 1, 0], [2, 0, [17, 0, 0]]]]]]],
       "@[<hov>Invalid import of %s, which uses recursive types.@ %s@]"],
    cst_This_compiler_has_been_con =
      "This compiler has been configured in strict safe-string mode (-force-safe-string)",
    gs =
      [0,
       [18,
        [1, [0, [11, cst_hov, 0], cst_hov]],
        [11,
         cst_Invalid_import_of,
         [2,
          0,
          [11,
           ", compiled with -unsafe-string.",
           [17, [0, cst$126, 1, 0], [2, 0, [17, 0, 0]]]]]]],
       "@[<hov>Invalid import of %s, compiled with -unsafe-string.@ %s@]"],
    go = [0, [0, 6, 0]],
    gl = [0, 2, 0],
    gm = [0, 1, 0],
    gn = [0, 0, 0],
    gj = [0, cst_dynlink_compilerlibs_persi, 286, 6],
    gk = [0, cst_dynlink_compilerlibs_persi, 289, 14],
    gi = [32, cst$115, 0],
    gd = [0, [15, 0], cst_a],
    ge =
      [0,
       [12,
        32,
        [15,
         [17,
          [0, cst$126, 1, 0],
          [11,
           "contains the compiled interface for ",
           [17,
            [0, cst$126, 1, 0],
            [2, 0, [11, cst_when, [2, 0, [11, cst_was_expected, 0]]]]]]]]],
       " %a@ contains the compiled interface for @ %s when %s was expected"],
    gf = [0, cst_dynlink_compilerlibs_persi, 250, 35],
    gg =
      [0, [2, 0, [11, " uses recursive types", 0]], "%s uses recursive types"],
    gh =
      [0, [2, 0, [11, " uses -unsafe-string", 0]], "%s uses -unsafe-string"],
    cst_cmi$0 = cst_cmi$1,
    gc = [0, cst_dynlink_compilerlibs_persi, 24, 46],
    cst_Dynlink_compilerlibs_Persi =
      "Dynlink_compilerlibs.Persistent_env.Error",
    gT = [0, [2, 0, 0], cst_s$1],
    gU = [0, [15, [11, ".[", [4, 3, 0, 0, [12, 93, 0]]]], "%a.[%i]"],
    g_ = [0, cst_dynlink_compilerlibs_env_m, 1806, 25],
    g$ = [0, 0],
    ha = [0, 0],
    g9 = [1, 0],
    hb = [21, cst$115, 0],
    hc = [46, cst$115, 0],
    hd = [22, cst$115, 0, 0],
    cst_Env_lookup_apply_empty_arg = "Env.lookup_apply: empty argument list",
    h0 =
      [0,
       [18,
        [1, [0, 0, cst$115]],
        [18, [1, [0, [11, cst_hov, 0], cst_hov]], 0]],
       "@[@[<hov>"],
    h1 =
      [0,
       [11,
        cst_Internal_path,
        [17,
         [0, cst$126, 1, 0],
         [2, 0, [17, [0, cst$126, 1, 0], [11, "is dangling.", 0]]]]],
       "Internal path@ %s@ is dangling."],
    h3 =
      [0,
       [11,
        cst_Internal_path,
        [17,
         [0, cst$126, 1, 0],
         [2,
          0,
          [17,
           [0, cst$126, 1, 0],
           [11,
            "expands to",
            [17,
             [0, cst$126, 1, 0],
             [2, 0, [17, [0, cst$126, 1, 0], [11, "which is dangling.", 0]]]]]]]]],
       "Internal path@ %s@ expands to@ %s@ which is dangling."],
    cst_was_not_found = "was not found",
    cst_The_compiled_interface_for = "The compiled interface for module",
    h2 =
      [0,
       [17,
        0,
        [17,
         [0, cst$126, 1, 0],
         [18,
          [1, [0, 0, cst$115]],
          [2,
           0,
           [17,
            [0, cst$126, 1, 0],
            [2,
             0,
             [17, [0, cst$126, 1, 0], [2, 0, [12, 46, [17, 0, partial$6]]]]]]]]]],
       "@]@ @[%s@ %s@ %s.@]@]"],
    h4 =
      [0,
       [12, 39, [2, 0, [11, "' is not a valid value identifier.", 0]]],
       "'%s' is not a valid value identifier."],
    hC =
      [0,
       [11, cst_Illegal_recursive_module_r, 0],
       cst_Illegal_recursive_module_r],
    hD = [0, [11, "Unbound value ", [15, 0]], "Unbound value %a"],
    cst_you_should_add_the_rec_key =
      "you should add the 'rec' keyword on line",
    cst_Hint_If_this_is_a_recursiv =
      "Hint: If this is a recursive definition,",
    hE =
      [0,
       [17,
        4,
        [18,
         [1, [0, 0, cst$115]],
         [2,
          0,
          [17, [0, cst$126, 1, 0], [2, 0, [12, 32, [4, 3, 0, 0, [17, 0, 0]]]]]]]],
       "@.@[%s@ %s %i@]"],
    hF =
      [0,
       [11, "Unbound type constructor ", [15, 0]],
       "Unbound type constructor %a"],
    hG = [0, [11, "Unbound constructor ", [15, 0]], "Unbound constructor %a"],
    hH =
      [0, [11, "Unbound record field ", [15, 0]], "Unbound record field %a"],
    hI = [0, [11, "Unbound module ", [15, 0]], "Unbound module %a"],
    cst_but_module_types_are_not_m = "but module types are not modules",
    cst_Hint_There_is_a_module_typ = "Hint: There is a module type named",
    hJ =
      [0,
       [17,
        4,
        [18,
         [1, [0, 0, cst$115]],
         [2, 0, [12, 32, [15, [11, cst$124, [2, 0, [17, 0, 0]]]]]]]],
       cst_s_a_s],
    hK = [0, [11, "Unbound class ", [15, 0]], "Unbound class %a"],
    cst_but_classes_are_not_class_ = "but classes are not class types",
    cst_Hint_There_is_a_class_type = "Hint: There is a class type named",
    hL =
      [0,
       [17,
        4,
        [18,
         [1, [0, 0, cst$115]],
         [2, 0, [12, 32, [15, [11, cst$124, [2, 0, [17, 0, 0]]]]]]]],
       cst_s_a_s],
    hM = [0, [11, "Unbound module type ", [15, 0]], "Unbound module type %a"],
    cst_but_modules_are_not_module = "but modules are not module types",
    cst_Hint_There_is_a_module_nam = "Hint: There is a module named",
    hN =
      [0,
       [17,
        4,
        [18,
         [1, [0, 0, cst$115]],
         [2, 0, [12, 32, [15, [11, cst$124, [2, 0, [17, 0, 0]]]]]]]],
       cst_s_a_s],
    hO = [0, [11, "Unbound class type ", [15, 0]], "Unbound class type %a"],
    hP =
      [0,
       [11, "Unbound instance variable ", [2, 0, 0]],
       "Unbound instance variable %s"],
    hQ =
      [0,
       [11, "The value ", [2, 0, [11, " is not an instance variable", 0]]],
       "The value %s is not an instance variable"],
    hR =
      [0,
       [11,
        "The instance variable ",
        [15,
         [17,
          [0, cst$126, 1, 0],
          [11,
           "cannot be accessed from the definition of another instance variable",
           0]]]],
       "The instance variable %a@ cannot be accessed from the definition of another instance variable"],
    hS =
      [0,
       [11,
        "The self variable ",
        [15,
         [17, [0, cst$126, 1, 0], [11, cst_cannot_be_accessed_from_th, 0]]]],
       "The self variable %a@ cannot be accessed from the definition of an instance variable"],
    hT =
      [0,
       [11,
        "The ancestor variable ",
        [15,
         [17, [0, cst$126, 1, 0], [11, cst_cannot_be_accessed_from_th, 0]]]],
       "The ancestor variable %a@ cannot be accessed from the definition of an instance variable"],
    hU =
      [0,
       [18,
        [1, [0, 0, cst$115]],
        [11,
         cst_The_module,
         [15, [11, " is a structure, it cannot be applied", [17, 0, 0]]]]],
       "@[The module %a is a structure, it cannot be applied@]"],
    hV =
      [0,
       [18,
        [1, [0, 0, cst$115]],
        [11,
         cst_The_module,
         [15, [11, " is abstract, it cannot be applied", [17, 0, 0]]]]],
       "@[The module %a is abstract, it cannot be applied@]"],
    hW =
      [0,
       [18,
        [1, [0, 0, cst$115]],
        [11,
         cst_The_module,
         [15,
          [11, " is a functor, it cannot have any components", [17, 0, 0]]]]],
       "@[The module %a is a functor, it cannot have any components@]"],
    hX =
      [0,
       [18,
        [1, [0, 0, cst$115]],
        [11,
         cst_The_module,
         [15, [11, " is abstract, it cannot have any components", [17, 0, 0]]]]],
       "@[The module %a is abstract, it cannot have any components@]"],
    hY =
      [0,
       [18,
        [1, [0, 0, cst$115]],
        [11,
         "The functor ",
         [15,
          [11,
           " is generative,",
           [17,
            [0, cst$126, 1, 0],
            [11,
             "it",
             [17,
              [0, cst$126, 1, 0],
              [11, "cannot", [17, [0, cst$126, 1, 0], [11, "be", partial$7]]]]]]]]]],
       "@[The functor %a is generative,@ it@ cannot@ be@ applied@ in@ type@ expressions@]"],
    cst_is_the_current_compilation = "is the current compilation unit",
    cst_is_missing = "is missing",
    hZ =
      [0,
       [11,
        cst_The_module,
        [15,
         [11, " is an alias for module ", [15, [11, ", which ", [2, 0, 0]]]]]],
       "The module %a is an alias for module %a, which %s"],
    hB = [0, cst_dynlink_compilerlibs_env_m, 3502, 19],
    hA = [0, cst_dynlink_compilerlibs_env_m, 3499, 19],
    hz = [0, cst_dynlink_compilerlibs_env_m, 3134, 10],
    hy = [0, cst_dynlink_compilerlibs_env_m, 3130, 16],
    hx = [0, cst_dynlink_compilerlibs_env_m, 3112, 10],
    hw = [0, cst_dynlink_compilerlibs_env_m, 3108, 16],
    hv = [0, cst_dynlink_compilerlibs_env_m, 3102, 16],
    hu = [0, cst_dynlink_compilerlibs_env_m, 3096, 16],
    ht = [0, cst_dynlink_compilerlibs_env_m, 3086, 16],
    hs = [0, cst_dynlink_compilerlibs_env_m, 3076, 16],
    hr = [0, cst_dynlink_compilerlibs_env_m, 3070, 16],
    hq = [0, [11, "module ", [2, 0, [2, 0, 0]]], "module %s%s"],
    hp = [0, cst_dynlink_compilerlibs_env_m, 2623, 11],
    hn = [0, cst_dynlink_compilerlibs_env_m, 2517, 49],
    hl = [27, cst$115, cst$115],
    hm = [28, cst$115, cst$115],
    hk = [0, cst_dynlink_compilerlibs_env_m, 2459, 22],
    hh = [1, -358247754],
    hi = [1, 1048315315],
    hj = [1, -358247754],
    cst_the_signature_of = "the signature of ",
    g8 = [0, cst_dynlink_compilerlibs_env_m, 1682, 13],
    g7 = [0, cst_dynlink_compilerlibs_env_m, 1370, 6],
    g6 = [0, cst_dynlink_compilerlibs_env_m, 1349, 6],
    g5 = [0, cst_dynlink_compilerlibs_env_m, 1336, 28],
    g4 = [0, cst_dynlink_compilerlibs_env_m, 1277, 10],
    gX = [0, cst_dynlink_compilerlibs_env_m, 1183, 26],
    gY = [0, cst_dynlink_compilerlibs_env_m, 1187, 26],
    gZ = [0, cst_dynlink_compilerlibs_env_m, 1192, 13],
    g0 = [0, cst_dynlink_compilerlibs_env_m, 1177, 26],
    g1 = [0, cst_dynlink_compilerlibs_env_m, 1161, 26],
    g3 = [0, cst_dynlink_compilerlibs_env_m, 1168, 30],
    g2 = [0, cst_dynlink_compilerlibs_env_m, 1170, 55],
    gV = [0, cst_dynlink_compilerlibs_env_m, 1141, 13],
    gW = [0, cst_dynlink_compilerlibs_env_m, 1143, 9],
    cst_Env_add_persistent_structu = "Env.add_persistent_structure",
    gS = [0, cst_dynlink_compilerlibs_env_m, 763, 44],
    gR = [0, cst_dynlink_compilerlibs_env_m, 755, 12],
    gQ = [0, cst_dynlink_compilerlibs_env_m, 746, 54],
    gP = [0, cst_dynlink_compilerlibs_env_m, 741, 17],
    gI = [0, cst_type$0],
    gK = [0, cst_class_type$0],
    gL = [0, cst_label$0],
    gH = [0, cst_module_type$0],
    gM = [0, cst_constructor$2],
    gN = [0, cst_class$0],
    gO = [0, cst_value$0],
    gJ = [0, cst_module$0],
    gG = [0, cst_dynlink_compilerlibs_env_m, 662, 45],
    gF = [0, cst_dynlink_compilerlibs_env_m, 660, 36],
    gE = [0, cst_dynlink_compilerlibs_env_m, 375, 10],
    gD = [0, cst_dynlink_compilerlibs_env_m, 241, 10],
    gy = [0, 2],
    gz = [0, 0],
    gA = [0, 1],
    gB = [0, 0],
    gC = [0, 0],
    gv = [0, 1],
    gw = [0, 2],
    gx = [0, 0],
    gu = [0, 0],
    gt = [0, cst_dynlink_compilerlibs_env_m, 29, 46],
    cst_Dynlink_compilerlibs_Env_E = "Dynlink_compilerlibs.Env.Error",
    h8 = [0, [15, [12, 58, [4, 3, 0, 0, 0]]], "%a:%i"],
    h9 = [0, [12, 44, [4, 3, 0, 0, [11, "--", [4, 3, 0, 0, 0]]]], ",%i--%i"],
    h_ = [0, [12, 59, 0], cst$122],
    h7 = [0, "dynlink_compilerlibs/debuginfo.ml", 160, 4],
    h6 =
      [0,
       [2,
        0,
        [12,
         58,
         [4, 0, 0, 0, [12, 44, [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]]]]]],
       "%s:%d,%d-%d"],
    cst_unknown = "<unknown>",
    h5 = [0, cst$141],
    cst_fun$0 = ".(fun)",
    cst_fun = "(fun)",
    cst_Lambda_patch_guarded = "Lambda.patch_guarded",
    cst_raise = "raise",
    cst_reraise = "reraise",
    cst_raise_notrace = "raise_notrace",
    ib = [0, 1],
    ia = [0, cst_dynlink_compilerlibs_lambd, 786, 8],
    cst_not_found = " not found.",
    cst_Primitive = "Primitive ",
    cst_Cannot_find_address_for = "Cannot find address for: ",
    cst_let$0 = cst_let$1,
    cst_let = cst_let$1,
    cst_Not_simple = "Not_simple",
    h$ = [0, cst_dynlink_compilerlibs_lambd, 358, 2],
    ic =
      [0,
       cst_Out_of_memory$0,
       cst_Sys_error$0,
       cst_Failure$0,
       cst_Invalid_argument$0,
       cst_End_of_file$0,
       cst_Division_by_zero$0,
       cst_Not_found$0,
       cst_Match_failure$0,
       cst_Stack_overflow$0,
       cst_Sys_blocked_io$0,
       cst_Assert_failure$0,
       cst_Undefined_recursive_module$0],
    ie =
      [0,
       "caml_abs_float",
       "caml_acos_float",
       "caml_acosh_float",
       "caml_add_float",
       "caml_alloc_dummy",
       "caml_alloc_dummy_float",
       "caml_alloc_dummy_function",
       "caml_alloc_dummy_infix",
       "caml_array_append",
       "caml_array_blit",
       "caml_array_concat",
       "caml_array_fill",
       "caml_array_get",
       "caml_array_get_addr",
       "caml_array_set",
       "caml_array_set_addr",
       "caml_array_sub",
       "caml_array_unsafe_get",
       "caml_array_unsafe_set",
       "caml_asin_float",
       "caml_asinh_float",
       "caml_atan2_float",
       "caml_atan_float",
       "caml_atanh_float",
       "caml_ba_blit",
       "caml_ba_change_layout",
       "caml_ba_create",
       "caml_ba_dim",
       "caml_ba_dim_1",
       "caml_ba_dim_2",
       "caml_ba_dim_3",
       "caml_ba_fill",
       "caml_ba_get_1",
       "caml_ba_get_2",
       "caml_ba_get_3",
       "caml_ba_get_generic",
       "caml_ba_kind",
       "caml_ba_layout",
       "caml_ba_num_dims",
       "caml_ba_reshape",
       "caml_ba_set_1",
       "caml_ba_set_2",
       "caml_ba_set_3",
       "caml_ba_set_generic",
       "caml_ba_slice",
       "caml_ba_sub",
       "caml_ba_uint8_get16",
       "caml_ba_uint8_get32",
       "caml_ba_uint8_get64",
       "caml_ba_uint8_set16",
       "caml_ba_uint8_set32",
       "caml_ba_uint8_set64",
       "caml_backtrace_status",
       "caml_blit_bytes",
       "caml_blit_string",
       "caml_bswap16",
       "caml_bytes_compare",
       "caml_bytes_equal",
       "caml_bytes_get",
       "caml_bytes_get16",
       "caml_bytes_get32",
       "caml_bytes_get64",
       "caml_bytes_greaterequal",
       "caml_bytes_greaterthan",
       "caml_bytes_lessequal",
       "caml_bytes_lessthan",
       "caml_bytes_notequal",
       "caml_bytes_of_string",
       "caml_bytes_set",
       "caml_bytes_set16",
       "caml_bytes_set32",
       "caml_bytes_set64",
       "caml_cbrt_float",
       "caml_ceil_float",
       "caml_channel_descriptor",
       "caml_classify_float",
       "caml_compare",
       "caml_convert_raw_backtrace",
       "caml_convert_raw_backtrace_slot",
       "caml_copysign_float",
       "caml_cos_float",
       "caml_cosh_float",
       "caml_create_bytes",
       "caml_create_string",
       "caml_div_float",
       "caml_dynlink_add_primitive",
       "caml_dynlink_close_lib",
       "caml_dynlink_get_current_libs",
       "caml_dynlink_lookup_symbol",
       "caml_dynlink_open_lib",
       "caml_ensure_stack_capacity",
       "caml_ephe_blit_data",
       "caml_ephe_blit_key",
       "caml_ephe_check_data",
       "caml_ephe_check_key",
       "caml_ephe_create",
       "caml_ephe_get_data",
       "caml_ephe_get_data_copy",
       "caml_ephe_get_key",
       "caml_ephe_get_key_copy",
       "caml_ephe_set_data",
       "caml_ephe_set_key",
       "caml_ephe_unset_data",
       "caml_ephe_unset_key",
       "caml_eq_float",
       "caml_equal",
       "caml_erf_float",
       "caml_erfc_float",
       "caml_eventlog_pause",
       "caml_eventlog_resume",
       "caml_exp2_float",
       "caml_exp_float",
       "caml_expm1_float",
       "caml_fill_bytes",
       "caml_fill_string",
       "caml_final_register",
       "caml_final_register_called_without_value",
       "caml_final_release",
       "caml_float_compare",
       "caml_float_of_int",
       "caml_float_of_string",
       "caml_floatarray_blit",
       "caml_floatarray_create",
       "caml_floatarray_get",
       "caml_floatarray_set",
       "caml_floatarray_unsafe_get",
       "caml_floatarray_unsafe_set",
       "caml_floor_float",
       "caml_fma_float",
       "caml_fmod_float",
       "caml_format_float",
       "caml_format_int",
       "caml_fresh_oo_id",
       "caml_frexp_float",
       "caml_gc_compaction",
       "caml_gc_counters",
       "caml_gc_full_major",
       "caml_gc_get",
       "caml_gc_huge_fallback_count",
       "caml_gc_major",
       "caml_gc_major_slice",
       "caml_gc_minor",
       "caml_gc_minor_words",
       "caml_gc_quick_stat",
       "caml_gc_set",
       "caml_gc_stat",
       "caml_ge_float",
       "caml_get_current_callstack",
       "caml_get_current_environment",
       "caml_get_exception_backtrace",
       "caml_get_exception_raw_backtrace",
       "caml_get_global_data",
       "caml_get_major_bucket",
       "caml_get_major_credit",
       "caml_get_minor_free",
       "caml_get_public_method",
       "caml_get_section_table",
       "caml_greaterequal",
       "caml_greaterthan",
       "caml_gt_float",
       "caml_hash",
       "caml_hexstring_of_float",
       "caml_hypot_float",
       "caml_input_value",
       "caml_input_value_from_bytes",
       "caml_install_signal_handler",
       "caml_int32_add",
       "caml_int32_and",
       "caml_int32_bits_of_float",
       "caml_int32_bswap",
       "caml_int32_compare",
       "caml_int32_div",
       "caml_int32_float_of_bits",
       "caml_int32_format",
       "caml_int32_mod",
       "caml_int32_mul",
       "caml_int32_neg",
       "caml_int32_of_float",
       "caml_int32_of_int",
       "caml_int32_of_string",
       "caml_int32_or",
       "caml_int32_shift_left",
       "caml_int32_shift_right",
       "caml_int32_shift_right_unsigned",
       "caml_int32_sub",
       "caml_int32_to_float",
       "caml_int32_to_int",
       "caml_int32_xor",
       "caml_int64_add",
       "caml_int64_add_native",
       "caml_int64_and",
       "caml_int64_and_native",
       "caml_int64_bits_of_float",
       "caml_int64_bswap",
       "caml_int64_compare",
       "caml_int64_div",
       "caml_int64_div_native",
       "caml_int64_float_of_bits",
       "caml_int64_format",
       "caml_int64_mod",
       "caml_int64_mod_native",
       "caml_int64_mul",
       "caml_int64_mul_native",
       "caml_int64_neg",
       "caml_int64_neg_native",
       "caml_int64_of_float",
       "caml_int64_of_int",
       "caml_int64_of_int32",
       "caml_int64_of_nativeint",
       "caml_int64_of_string",
       "caml_int64_or",
       "caml_int64_or_native",
       "caml_int64_shift_left",
       "caml_int64_shift_right",
       "caml_int64_shift_right_unsigned",
       "caml_int64_sub",
       "caml_int64_sub_native",
       "caml_int64_to_float",
       "caml_int64_to_int",
       "caml_int64_to_int32",
       "caml_int64_to_nativeint",
       "caml_int64_xor",
       "caml_int64_xor_native",
       "caml_int_as_pointer",
       "caml_int_compare",
       "caml_int_of_float",
       "caml_int_of_string",
       "caml_invoke_traced_function",
       "caml_lazy_make_forward",
       "caml_ldexp_float",
       "caml_le_float",
       "caml_lessequal",
       "caml_lessthan",
       "caml_lex_engine",
       "caml_log10_float",
       "caml_log1p_float",
       "caml_log2_float",
       "caml_log_float",
       "caml_lt_float",
       "caml_make_array",
       "caml_make_float_vect",
       "caml_make_vect",
       "caml_marshal_data_size",
       "caml_md5_chan",
       "caml_md5_string",
       "caml_memprof_start",
       "caml_memprof_stop",
       "caml_ml_bytes_length",
       "caml_ml_channel_size",
       "caml_ml_channel_size_64",
       "caml_ml_close_channel",
       "caml_ml_debug_info_status",
       "caml_ml_enable_runtime_warnings",
       "caml_ml_flush",
       "caml_ml_input",
       "caml_ml_input_char",
       "caml_ml_input_int",
       "caml_ml_input_scan_line",
       "caml_ml_is_buffered",
       "caml_ml_open_descriptor_in",
       "caml_ml_open_descriptor_out",
       "caml_ml_out_channels_list",
       "caml_ml_output",
       "caml_ml_output_bytes",
       "caml_ml_output_char",
       "caml_ml_output_int",
       "caml_ml_pos_in",
       "caml_ml_pos_in_64",
       "caml_ml_pos_out",
       "caml_ml_pos_out_64",
       "caml_ml_runtime_warnings_enabled",
       "caml_ml_seek_in",
       "caml_ml_seek_in_64",
       "caml_ml_seek_out",
       "caml_ml_seek_out_64",
       "caml_ml_set_binary_mode",
       "caml_ml_set_buffered",
       "caml_ml_set_channel_name",
       "caml_ml_string_length",
       "caml_modf_float",
       "caml_mul_float",
       "caml_nativeint_add",
       "caml_nativeint_and",
       "caml_nativeint_bswap",
       "caml_nativeint_compare",
       "caml_nativeint_div",
       "caml_nativeint_format",
       "caml_nativeint_mod",
       "caml_nativeint_mul",
       "caml_nativeint_neg",
       "caml_nativeint_of_float",
       "caml_nativeint_of_int",
       "caml_nativeint_of_int32",
       "caml_nativeint_of_string",
       "caml_nativeint_or",
       "caml_nativeint_shift_left",
       "caml_nativeint_shift_right",
       "caml_nativeint_shift_right_unsigned",
       "caml_nativeint_sub",
       "caml_nativeint_to_float",
       "caml_nativeint_to_int",
       "caml_nativeint_to_int32",
       "caml_nativeint_xor",
       "caml_neg_float",
       "caml_neq_float",
       "caml_new_lex_engine",
       "caml_nextafter_float",
       "caml_notequal",
       "caml_obj_add_offset",
       "caml_obj_block",
       "caml_obj_dup",
       "caml_obj_make_forward",
       "caml_obj_raw_field",
       "caml_obj_reachable_words",
       "caml_obj_set_raw_field",
       "caml_obj_set_tag",
       "caml_obj_tag",
       "caml_obj_truncate",
       "caml_obj_with_tag",
       "caml_output_value",
       "caml_output_value_to_buffer",
       "caml_output_value_to_bytes",
       "caml_output_value_to_string",
       "caml_parse_engine",
       "caml_power_float",
       "caml_raw_backtrace_length",
       "caml_raw_backtrace_next_slot",
       "caml_raw_backtrace_slot",
       "caml_realloc_global",
       "caml_record_backtrace",
       "caml_register_named_value",
       "caml_reify_bytecode",
       "caml_reset_afl_instrumentation",
       "caml_restore_raw_backtrace",
       "caml_round_float",
       "caml_runtime_parameters",
       "caml_runtime_variant",
       "caml_set_oo_id",
       "caml_set_parser_trace",
       "caml_signbit",
       "caml_signbit_float",
       "caml_sin_float",
       "caml_sinh_float",
       "caml_sqrt_float",
       "caml_static_release_bytecode",
       "caml_string_compare",
       "caml_string_equal",
       "caml_string_get",
       "caml_string_get16",
       "caml_string_get32",
       "caml_string_get64",
       "caml_string_greaterequal",
       "caml_string_greaterthan",
       "caml_string_lessequal",
       "caml_string_lessthan",
       "caml_string_notequal",
       "caml_string_of_bytes",
       "caml_string_set",
       "caml_sub_float",
       "caml_sys_argv",
       "caml_sys_chdir",
       "caml_sys_close",
       "caml_sys_const_backend_type",
       "caml_sys_const_big_endian",
       "caml_sys_const_int_size",
       "caml_sys_const_max_wosize",
       "caml_sys_const_naked_pointers_checked",
       "caml_sys_const_ostype_cygwin",
       "caml_sys_const_ostype_unix",
       "caml_sys_const_ostype_win32",
       "caml_sys_const_word_size",
       "caml_sys_executable_name",
       "caml_sys_exit",
       "caml_sys_file_exists",
       "caml_sys_get_argv",
       "caml_sys_get_config",
       "caml_sys_getcwd",
       "caml_sys_getenv",
       "caml_sys_is_directory",
       "caml_sys_isatty",
       "caml_sys_mkdir",
       "caml_sys_modify_argv",
       "caml_sys_open",
       "caml_sys_random_seed",
       "caml_sys_read_directory",
       "caml_sys_remove",
       "caml_sys_rename",
       "caml_sys_rmdir",
       "caml_sys_system_command",
       "caml_sys_time",
       "caml_sys_time_include_children",
       "caml_sys_unsafe_getenv",
       "caml_tan_float",
       "caml_tanh_float",
       "caml_terminfo_rows",
       "caml_trunc_float",
       "caml_update_dummy",
       "caml_weak_blit",
       "caml_weak_check",
       "caml_weak_create",
       "caml_weak_get",
       "caml_weak_get_copy",
       "caml_weak_set"],
    cst_Dynlink_compilerlibs_Bytes =
      "Dynlink_compilerlibs.Bytesections.Bad_magic_number",
    ii = [0, 0],
    cst_ld_conf = "ld.conf",
    ih = [0, "dynlink_compilerlibs/dll.ml", 142, 4],
    ig = [0, 0],
    cst_dll = "dll",
    iu =
      [0,
       [11, "Reference to undefined global `", [2, 0, [12, 39, 0]]],
       "Reference to undefined global `%s'"],
    iv =
      [0,
       [11, "The external function `", [2, 0, [11, "' is not available", 0]]],
       "The external function `%s' is not available"],
    iw =
      [0,
       [11, "Cannot find or execute the runtime system ", [2, 0, 0]],
       "Cannot find or execute the runtime system %s"],
    ix =
      [0,
       [11,
        "The value of the global `",
        [2, 0, [11, "' is not yet computed", 0]]],
       "The value of the global `%s' is not yet computed"],
    cst_Symtable_hide_additions = "Symtable.hide_additions",
    cst_SYMB = "SYMB",
    cst_PRIM = "PRIM",
    cst_DLPT = "DLPT",
    cst_CRCS = "CRCS",
    cst_Toplevel_bytecode_executab =
      "Toplevel bytecode executable is corrupted",
    it = [0, [2, 0, [11, " -p > ", [2, 0, 0]]], "%s -p > %s"],
    cst_Symtable_init = "Symtable.init",
    cst_camlprims = "camlprims",
    ir =
      [0,
       [11, "extern value ", [2, 0, [11, "(void);\n", 0]]],
       "extern value %s(void);\n"],
    ij =
      [0,
       [11, cst_typedef_value_c_primitive_, 0],
       cst_typedef_value_c_primitive_],
    ik =
      [0,
       [11, cst_c_primitive_caml_builtin_c, 0],
       cst_c_primitive_caml_builtin_c],
    iq = [0, [11, cst$129, [2, 0, [11, ",\n", 0]]], "  %s,\n"],
    il = [0, [11, cst_0$3, 0], cst_0$3],
    im =
      [0,
       [11, cst_const_char_caml_names_of_b, 0],
       cst_const_char_caml_names_of_b],
    ip = [0, [11, '  "', [2, 0, [11, '",\n', 0]]], '  "%s",\n'],
    io = [0, [11, cst_0$3, 0], cst_0$3],
    cst_Dynlink_compilerlibs_Symta = "Dynlink_compilerlibs.Symtable.Error";
   try{var iB = caml_sys_getenv("OCAMLLIB"), standard_library = iB;}
   catch(exn$1){
    var exn = caml_wrap_exception(exn$1);
    if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
    try{var iA = caml_sys_getenv("CAMLLIB"), standard_library = iA;}
    catch(exn){
     var exn$0 = caml_wrap_exception(exn);
     if(exn$0 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$0, 0);
     var standard_library = standard_library_default;
    }
   }
   var
    al = Stdlib[28].call(null, cst$2, ocamlc_cppflags),
    am = Stdlib[28].call(null, ocamlc_cflags, al),
    an = Stdlib[28].call(null, cst$3, am),
    bytecomp_c_compiler = Stdlib[28].call(null, c_compiler, an),
    ao = Stdlib[28].call(null, cst$4, ocamlopt_cppflags),
    ap = Stdlib[28].call(null, ocamlopt_cflags, ao),
    aq = Stdlib[28].call(null, cst$5, ap),
    native_c_compiler = Stdlib[28].call(null, c_compiler, aq),
    supports_shared_libraries = 1;
   a:
   {
    var c_has_debug_prefix_map = 1, as_has_debug_prefix_map = 1;
    if(! Stdlib_Sys[7] && ! Stdlib_Sys[8]){
     var
      mkmaindll = cst_gcc_shared$1,
      mkexe = cst_gcc_O2_fno_strict_aliasing$0,
      mkdll = cst_gcc_shared$2;
     break a;
    }
    try{
     var
      flexlink = caml_sys_getenv("OCAML_FLEXLINK"),
      f$0 =
        function(i){
         var c = caml_string_get(flexlink, i);
         if(47 === c && Stdlib_Sys[7]) return 92;
         return c;
        },
      iy = Stdlib_String[2].call(null, caml_ml_string_length(flexlink), f$0),
      flexlink$0 = Stdlib[28].call(null, iy, cst$112),
      mkmaindll$0 = Stdlib[28].call(null, flexlink$0, cst_maindll),
      mkexe$0 = Stdlib[28].call(null, flexlink$0, cst_exe_link_Wl_E),
      iz = Stdlib[28].call(null, flexlink$0, cst$113),
      mkmaindll = mkmaindll$0,
      mkexe = mkexe$0,
      mkdll = iz;
    }
    catch(exn){
     var exn$1 = caml_wrap_exception(exn);
     if(exn$1 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$1, 0);
     var
      mkmaindll = cst_gcc_shared,
      mkexe = cst_gcc_O2_fno_strict_aliasing,
      mkdll = cst_gcc_shared$0;
    }
   }
   var
    flambda = 0,
    safe_string = 1,
    default_safe_string = 1,
    windows_unicode = 0,
    naked_pointers = 1,
    flat_float_array = 1,
    function_sections = 1,
    afl_instrument = 0,
    interface_suffix = [0, cst_mli],
    asm_cfi_supported = 1,
    with_frame_pointers = 0,
    match = Stdlib_Sys[4],
    with_flambda_invariants = 0,
    with_cmm_invariants = 0,
    max_tag = 245,
    lazy_tag = 246,
    max_young_wosize = 256,
    stack_threshold = 256,
    stack_safety_margin = 60,
    profinfo = 0,
    profinfo_width = 0,
    default_executable_name =
      match !== "Cygwin"
       ? match
         !== "Unix"
         ? match !== cst_Win32 ? cst_camlprog : cst_camlprog_exe
         : cst_a_out
       : cst_camlprog_exe,
    systhread_supported = 1;
   function p(x, v){return [0, x, [0, v]];}
   function p_int(x, v){return [0, x, [1, v]];}
   function p_bool(x, v){return [0, x, [2, v]];}
   var
    as = [0, p(cst_linear_magic_number, linear_magic_number), 0],
    at = [0, p(cst_cmt_magic_number, cmt_magic_number), as],
    au = [0, p(cst_cmxs_magic_number, cmxs_magic_number), at],
    av = [0, p(cst_ast_intf_magic_number, ast_intf_magic_number), au],
    aw = [0, p(cst_ast_impl_magic_number, ast_impl_magic_number), av],
    ax = [0, p(cst_cmxa_magic_number, cmxa_magic_number), aw],
    ay = [0, p(cst_cmx_magic_number, cmx_magic_number), ax],
    az = [0, p(cst_cma_magic_number, cma_magic_number), ay],
    aA = [0, p(cst_cmo_magic_number, cmo_magic_number), az],
    aB = [0, p(cst_cmi_magic_number, cmi_magic_number), aA],
    aC = [0, p(cst_exec_magic_number, exec_magic_number), aB],
    aD = [0, p_bool(cst_naked_pointers, naked_pointers), aC],
    aE =
      [0,
       p_bool(cst_supports_shared_libraries, supports_shared_libraries),
       aD],
    aF = [0, p_bool(cst_windows_unicode, windows_unicode), aE],
    aG = [0, p_bool(cst_afl_instrument, afl_instrument), aF],
    aH = [0, p_bool(cst_function_sections, function_sections), aG],
    aI = [0, p_bool(cst_flat_float_array, flat_float_array), aH],
    aJ = [0, p_bool(cst_default_safe_string, default_safe_string), aI],
    aK = [0, p_bool(cst_safe_string, safe_string), aJ],
    aL = [0, p_bool(cst_flambda, flambda), aK],
    aM = [0, p(cst_target, target), aL],
    aN = [0, p(cst_host, host), aM],
    aO = [0, p_bool(cst_systhread_supported, systhread_supported), aN],
    aP = [0, p(cst_default_executable_name, default_executable_name), aO],
    aQ = [0, p(cst_os_type, Stdlib_Sys[4]), aP],
    aR = [0, p(cst_ext_dll, ext_dll), aQ],
    aS = [0, p(cst_ext_lib, ext_lib), aR],
    aT = [0, p(cst_ext_asm, ext_asm), aS],
    aU = [0, p(cst_ext_obj, ext_obj), aT],
    aV = [0, p(cst_ext_exe, ext_exe), aU],
    aW = [0, p_bool(cst_with_frame_pointers, with_frame_pointers), aV],
    aX = [0, p_bool(cst_asm_cfi_supported, asm_cfi_supported), aW],
    aY = [0, p(cst_asm, asm), aX],
    aZ = [0, p(cst_system, system), aY],
    a0 = [0, p_int(cst_word_size, Stdlib_Sys[9]), aZ],
    a1 = [0, p_int(cst_int_size, Stdlib_Sys[10]), a0],
    a2 = [0, p(cst_model, model), a1],
    a3 = [0, p(cst_architecture, architecture), a2],
    a4 = [0, p(cst_native_pack_linker, native_pack_linker), a3],
    a5 = [0, p(cst_native_c_libraries, native_c_libraries), a4],
    a6 = [0, p(cst_bytecomp_c_libraries, bytecomp_c_libraries), a5],
    a7 = [0, p(cst_native_c_compiler, native_c_compiler), a6],
    a8 = [0, p(cst_bytecomp_c_compiler, bytecomp_c_compiler), a7],
    a9 = [0, p(cst_ocamlopt_cppflags, ocamlopt_cppflags), a8],
    a_ = [0, p(cst_ocamlopt_cflags, ocamlopt_cflags), a9],
    a$ = [0, p(cst_ocamlc_cppflags, ocamlc_cppflags), a_],
    ba = [0, p(cst_ocamlc_cflags, ocamlc_cflags), a$],
    bb = [0, p(cst_c_compiler, c_compiler), ba],
    bc = [0, p(cst_ccomp_type, ccomp_type), bb],
    bd = [0, p(cst_standard_library, standard_library), bc],
    be = [0, p(cst_standard_library_default, standard_library_default), bd],
    configuration_variables = [0, p(cst_version, version), be];
   function print_config_value(oc, param){
    switch(param[0]){
      case 0:
       var s = param[1];
       return caml_call1(Stdlib_Printf[1].call(null, oc, bf), s);
      case 1:
       var n = param[1];
       return caml_call1(Stdlib_Printf[1].call(null, oc, bg), n);
      default:
       var p = param[1];
       return caml_call1(Stdlib_Printf[1].call(null, oc, bh), p);
    }
   }
   function print_config(oc){
    function print(param){
     var v = param[2], x = param[1];
     return caml_call3
             (Stdlib_Printf[1].call(null, oc, bi), x, print_config_value, v);
    }
    Stdlib_List[17].call(null, print, configuration_variables);
    return Stdlib[63].call(null, oc);
   }
   function config_var(x){
    var match = Stdlib_List[47].call(null, x, configuration_variables);
    if(! match) return 0;
    var v = match[1];
    switch(v[0]){
      case 0:
       var s = v[1], s$0 = s; break;
      case 1:
       var n = v[1], s$0 = Stdlib_Int[12].call(null, n); break;
      default: var b = v[1], s$0 = Stdlib[30].call(null, b);
    }
    return [0, s$0];
   }
   var
    Dynlink_compilerlibs_Config =
      [0,
       version,
       bindir,
       standard_library,
       ccomp_type,
       c_compiler,
       c_output_obj,
       c_has_debug_prefix_map,
       as_has_debug_prefix_map,
       ocamlc_cflags,
       ocamlc_cppflags,
       ocamlopt_cflags,
       ocamlopt_cppflags,
       bytecomp_c_libraries,
       native_c_libraries,
       native_pack_linker,
       mkdll,
       mkexe,
       mkmaindll,
       default_rpath,
       mksharedlibrpath,
       ar,
       interface_suffix,
       exec_magic_number,
       cmi_magic_number,
       cmo_magic_number,
       cma_magic_number,
       cmx_magic_number,
       cmxa_magic_number,
       ast_intf_magic_number,
       ast_impl_magic_number,
       cmxs_magic_number,
       cmt_magic_number,
       linear_magic_number,
       max_tag,
       lazy_tag,
       max_young_wosize,
       stack_threshold,
       stack_safety_margin,
       architecture,
       model,
       system,
       asm,
       asm_cfi_supported,
       with_frame_pointers,
       ext_obj,
       ext_asm,
       ext_lib,
       ext_dll,
       ext_exe,
       default_executable_name,
       systhread_supported,
       0,
       host,
       target,
       flambda,
       with_flambda_invariants,
       with_cmm_invariants,
       profinfo,
       profinfo_width,
       safe_string,
       default_safe_string,
       flat_float_array,
       function_sections,
       windows_unicode,
       naked_pointers,
       supports_shared_libraries,
       afl_instrument,
       print_config,
       config_var,
       0];
   caml_register_global
    (1266, Dynlink_compilerlibs_Config, "Dynlink_compilerlibs.Config");
   function errorf(fmt){
    return Stdlib_Printf[13].call(null, function(err){return [1, err];}, fmt);
   }
   function encode_prefix(str){
    var buf = Stdlib_Buffer[1].call(null, caml_ml_string_length(str));
    function push_char(c){
     return 37 === c
             ? Stdlib_Buffer[16].call(null, buf, cst$6)
             : 58
               === c
               ? Stdlib_Buffer[16].call(null, buf, cst$7)
               : 61
                 === c
                 ? Stdlib_Buffer[16].call(null, buf, cst$8)
                 : Stdlib_Buffer[12].call(null, buf, c);
    }
    Stdlib_String[29].call(null, push_char, str);
    return Stdlib_Buffer[2].call(null, buf);
   }
   function decode_prefix(str){
    var buf = Stdlib_Buffer[1].call(null, caml_ml_string_length(str));
    function loop(i$1){
     var i = i$1;
     for(;;){
      if(caml_ml_string_length(str) <= i)
       return [0, Stdlib_Buffer[2].call(null, buf)];
      var c = caml_string_get(str, i), switcher = c - 58 | 0;
      if(3 < switcher >>> 0){
       if(-21 === switcher) break;
      }
      else if(1 < switcher - 1 >>> 0) return caml_call1(errorf(bl), c);
      Stdlib_Buffer[12].call(null, buf, c);
      var i$0 = i + 1 | 0;
      i = i$0;
     }
     function push(c){
      Stdlib_Buffer[12].call(null, buf, c);
      return loop(i + 2 | 0);
     }
     if((i + 1 | 0) === caml_ml_string_length(str))
      return caml_call1(errorf(bj), str);
     var c$0 = caml_string_get(str, i + 1 | 0), switcher$0 = c$0 - 35 | 0;
     if(11 >= switcher$0 >>> 0)
      switch(switcher$0){
        case 0:
         return push(37);
        case 8:
         return push(61);
        case 11:
         return push(58);
      }
     return caml_call1(errorf(bk), c$0);
    }
    return loop(0);
   }
   function encode_pair(param){
    var
     source = param[2],
     target = param[1],
     a = [0, encode_prefix(source), 0],
     b = [0, encode_prefix(target), a];
    return Stdlib_String[6].call(null, cst$9, b);
   }
   function decode_pair(str){
    try{var equal_pos = Stdlib_String[35].call(null, str, 61);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return caml_call1(errorf(bm), str);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    var
     encoded_target = Stdlib_String[15].call(null, str, 0, equal_pos),
     encoded_source =
       Stdlib_String[15].call
        (null,
         str,
         equal_pos + 1 | 0,
         (caml_ml_string_length(str) - equal_pos | 0) - 1 | 0),
     match = decode_prefix(encoded_target),
     match$0 = decode_prefix(encoded_source);
    if(0 === match[0]){
     var target = match[1];
     if(0 === match$0[0]){
      var source = match$0[1];
      return [0, [0, target, source]];
     }
     var err = match$0;
    }
    else
     var err = match;
    return err;
   }
   function encode_map(map){
    function encode_elem(param){
     if(! param) return cst$10;
     var pair = param[1];
     return encode_pair(pair);
    }
    var a = Stdlib_List[19].call(null, encode_elem, map);
    return Stdlib_String[6].call(null, cst$11, a);
   }
   function decode_map(str){
    var Shortcut = [248, cst_Shortcut, caml_fresh_oo_id(0)];
    function decode_or_empty(pair){
     if(pair === cst$115) return 0;
     var match = decode_pair(pair);
     if(0 === match[0]){var str = match[1]; return [0, str];}
     var err = match[1];
     throw caml_maybe_attach_backtrace([0, Shortcut, err], 1);
    }
    var pairs = Stdlib_String[16].call(null, 58, str);
    try{var map = Stdlib_List[19].call(null, decode_or_empty, pairs);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Shortcut) throw caml_maybe_attach_backtrace(exn, 0);
     var err = exn[2];
     return [1, err];
    }
    return [0, map];
   }
   function rewrite_opt(prefix_map, path){
    function is_prefix(param){
     if(! param) return 0;
     var
      source = param[1][2],
      a = caml_ml_string_length(source) <= caml_ml_string_length(path) ? 1 : 0;
     if(! a) return a;
     var
      b = Stdlib_String[15].call(null, path, 0, caml_ml_string_length(source));
     return Stdlib_String[8].call(null, source, b);
    }
    try{
     var
      a = Stdlib_List[9].call(null, prefix_map),
      val = Stdlib_List[38].call(null, is_prefix, a);
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    if(! val) return 0;
    var
     match = val[1],
     source = match[2],
     target = match[1],
     b =
       Stdlib_String[15].call
        (null,
         path,
         caml_ml_string_length(source),
         caml_ml_string_length(path) - caml_ml_string_length(source) | 0);
    return [0, Stdlib[28].call(null, target, b)];
   }
   function rewrite(prefix_map, path){
    var match = rewrite_opt(prefix_map, path);
    if(! match) return path;
    var path$0 = match[1];
    return path$0;
   }
   var
    Dynlink_compilerlibs_Build_pat =
      [0,
       encode_prefix,
       decode_prefix,
       encode_pair,
       decode_pair,
       encode_map,
       decode_map,
       rewrite_opt,
       rewrite];
   caml_register_global
    (1268,
     Dynlink_compilerlibs_Build_pat,
     "Dynlink_compilerlibs.Build_path_prefix_map");
   var
    Fatal_error = [248, cst_Dynlink_compilerlibs_Misc_, caml_fresh_oo_id(0)];
   function fatal_errorf(fmt){
    var a = Stdlib[98].call(null, fmt, bn), b = Stdlib[98].call(null, bo, a);
    return Stdlib_Format[136].call
            (null,
             function(param){
              throw caml_maybe_attach_backtrace(Fatal_error, 1);
             },
             Stdlib_Format[110],
             b);
   }
   function fatal_error(msg){return caml_call1(fatal_errorf(bp), msg);}
   function try_finally(opt, a, work){
    if(opt)
     var sth = opt[1], always = sth;
    else
     var always = function(param){};
    if(a)
     var sth$0 = a[1], exceptionally = sth$0;
    else
     var exceptionally = function(param){};
    try{var result = caml_call1(work, 0);}
    catch(work_exn$0){
     var
      work_exn = caml_wrap_exception(work_exn$0),
      work_bt = Stdlib_Printexc[12].call(null, 0);
     try{caml_call1(always, 0);}
     catch(always_exn$0){
      var
       always_exn = caml_wrap_exception(always_exn$0),
       always_bt = Stdlib_Printexc[12].call(null, 0);
      caml_call1(exceptionally, 0);
      caml_restore_raw_backtrace(always_exn, always_bt);
      throw caml_maybe_attach_backtrace(always_exn, 0);
     }
     caml_call1(exceptionally, 0);
     caml_restore_raw_backtrace(work_exn, work_bt);
     throw caml_maybe_attach_backtrace(work_exn, 0);
    }
    try{caml_call1(always, 0); return result;}
    catch(always_exn){
     var
      always_exn$0 = caml_wrap_exception(always_exn),
      always_bt$0 = Stdlib_Printexc[12].call(null, 0);
     caml_call1(exceptionally, 0);
     caml_restore_raw_backtrace(always_exn$0, always_bt$0);
     throw caml_maybe_attach_backtrace(always_exn$0, 0);
    }
   }
   function reraise_preserving_backtrace(e, f){
    var bt = Stdlib_Printexc[12].call(null, 0);
    caml_call1(f, 0);
    caml_restore_raw_backtrace(e, bt);
    throw caml_maybe_attach_backtrace(e, 0);
   }
   function set_refs(l){
    return Stdlib_List[17].call
            (null,
             function(param){
              var v = param[2], r = param[1];
              r[1] = v;
              return 0;
             },
             l);
   }
   function protect_refs(refs, f){
    var
     backup =
       Stdlib_List[19].call
        (null, function(param){var r = param[1]; return [0, r, r[1]];}, refs);
    set_refs(refs);
    return Stdlib_Fun[4].call
            (null, function(param){return set_refs(backup);}, f);
   }
   function map_end(f, l1, l2){
    if(! l1) return l2;
    var tl = l1[2], hd = l1[1], a = map_end(f, tl, l2);
    return [0, caml_call1(f, hd), a];
   }
   function map_left_right(f, param){
    if(! param) return 0;
    var tl = param[2], hd = param[1], res = caml_call1(f, hd);
    return [0, res, map_left_right(f, tl)];
   }
   function for_all2(pred, l1$0, l2$0){
    var l1 = l1$0, l2 = l2$0;
    for(;;){
     if(l1){
      if(l2){
       var
        tl2 = l2[2],
        hd2 = l2[1],
        tl1 = l1[2],
        hd1 = l1[1],
        a = caml_call2(pred, hd1, hd2);
       if(! a) return a;
       l1 = tl1;
       l2 = tl2;
       continue;
      }
     }
     else if(! l2) return 1;
     return 0;
    }
   }
   function replicate_list(elem, n){
    return 0 < n ? [0, elem, replicate_list(elem, n - 1 | 0)] : 0;
   }
   function list_remove(x, param){
    if(! param) return 0;
    var tl = param[2], hd = param[1];
    return caml_equal(hd, x) ? tl : [0, hd, list_remove(x, tl)];
   }
   function split_last(param){
    if(! param) throw caml_maybe_attach_backtrace([0, Assert_failure, bq], 1);
    var x = param[1];
    if(! param[2]) return [0, 0, x];
    var
     tl = param[2],
     match = split_last(tl),
     last = match[2],
     lst = match[1];
    return [0, [0, x, lst], last];
   }
   function compare(cmp, l1$0, l2$0){
    var l1 = l1$0, l2 = l2$0;
    for(;;){
     if(! l1) return l2 ? -1 : 0;
     var t1 = l1[2], h1 = l1[1];
     if(! l2) return 1;
     var t2 = l2[2], h2 = l2[1], c = caml_call2(cmp, h1, h2);
     if(0 !== c) return c;
     l1 = t1;
     l2 = t2;
    }
   }
   function equal(eq, l1$0, l2$0){
    var l1 = l1$0, l2 = l2$0;
    for(;;){
     if(l1){
      if(l2){
       var
        tl2 = l2[2],
        hd2 = l2[1],
        tl1 = l1[2],
        hd1 = l1[1],
        a = caml_call2(eq, hd1, hd2);
       if(! a) return a;
       l1 = tl1;
       l2 = tl2;
       continue;
      }
     }
     else if(! l2) return 1;
     return 0;
    }
   }
   function map2_prefix(f, l1, l2){
    var acc = 0, l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return [0, Stdlib_List[9].call(null, acc), l2$0];
     var t1 = l1$0[2], h1 = l1$0[1];
     if(! l2$0)
      throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_map2_prefix], 1);
     var
      t2 = l2$0[2],
      h2 = l2$0[1],
      h = caml_call2(f, h1, h2),
      acc$0 = [0, h, acc];
     acc = acc$0;
     l1$0 = t1;
     l2$0 = t2;
    }
   }
   function some_if_all_elements_are_some(l){
    var acc = 0, l$0 = l;
    for(;;){
     if(! l$0) return [0, Stdlib_List[9].call(null, acc)];
     var match = l$0[1];
     if(! match) return 0;
     var t = l$0[2], h = match[1], acc$0 = [0, h, acc];
     acc = acc$0;
     l$0 = t;
    }
   }
   function split_at(n, l){
    var n$0 = n, acc = 0, l$0 = l;
    for(;;){
     if(0 === n$0) return [0, Stdlib_List[9].call(null, acc), l$0];
     if(! l$0)
      throw caml_maybe_attach_backtrace([0, Stdlib[6], cst_split_at], 1);
     var q = l$0[2], t = l$0[1], acc$0 = [0, t, acc], n$1 = n$0 - 1 | 0;
     n$0 = n$1;
     acc = acc$0;
     l$0 = q;
    }
   }
   function is_prefix(equal, t$1, of$1){
    var t = t$1, of = of$1;
    for(;;){
     if(! t) return of ? 1 : 1;
     var t$0 = t[2], x1 = t[1];
     if(! of) return 0;
     var of$0 = of[2], x2 = of[1], a = caml_call2(equal, x1, x2);
     if(! a) return a;
     t = t$0;
     of = of$0;
    }
   }
   function find_and_chop_longest_common_p(equal, first, second){
    var longest_common_prefix_rev = 0, l1 = first, l2 = second;
    for(;;){
     if(l1 && l2){
      var l2$0 = l2[2], elt2 = l2[1], l1$0 = l1[2], elt1 = l1[1];
      if(caml_call2(equal, elt1, elt2)){
       var longest_common_prefix_rev$0 = [0, elt1, longest_common_prefix_rev];
       longest_common_prefix_rev = longest_common_prefix_rev$0;
       l1 = l1$0;
       l2 = l2$0;
       continue;
      }
     }
     return [0, Stdlib_List[9].call(null, longest_common_prefix_rev), l1, l2];
    }
   }
   function print(print_contents, ppf, t){
    if(! t) return Stdlib_Format[13].call(null, ppf, cst_None);
    var contents = t[1];
    return caml_call2
            (Stdlib_Format[129].call(null, ppf)(br), print_contents, contents);
   }
   var Option = [0, print];
   function exists2(p, a1, a2){
    var n = a1.length - 1;
    if(a2.length - 1 !== n)
     Stdlib[1].call(null, cst_Misc_Stdlib_Array_exists2);
    var i = 0;
    for(;;){
     if(i === n) return 0;
     if(caml_call2(p, a1[i + 1], a2[i + 1])) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_alli(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 1;
     if(! caml_call2(p, i, a[i + 1])) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function all_somes(a){
    try{
     var
      b =
        [0,
         Stdlib_Array[15].call
          (null,
           function(param){
            if(! param) throw Stdlib[3];
            var x = param[1];
            return x;
           },
           a)];
     return b;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var
    Array = [0, exists2, for_alli, all_somes],
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    concat = Stdlib_String[6],
    cat = Stdlib_String[7],
    equal$0 = Stdlib_String[8],
    compare$0 = Stdlib_String[9],
    starts_with = Stdlib_String[10],
    ends_with = Stdlib_String[11],
    contains_from = Stdlib_String[12],
    rcontains_from = Stdlib_String[13],
    contains = Stdlib_String[14],
    sub = Stdlib_String[15],
    split_on_char = Stdlib_String[16],
    map = Stdlib_String[17],
    mapi = Stdlib_String[18],
    fold_left = Stdlib_String[19],
    fold_right = Stdlib_String[20],
    exists = Stdlib_String[22],
    trim = Stdlib_String[23],
    escaped = Stdlib_String[24],
    uppercase_ascii = Stdlib_String[25],
    lowercase_ascii = Stdlib_String[26],
    capitalize_ascii = Stdlib_String[27],
    uncapitalize_ascii = Stdlib_String[28],
    iter = Stdlib_String[29],
    iteri = Stdlib_String[30],
    index_from = Stdlib_String[31],
    index_from_opt = Stdlib_String[32],
    rindex_from = Stdlib_String[33],
    rindex_from_opt = Stdlib_String[34],
    index = Stdlib_String[35],
    index_opt = Stdlib_String[36],
    rindex = Stdlib_String[37],
    rindex_opt = Stdlib_String[38],
    to_seq = Stdlib_String[39],
    to_seqi = Stdlib_String[40],
    of_seq = Stdlib_String[41],
    get_utf_8_uchar = Stdlib_String[42],
    is_valid_utf_8 = Stdlib_String[43],
    get_utf_16be_uchar = Stdlib_String[44],
    is_valid_utf_16be = Stdlib_String[45],
    get_utf_16le_uchar = Stdlib_String[46],
    is_valid_utf_16le = Stdlib_String[47],
    blit = Stdlib_String[48],
    copy = Stdlib_String[49],
    fill = Stdlib_String[50],
    uppercase = Stdlib_String[51],
    lowercase = Stdlib_String[52],
    capitalize = Stdlib_String[53],
    uncapitalize = Stdlib_String[54],
    get_uint8 = Stdlib_String[55],
    get_int8 = Stdlib_String[56],
    get_uint16_ne = Stdlib_String[57],
    get_uint16_be = Stdlib_String[58],
    get_uint16_le = Stdlib_String[59],
    get_int16_ne = Stdlib_String[60],
    get_int16_be = Stdlib_String[61],
    get_int16_le = Stdlib_String[62],
    get_int32_ne = Stdlib_String[63],
    get_int32_be = Stdlib_String[64],
    get_int32_le = Stdlib_String[65],
    get_int64_ne = Stdlib_String[66],
    get_int64_be = Stdlib_String[67],
    get_int64_le = Stdlib_String[68],
    Set = Stdlib_Set[1].call(null, [0, Stdlib_String[9]]),
    Map = Stdlib_Map[1].call(null, [0, Stdlib_String[9]]),
    equal$1 = Stdlib_String[8],
    hash = Stdlib_Hashtbl[28],
    Tbl = Stdlib_Hashtbl[26].call(null, [0, equal$1, hash]);
   function for_all(f, t){
    var len = caml_ml_string_length(t), i = 0;
    for(;;){
     var a = i === len ? 1 : 0;
     if(a)
      var b = a;
     else{
      var c = caml_call1(f, caml_string_get(t, i));
      if(c){var i$0 = i + 1 | 0; i = i$0; continue;}
      var b = c;
     }
     return b;
    }
   }
   function print$0(ppf, t){return Stdlib_Format[13].call(null, ppf, t);}
   function find_in_path(path, name){
    if(! Stdlib_Filename[6].call(null, name)){
     if(caml_sys_file_exists(name)) return name;
     throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    }
    var param = path;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var
      rem = param[2],
      dir = param[1],
      fullname = Stdlib_Filename[4].call(null, dir, name);
     if(caml_sys_file_exists(fullname)) return fullname;
     param = rem;
    }
   }
   function find_in_path_rel(path, name){
    function simplify(s$0){
     var s = s$0;
     for(;;){
      var
       base = Stdlib_Filename[13].call(null, s),
       dir = Stdlib_Filename[14].call(null, s);
      if(dir === s) return dir;
      if(base !== Stdlib_Filename[1]){
       var a = simplify(dir);
       return Stdlib_Filename[4].call(null, a, base);
      }
      s = dir;
     }
    }
    var param = path;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var
      rem = param[2],
      dir = param[1],
      fullname = simplify(Stdlib_Filename[4].call(null, dir, name));
     if(caml_sys_file_exists(fullname)) return fullname;
     param = rem;
    }
   }
   function find_in_path_uncap(path, name){
    var uname = Stdlib_String[28].call(null, name), param = path;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var
      rem = param[2],
      dir = param[1],
      fullname = Stdlib_Filename[4].call(null, dir, name),
      ufullname = Stdlib_Filename[4].call(null, dir, uname);
     if(caml_sys_file_exists(ufullname)) return ufullname;
     if(caml_sys_file_exists(fullname)) return fullname;
     param = rem;
    }
   }
   function remove_file(filename){
    try{
     var
      a = caml_sys_file_exists(filename),
      b = a ? runtime.caml_sys_remove(filename) : a;
     return b;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib[11]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function expand_directory(alt, s){
    if(0 < caml_ml_string_length(s) && 43 === caml_string_get(s, 0)){
     var
      a = Stdlib_String[15].call(null, s, 1, caml_ml_string_length(s) - 1 | 0);
     return Stdlib_Filename[4].call(null, alt, a);
    }
    return s;
   }
   var path_separator = Stdlib_Sys[4] !== cst_Win32 ? 58 : 59;
   function split_path_contents(opt, s){
    if(opt) var sth = opt[1], sep = sth; else var sep = path_separator;
    return s !== cst$115 ? Stdlib_String[16].call(null, sep, s) : 0;
   }
   function create_hashtable(size, init){
    var tbl = Stdlib_Hashtbl[1].call(null, 0, size);
    Stdlib_List[17].call
     (null,
      function(param){
       var data = param[2], key = param[1];
       return Stdlib_Hashtbl[5].call(null, tbl, key, data);
      },
      init);
    return tbl;
   }
   function copy_file(ic, oc){
    var buff = caml_create_bytes(4096);
    for(;;){
     var n = Stdlib[84].call(null, ic, buff, 0, 4096);
     if(0 === n) return 0;
     Stdlib[68].call(null, oc, buff, 0, n);
    }
   }
   function copy_file_chunk(ic, oc, len){
    var buff = caml_create_bytes(4096), n = len;
    for(;;){
     if(0 >= n) return 0;
     var
      a = Stdlib_Int[10].call(null, n, 4096),
      r = Stdlib[84].call(null, ic, buff, 0, a);
     if(0 === r) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
     Stdlib[68].call(null, oc, buff, 0, r);
     var n$0 = n - r | 0;
     n = n$0;
    }
   }
   function string_of_file(ic){
    var
     b = Stdlib_Buffer[1].call(null, 65536),
     buff = caml_create_bytes(4096);
    for(;;){
     var n = Stdlib[84].call(null, ic, buff, 0, 4096);
     if(0 === n) return Stdlib_Buffer[2].call(null, b);
     Stdlib_Buffer[19].call(null, b, buff, 0, n);
    }
   }
   function output_to_file_via_temporary(opt, filename, fn){
    if(opt) var sth = opt[1], mode = sth; else var mode = bt;
    var
     a = Stdlib_Filename[13].call(null, filename),
     b = [0, Stdlib_Filename[14].call(null, filename)],
     match = Stdlib_Filename[17].call(null, [0, mode], bs, b, a, cst_tmp),
     oc = match[2],
     temp_filename = match[1];
    try{var res = caml_call2(fn, temp_filename, oc);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     Stdlib[76].call(null, oc);
     remove_file(temp_filename);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    Stdlib[76].call(null, oc);
    try{runtime.caml_sys_rename(temp_filename, filename); return res;}
    catch(exn){
     var exn$0 = caml_wrap_exception(exn);
     remove_file(temp_filename);
     throw caml_maybe_attach_backtrace(exn$0, 0);
    }
   }
   function protect_writing_to_file(filename, f){
    var outchan = Stdlib[61].call(null, filename);
    return try_finally
            ([0, function(param){return Stdlib[76].call(null, outchan);}],
             [0, function(param){return remove_file(filename);}],
             function(param){return caml_call1(f, outchan);});
   }
   function log2(n){return 1 < n ? 1 + log2(n >> 1) | 0 : 0;}
   function align(n, a){
    return 0 <= n ? ((n + a | 0) - 1 | 0) & (- a | 0) : n & (- a | 0);
   }
   function no_overflow_add(a, b){
    return (a ^ b | a ^ Stdlib[21].call(null, a + b | 0)) < 0 ? 1 : 0;
   }
   function no_overflow_sub(a, b){
    return (a ^ Stdlib[21].call(null, b) | b ^ (a - b | 0)) < 0 ? 1 : 0;
   }
   function no_overflow_mul(a, b){
    var c = a === Stdlib[20] ? 1 : 0, d = c ? b < 0 ? 1 : 0 : c;
    if(d)
     var e = d;
    else
     var
      f = 0 !== b ? 1 : 0,
      e = f ? caml_div(caml_mul(a, b), b) !== a ? 1 : 0 : f;
    return 1 - e;
   }
   function no_overflow_lsl(a, k){
    var c = 0 <= k ? 1 : 0;
    if(c){
     var d = k < (Stdlib_Sys[9] - 1 | 0) ? 1 : 0;
     if(d)
      var
       e = Stdlib[20] >> k <= a ? 1 : 0,
       b = e ? a <= Stdlib[19] >> k ? 1 : 0 : e;
     else
      var b = d;
    }
    else
     var b = c;
    return b;
   }
   function int(str){
    if(0 !== caml_ml_string_length(str) && 45 !== caml_string_get(str, 0))
     return - caml_int_of_string(Stdlib[28].call(null, cst$12, str)) | 0;
    return caml_int_of_string(str);
   }
   function int32(str){
    if(0 !== caml_ml_string_length(str) && 45 !== caml_string_get(str, 0))
     return - caml_int_of_string(Stdlib[28].call(null, cst$12, str)) | 0;
    return caml_int_of_string(str);
   }
   function int64(str){
    if(0 !== caml_ml_string_length(str) && 45 !== caml_string_get(str, 0))
     return caml_int64_neg
             (caml_int64_of_string(Stdlib[28].call(null, cst$12, str)));
    return caml_int64_of_string(str);
   }
   function nativeint(str){
    if(0 !== caml_ml_string_length(str) && 45 !== caml_string_get(str, 0))
     return - caml_int_of_string(Stdlib[28].call(null, cst$12, str)) | 0;
    return caml_int_of_string(str);
   }
   function chop_extensions(file){
    var
     dirname = Stdlib_Filename[14].call(null, file),
     basename = Stdlib_Filename[13].call(null, file);
    try{
     var
      pos = Stdlib_String[35].call(null, basename, 46),
      basename$0 = Stdlib_String[15].call(null, basename, 0, pos);
     a:
     {
      if
       (Stdlib_Filename[6].call(null, file) && dirname === Stdlib_Filename[1]){var basename$1 = basename$0; break a;}
      var basename$1 = Stdlib_Filename[4].call(null, dirname, basename$0);
     }
     return basename$1;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return file;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function search_substring(pat, str, start){
    var i = start, j = 0;
    for(;;){
     if(caml_ml_string_length(pat) <= j) return i;
     if(caml_ml_string_length(str) <= (i + j | 0))
      throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var a = caml_string_get(pat, j);
     if(caml_string_get(str, i + j | 0) === a){var j$0 = j + 1 | 0; j = j$0;}
     else{var i$0 = i + 1 | 0; i = i$0; j = 0;}
    }
   }
   function replace_substring(before, after, str){
    var acc = 0, curr = 0;
    for(;;){
     try{var next = search_substring(before, str, curr);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var
       suffix =
         Stdlib_String[15].call
          (null, str, curr, caml_ml_string_length(str) - curr | 0),
       a = Stdlib_List[9].call(null, [0, suffix, acc]);
      return Stdlib_String[6].call(null, after, a);
     }
     var
      prefix = Stdlib_String[15].call(null, str, curr, next - curr | 0),
      curr$0 = next + caml_ml_string_length(before) | 0,
      acc$0 = [0, prefix, acc];
     acc = acc$0;
     curr = curr$0;
    }
   }
   function rev_split_words(s){
    var i$2 = 0, res$0 = 0;
    for(;;){
     var i = i$2;
     for(;;){
      if(caml_ml_string_length(s) <= i) return res$0;
      var a = caml_string_get(s, i) - 9 | 0;
      if(4 < a >>> 0){if(23 !== a) break;} else if(1 >= a - 2 >>> 0) break;
      var i$0 = i + 1 | 0;
      i = i$0;
     }
     var j = i + 1 | 0, j$0 = j;
     for(;;){
      if(caml_ml_string_length(s) <= j$0)
       return [0, Stdlib_String[15].call(null, s, i, j$0 - i | 0), res$0];
      var b = caml_string_get(s, j$0) - 9 | 0;
      a:
      {
       if(4 < b >>> 0){
        if(23 !== b) break a;
       }
       else if(1 >= b - 2 >>> 0) break a;
       var
        i$1 = j$0 + 1 | 0,
        res = [0, Stdlib_String[15].call(null, s, i, j$0 - i | 0), res$0];
       i$2 = i$1;
       res$0 = res;
       break;
      }
      var j$1 = j$0 + 1 | 0;
      j$0 = j$1;
     }
    }
   }
   function get_ref(r){var v = r[1]; r[1] = 0; return v;}
   function set_or_ignore(f, opt, x){
    var match = caml_call1(f, x);
    if(! match) return 0;
    var y = match[1];
    opt[1] = [0, y];
    return 0;
   }
   function fst3(param){var x = param[1]; return x;}
   function snd3(param){var x = param[2]; return x;}
   function thd3(param){var x = param[3]; return x;}
   function fst4(param){var x = param[1]; return x;}
   function snd4(param){var x = param[2]; return x;}
   function thd4(param){var x = param[3]; return x;}
   function for4(param){var x = param[4]; return x;}
   function create(str_size){
    var
     tbl_size = caml_div(str_size, Stdlib_Sys[12]) + 1 | 0,
     tbl = caml_make_vect(tbl_size, Stdlib_Bytes[3]),
     a = tbl_size - 2 | 0,
     c = 0;
    if(a >= 0){
     var i = c;
     for(;;){
      var e = caml_create_bytes(Stdlib_Sys[12]);
      caml_check_bound(tbl, i)[i + 1] = e;
      var f = i + 1 | 0;
      if(a === i) break;
      i = f;
     }
    }
    var
     b = tbl_size - 1 | 0,
     d = caml_create_bytes(caml_mod(str_size, Stdlib_Sys[12]));
    caml_check_bound(tbl, b)[b + 1] = d;
    return tbl;
   }
   function length(tbl){
    var
     tbl_size = tbl.length - 1,
     a = tbl_size - 1 | 0,
     b = caml_ml_bytes_length(caml_check_bound(tbl, a)[a + 1]);
    return caml_mul(Stdlib_Sys[12], tbl_size - 1 | 0) + b | 0;
   }
   function get(tbl, ind){
    var b = caml_mod(ind, Stdlib_Sys[12]), a = caml_div(ind, Stdlib_Sys[12]);
    return caml_bytes_get(caml_check_bound(tbl, a)[a + 1], b);
   }
   function set(tbl, ind, c){
    var b = caml_mod(ind, Stdlib_Sys[12]), a = caml_div(ind, Stdlib_Sys[12]);
    return caml_bytes_set(caml_check_bound(tbl, a)[a + 1], b, c);
   }
   function blit$0(src, srcoff, dst, dstoff, len){
    var a = len - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      set(dst, dstoff + i | 0, get(src, srcoff + i | 0));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function blit_string(src, srcoff, dst, dstoff, len){
    var a = len - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      set(dst, dstoff + i | 0, caml_string_get(src, srcoff + i | 0));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function output(oc, tbl, pos, len){
    var a = (pos + len | 0) - 1 | 0;
    if(a >= pos){
     var i = pos;
     for(;;){
      var b = get(tbl, i);
      Stdlib[65].call(null, oc, b);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function input_bytes_into(tbl, ic, len){
    var count = [0, len];
    return Stdlib_Array[13].call
            (null,
             function(str){
              var
               chunk =
                 Stdlib_Int[10].call
                  (null, count[1], caml_ml_bytes_length(str));
              Stdlib[85].call(null, ic, str, 0, chunk);
              count[1] = count[1] - chunk | 0;
              return 0;
             },
             tbl);
   }
   function input_bytes(ic, len){
    var tbl = create(len);
    input_bytes_into(tbl, ic, len);
    return tbl;
   }
   var
    LongString =
      [0,
       create,
       length,
       get,
       set,
       blit$0,
       blit_string,
       output,
       input_bytes_into,
       input_bytes];
   function edit_distance(a, b, cutoff){
    var
     lb = caml_ml_string_length(b),
     la = caml_ml_string_length(a),
     n = Stdlib_Int[11].call(null, la, lb),
     cutoff$0 = Stdlib_Int[10].call(null, n, cutoff);
    if(cutoff$0 < Stdlib[18].call(null, la - lb | 0)) return 0;
    var
     m = Stdlib_Array[3].call(null, la + 1 | 0, lb + 1 | 0, cutoff$0 + 1 | 0);
    caml_check_bound(caml_check_bound(m, 0)[1], 0)[1] = 0;
    var o = 1;
    if(la >= 1){
     var i$0 = o;
     for(;;){
      caml_check_bound(caml_check_bound(m, i$0)[i$0 + 1], 0)[1] = i$0;
      var C = i$0 + 1 | 0;
      if(la === i$0) break;
      i$0 = C;
     }
    }
    var p = 1;
    if(lb >= 1){
     var j$0 = p;
     for(;;){
      caml_check_bound(caml_check_bound(m, 0)[1], j$0)[j$0 + 1] = j$0;
      var B = j$0 + 1 | 0;
      if(lb === j$0) break;
      j$0 = B;
     }
    }
    var q = 1;
    if(la >= 1){
     var i = q;
     for(;;){
      var
       c = Stdlib_Int[11].call(null, 1, (i - cutoff$0 | 0) - 1 | 0),
       d = Stdlib_Int[10].call(null, lb, (i + cutoff$0 | 0) + 1 | 0);
      if(d >= c){
       var j = c;
       for(;;){
        var
         s = caml_string_get(b, j - 1 | 0),
         cost = caml_string_get(a, i - 1 | 0) === s ? 0 : 1,
         e = j - 1 | 0,
         f = i - 1 | 0,
         g = j - 1 | 0,
         t =
           caml_check_bound(caml_check_bound(m, f)[f + 1], e)[e + 1] + cost
           | 0,
         h = i - 1 | 0,
         u = caml_check_bound(caml_check_bound(m, i)[i + 1], g)[g + 1],
         v = caml_check_bound(caml_check_bound(m, h)[h + 1], j)[j + 1],
         w = 1 + Stdlib_Int[10].call(null, v, u) | 0,
         best = Stdlib_Int[10].call(null, w, t);
        if(1 < i && 1 < j){
         var x = caml_string_get(b, j - 2 | 0);
         if(caml_string_get(a, i - 1 | 0) === x){
          var y = caml_string_get(b, j - 1 | 0);
          if(caml_string_get(a, i - 2 | 0) === y)
           var
            k = j - 2 | 0,
            l = i - 2 | 0,
            z =
              caml_check_bound(caml_check_bound(m, l)[l + 1], k)[k + 1] + cost
              | 0,
            best$0 = Stdlib_Int[10].call(null, best, z);
          else
           var best$0 = best;
         }
         else
          var best$0 = best;
        }
        else
         var best$0 = best;
        caml_check_bound(caml_check_bound(m, i)[i + 1], j)[j + 1] = best$0;
        var A = j + 1 | 0;
        if(d === j) break;
        j = A;
       }
      }
      var r = i + 1 | 0;
      if(la === i) break;
      i = r;
     }
    }
    var
     result = caml_check_bound(caml_check_bound(m, la)[la + 1], lb)[lb + 1];
    return cutoff$0 < result ? 0 : [0, result];
   }
   function spellcheck(env, target){
    var
     switcher = caml_ml_string_length(target) - 1 | 0,
     cutoff =
       3 < switcher >>> 0
        ? 1 < switcher - 4 >>> 0 ? 3 : 2
        : 2 <= switcher ? 1 : 0,
     env$0 =
       Stdlib_List[59].call
        (null,
         function(s1, s2){return Stdlib_String[9].call(null, s2, s1);},
         env);
    return Stdlib_List[25].call
             (null,
              function(acc, head){
               var match = edit_distance(target, head, cutoff);
               if(! match) return acc;
               var dist = match[1], best_dist = acc[2], best_choice = acc[1];
               return dist < best_dist
                       ? [0, [0, head, 0], dist]
                       : dist
                         === best_dist
                         ? [0, [0, head, best_choice], dist]
                         : acc;
              },
              [0, 0, Stdlib[19]],
              env$0)
            [1];
   }
   function did_you_mean(ppf, get_choices){
    Stdlib_Format[129].call(null, ppf)(bu);
    var choices = caml_call1(get_choices, 0);
    if(! choices) return 0;
    var
     match = split_last(choices),
     last = match[2],
     rest = match[1],
     a = 0 === rest ? cst$13 : cst_or,
     b = Stdlib_String[6].call(null, cst$14, rest);
    return caml_call3(Stdlib_Format[129].call(null, ppf)(bv), b, a, last);
   }
   function cut_at(s, c){
    var
     pos = Stdlib_String[35].call(null, s, c),
     a =
       Stdlib_String[15].call
        (null, s, pos + 1 | 0, (caml_ml_string_length(s) - pos | 0) - 1 | 0);
    return [0, Stdlib_String[15].call(null, s, 0, pos), a];
   }
   function ordinal_suffix(n){
    var
     teen = 1 === ((n % 100 | 0) / 10 | 0) ? 1 : 0,
     switcher = (n % 10 | 0) - 1 | 0;
    if(2 >= switcher >>> 0)
     switch(switcher){
       case 0:
        if(! teen) return cst_st; break;
       case 1:
        if(! teen) return cst_nd; break;
       default: if(! teen) return cst_rd;
     }
    return cst_th;
   }
   function ansi_of_color(param){
    switch(param){
      case 0:
       return cst_0;
      case 1:
       return cst_1;
      case 2:
       return cst_2;
      case 3:
       return cst_3;
      case 4:
       return cst_4;
      case 5:
       return cst_5;
      case 6:
       return cst_6;
      default: return cst_7;
    }
   }
   function code_of_style(param){
    if(typeof param === "number") return 0 === param ? cst_1$0 : cst_0$0;
    if(0 === param[0]){
     var c = param[1], a = ansi_of_color(c);
     return Stdlib[28].call(null, cst_3$0, a);
    }
    var c$0 = param[1], b = ansi_of_color(c$0);
    return Stdlib[28].call(null, cst_4$0, b);
   }
   function ansi_of_style_l(l){
    if(l)
     if(l[2])
      var
       a = Stdlib_List[19].call(null, code_of_style, l),
       s = Stdlib_String[6].call(null, cst$15, a);
     else
      var s$0 = l[1], s = code_of_style(s$0);
    else
     var s = code_of_style(1);
    var b = Stdlib[28].call(null, s, cst_m);
    return Stdlib[28].call(null, cst$16, b);
   }
   var
    Style = [248, cst_Dynlink_compilerlibs_Misc_$0, caml_fresh_oo_id(0)],
    cur_styles = [0, default_styles];
   function get_styles(param){return cur_styles[1];}
   function set_styles(s){cur_styles[1] = s; return 0;}
   function style_of_tag(s){
    var tag = s[1];
    if(tag === Stdlib_Format[79]){
     var match = s[2];
     if(match === cst_error$1) return cur_styles[1][1];
     if(match === "loc") return cur_styles[1][3];
     if(match === cst_warning$1) return cur_styles[1][2];
    }
    var tag$0 = s[1];
    if(tag$0 !== Style) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var s$0 = s[2];
    return s$0;
   }
   var color_enabled = [0, 1];
   function set_color_tag_handling(ppf){
    var
     functions = Stdlib_Format[106].call(null, ppf, 0),
     or_else = functions[2],
     or_else$0 = functions[1],
     functions$0 =
       [0,
        function(s){
         try{
          var
           style = style_of_tag(s),
           a = color_enabled[1] ? ansi_of_style_l(style) : cst$17;
          return a;
         }
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn === Stdlib[8]) return caml_call1(or_else$0, s);
          throw caml_maybe_attach_backtrace(exn, 0);
         }
        },
        function(s){
         try{
          style_of_tag(s);
          var a = color_enabled[1] ? ansi_of_style_l(bw) : cst$18;
          return a;
         }
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn === Stdlib[8]) return caml_call1(or_else, s);
          throw caml_maybe_attach_backtrace(exn, 0);
         }
        },
        functions[3],
        functions[4]];
    Stdlib_Format[88].call(null, ppf, 1);
    Stdlib_Format[104].call(null, ppf, functions$0);
    return 0;
   }
   var
    default_setting = 0,
    first = [0, 1],
    formatter_l =
      [0,
       Stdlib_Format[109],
       [0, Stdlib_Format[110], [0, Stdlib_Format[113], 0]]];
   function enable_color(param){
    switch(param){
      case 0:
       try{var d = caml_sys_getenv(cst_TERM), term = d;}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
        var term = cst$19;
       }
       var a = term !== cst_dumb ? 1 : 0;
       if(a)
        var
         b = term !== cst$115 ? 1 : 0,
         c = b ? caml_sys_isatty(Stdlib[40]) : b;
       else
        var c = a;
       return c;
      case 1:
       return 1;
      default: return 0;
    }
   }
   function setup(o){
    if(first[1]){
     first[1] = 0;
     Stdlib_Format[89].call(null, 1);
     Stdlib_List[17].call(null, set_color_tag_handling, formatter_l);
     if(o)
      var s = o[1], a = enable_color(s);
     else
      var a = enable_color(default_setting);
     color_enabled[1] = a;
    }
    return 0;
   }
   var default_setting$0 = 0, Error_style = [0, default_setting$0];
   function normalise_eol(s){
    var
     b = Stdlib_Buffer[1].call(null, 80),
     a = caml_ml_string_length(s) - 1 | 0,
     c = 0;
    if(a >= 0){
     var i = c;
     for(;;){
      if(13 !== caml_string_get(s, i)){
       var d = caml_string_get(s, i);
       Stdlib_Buffer[12].call(null, b, d);
      }
      var e = i + 1 | 0;
      if(a === i) break;
      i = e;
     }
    }
    return Stdlib_Buffer[2].call(null, b);
   }
   function delete_eol_spaces(src){
    var
     len_src = caml_ml_string_length(src),
     dst = caml_create_bytes(len_src),
     i_src = 0,
     i_dst = 0;
    a:
    for(;;){
     b:
     if(i_src !== len_src){
      var c = caml_string_get(src, i_src);
      if(9 !== c && 32 !== c){
       caml_bytes_set(dst, i_dst, c);
       var i_dst$0 = i_dst + 1 | 0, i_src$1 = i_src + 1 | 0;
       i_src = i_src$1;
       i_dst = i_dst$0;
       continue;
      }
      var i_src$0 = i_src + 1 | 0, spaces = 1, i_src$2 = i_src$0;
      for(;;){
       if(i_src$2 === len_src) break b;
       var switcher = caml_string_get(src, i_src$2) - 9 | 0;
       if(1 < switcher >>> 0){
        if(23 !== switcher) break;
       }
       else if(switcher){
        caml_bytes_set(dst, i_dst, 10);
        var i_dst$2 = i_dst + 1 | 0, i_src$5 = i_src$2 + 1 | 0;
        i_src = i_src$5;
        i_dst = i_dst$2;
        continue a;
       }
       var i_src$3 = i_src$2 + 1 | 0, spaces$0 = spaces + 1 | 0;
       spaces = spaces$0;
       i_src$2 = i_src$3;
      }
      var a = 0;
      if(spaces >= 0){
       var n = a;
       for(;;){
        caml_bytes_set
         (dst,
          i_dst + n | 0,
          caml_string_get(src, (i_src$2 - spaces | 0) + n | 0));
        var b = n + 1 | 0;
        if(spaces === n) break;
        n = b;
       }
      }
      var i_dst$1 = (i_dst + spaces | 0) + 1 | 0, i_src$4 = i_src$2 + 1 | 0;
      i_src = i_src$4;
      i_dst = i_dst$1;
      continue;
     }
     return Stdlib_Bytes[8].call(null, dst, 0, i_dst);
    }
   }
   function pp_two_columns(opt, max_lines, ppf, lines){
    if(opt) var sth = opt[1], sep = sth; else var sep = cst$20;
    var
     left_column_size =
       Stdlib_List[25].call
        (null,
         function(acc, param){
          var s = param[1];
          return Stdlib_Int[11].call(null, acc, caml_ml_string_length(s));
         },
         0,
         lines),
     lines_nb = Stdlib_List[1].call(null, lines);
    a:
    {
     if(max_lines){
      var max_lines$0 = max_lines[1];
      if(max_lines$0 < lines_nb){
       var
        printed_lines = max_lines$0 - 1 | 0,
        lines_before = (printed_lines / 2 | 0) + (printed_lines % 2 | 0) | 0,
        lines_after = printed_lines / 2 | 0,
        ellipsed_last = (lines_nb - lines_after | 0) - 1 | 0,
        ellipsed_first = lines_before;
       break a;
      }
     }
     var ellipsed_last = -1, ellipsed_first = -1;
    }
    Stdlib_Format[129].call(null, ppf)(bx);
    Stdlib_List[18].call
     (null,
      function(k, param){
       var line_r = param[2], line_l = param[1];
       if(k === ellipsed_first) Stdlib_Format[129].call(null, ppf)(by);
       if(ellipsed_first <= k && k <= ellipsed_last) return 0;
       return caml_call4
               (Stdlib_Format[129].call(null, ppf)(bz),
                left_column_size,
                line_l,
                sep,
                line_r);
      },
      lines);
    return Stdlib_Format[129].call(null, ppf)(bA);
   }
   function show_config_and_exit(param){
    caml_call1(Dynlink_compilerlibs_Config[68], Stdlib[39]);
    return Stdlib[99].call(null, 0);
   }
   function show_config_variable_and_exit(x){
    var match = caml_call1(Dynlink_compilerlibs_Config[69], x);
    if(! match) return Stdlib[99].call(null, 2);
    var v = match[1];
    Stdlib[42].call(null, v);
    return Stdlib[99].call(null, 0);
   }
   var init$0 = [0, 0], map_cache = [0, 0];
   function get_build_path_prefix_map(param){
    a:
    if(1 - init$0[1]){
     init$0[1] = 1;
     try{var encoded_map = caml_sys_getenv("BUILD_PATH_PREFIX_MAP");}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8]) break a;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     var match = decode_map(encoded_map);
     if(0 === match[0]){
      var map = match[1];
      map_cache[1] = [0, map];
     }
     else{var err = match[1]; caml_call1(fatal_errorf(bB), err);}
    }
    return map_cache[1];
   }
   function debug_prefix_map_flags(param){
    if(! Dynlink_compilerlibs_Config[8]) return 0;
    var match = get_build_path_prefix_map(0);
    if(! match) return 0;
    var map = match[1];
    return Stdlib_List[26].call
            (null,
             function(map_elem, acc){
              if(! map_elem) return acc;
              var
               match = map_elem[1],
               source = match[2],
               target = match[1],
               a = Stdlib_Filename[21].call(null, target),
               b = Stdlib_Filename[21].call(null, source);
              return [0,
                      caml_call2(Stdlib_Printf[4].call(null, bC), b, a),
                      acc];
             },
             map,
             0);
   }
   function print_if(ppf, flag, printer, arg){
    if(flag[1])
     caml_call2(Stdlib_Format[129].call(null, ppf)(bD), printer, arg);
    return arg;
   }
   var
    native_obj_config = [0, Dynlink_compilerlibs_Config[55]],
    bF =
      Stdlib_List[19].call
       (null, function(conf){return [1, conf];}, all_native_obj_configs),
    bG = Stdlib[37].call(null, bF, bE),
    bH =
      Stdlib_List[19].call
       (null, function(conf){return [0, conf];}, all_native_obj_configs),
    bI = Stdlib[37].call(null, bH, bG),
    all_kinds = Stdlib[37].call(null, bJ, bI);
   function parse_kind(param){
    var switch$ = caml_string_compare(param, cst_Caml1999X$0);
    a:
    {
     b:
     {
      if(0 <= switch$){
       if(0 >= switch$) return bQ;
       if(param === cst_Caml1999Y$0) return bP;
       if(param === cst_Caml1999Z$0) return bO;
       if(param === cst_Caml1999y$0) return bN;
       if(param === cst_Caml1999z$0) return bM;
       if(param !== "Caml2007D"){if(param !== "Caml2012T") break a; break b;}
      }
      else{
       if(param === cst_Caml1999A$0) return bV;
       if(param !== cst_Caml1999D$0){
        if(param === cst_Caml1999I$0) return bU;
        if(param === cst_Caml1999M$0) return bT;
        if(param === cst_Caml1999N$0) return bS;
        if(param === cst_Caml1999O$0) return bR;
        if(param !== cst_Caml1999T$0) break a;
        break b;
       }
      }
      return bL;
     }
     return bK;
    }
    return 0;
   }
   function raw_kind(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cst_Caml1999X;
       case 1:
        return cst_Caml1999I;
       case 2:
        return cst_Caml1999O;
       case 3:
        return cst_Caml1999A;
       case 4:
        return cst_Caml1999D;
       case 5:
        return cst_Caml1999T;
       case 6:
        return cst_Caml1999M;
       default: return cst_Caml1999N;
     }
    if(0 === param[0]){
     var config = param[1];
     return config[1] ? cst_Caml1999y : cst_Caml1999Y;
    }
    var config$0 = param[1];
    return config$0[1] ? cst_Caml1999z : cst_Caml1999Z;
   }
   function string_of_kind(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cst_exec;
       case 1:
        return cst_cmi;
       case 2:
        return cst_cmo;
       case 3:
        return cst_cma;
       case 4:
        return cst_cmxs;
       case 5:
        return cst_cmt;
       case 6:
        return cst_ast_impl;
       default: return cst_ast_intf;
     }
    return 0 === param[0] ? cst_cmx : cst_cmxa;
   }
   function human_description_of_native_ob(param){
    var flambda = param[1];
    return flambda ? cst_flambda$0 : cst_non_flambda;
   }
   function human_name_of_kind(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cst_executable;
       case 1:
        return cst_compiled_interface_file;
       case 2:
        return cst_bytecode_object_file;
       case 3:
        return cst_bytecode_library;
       case 4:
        return cst_dynamic_native_library;
       case 5:
        return cst_compiled_typedtree_file;
       case 6:
        return cst_serialized_implementation_;
       default: return cst_serialized_interface_AST;
     }
    if(0 === param[0]){
     var config = param[1], a = human_description_of_native_ob(config);
     return caml_call1(Stdlib_Printf[4].call(null, bW), a);
    }
    var config$0 = param[1], b = human_description_of_native_ob(config$0);
    return caml_call1(Stdlib_Printf[4].call(null, bX), b);
   }
   var kind_length = 9, version_length = 3, magic_length = 12;
   function explain_parse_error(kind_opt, error){
    var
     a =
       0 === error[0]
        ? error[1] !== cst$115 ? cst_is_truncated : cst_is_empty
        : cst_has_a_different_format,
     b =
       Stdlib_Option[8].call
        (null, cst_object_file, human_name_of_kind, kind_opt);
    return caml_call2(Stdlib_Printf[4].call(null, bY), b, a);
   }
   function parse(s){
    if(caml_ml_string_length(s) !== 12){
     var
      sub_length =
        Stdlib_Int[10].call(null, kind_length, caml_ml_string_length(s)),
      starts_as =
        function(kind){
         var
          a = raw_kind(kind),
          b = Stdlib_String[15].call(null, a, 0, sub_length);
         return Stdlib_String[15].call(null, s, 0, sub_length) === b ? 1 : 0;
        };
     return Stdlib_List[33].call(null, starts_as, all_kinds)
             ? [1, [0, s]]
             : [1, [1, s]];
    }
    var
     raw_kind$0 = Stdlib_String[15].call(null, s, 0, kind_length),
     raw_version =
       Stdlib_String[15].call(null, s, kind_length, version_length),
     match = parse_kind(raw_kind$0);
    if(! match) return [1, [1, s]];
    var kind = match[1];
    try{var version = caml_int_of_string(raw_version);}
    catch(exn){return [1, [0, s]];}
    return [0, [0, kind, version]];
   }
   function read_info(ic){
    var header = Stdlib_Buffer[1].call(null, magic_length);
    try{Stdlib_Buffer[22].call(null, header, ic, magic_length);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[12]) throw caml_maybe_attach_backtrace(exn, 0);
    }
    return parse(Stdlib_Buffer[2].call(null, header));
   }
   function raw(param){
    var version = param[2], kind = param[1], a = raw_kind(kind);
    return caml_call2(Stdlib_Printf[4].call(null, bZ), a, version);
   }
   function current_raw(kind){
    if(typeof kind === "number")
     switch(kind){
       case 0:
        return Dynlink_compilerlibs_Config[23];
       case 1:
        return Dynlink_compilerlibs_Config[24];
       case 2:
        return Dynlink_compilerlibs_Config[25];
       case 3:
        return Dynlink_compilerlibs_Config[26];
       case 4:
        return Dynlink_compilerlibs_Config[31];
       case 5:
        return Dynlink_compilerlibs_Config[32];
       case 6:
        return Dynlink_compilerlibs_Config[30];
       default: return Dynlink_compilerlibs_Config[29];
     }
    if(0 === kind[0]){
     var config = kind[1], reference = Dynlink_compilerlibs_Config[27];
     if(caml_equal(config, native_obj_config)) return reference;
     var
      raw_kind$0 = raw_kind(kind),
      len = caml_ml_string_length(raw_kind$0),
      a =
        Stdlib_String[15].call
         (null, reference, len, caml_ml_string_length(reference) - len | 0);
     return Stdlib[28].call(null, raw_kind$0, a);
    }
    var config$0 = kind[1], reference$0 = Dynlink_compilerlibs_Config[28];
    if(caml_equal(config$0, native_obj_config)) return reference$0;
    var
     raw_kind$1 = raw_kind(kind),
     len$0 = caml_ml_string_length(raw_kind$1),
     b =
       Stdlib_String[15].call
        (null,
         reference$0,
         len$0,
         caml_ml_string_length(reference$0) - len$0 | 0);
    return Stdlib[28].call(null, raw_kind$1, b);
   }
   function current_version(kind){
    var raw = current_raw(kind);
    try{
     var
      a =
        caml_int_of_string
         (Stdlib_String[15].call(null, raw, kind_length, version_length));
     return a;
    }
    catch(exn){throw caml_maybe_attach_backtrace([0, Assert_failure, b0], 1);}
   }
   function explain_unexpected_error(param){
    if(0 === param[0]){
     var
      match = param[1],
      actual = match[2],
      expected = match[1],
      a = string_of_kind(actual),
      b = human_name_of_kind(actual),
      c = string_of_kind(expected),
      d = human_name_of_kind(expected);
     return caml_call4(Stdlib_Printf[4].call(null, b1), d, c, b, a);
    }
    var
     match$0 = param[2],
     actual$0 = match$0[2],
     expected$0 = match$0[1],
     kind = param[1],
     e = actual$0 < expected$0 ? cst_an_older : cst_a_newer,
     f = string_of_kind(kind),
     g = human_name_of_kind(kind);
    return caml_call3(Stdlib_Printf[4].call(null, b2), g, f, e);
   }
   function check_current(expected_kind, param){
    var version = param[2], kind = param[1];
    if(caml_notequal(kind, expected_kind))
     return [1, [0, [0, expected_kind, kind]]];
    var expected = current_version(kind);
    return version !== expected ? [1, [1, kind, [0, expected, version]]] : b3;
   }
   function read_current_info(expected_kind, ic){
    var match = read_info(ic);
    if(0 !== match[0]){var err$0 = match[1]; return [1, [0, err$0]];}
    var
     info = match[1],
     kind = Stdlib_Option[3].call(null, expected_kind, info[1]),
     match$0 = check_current(kind, info);
    if(0 === match$0[0]) return [0, info];
    var err = match$0[1];
    return [1, [1, err]];
   }
   var
    C =
      [0,
       Style,
       ansi_of_style_l,
       default_styles,
       get_styles,
       set_styles,
       default_setting,
       setup,
       set_color_tag_handling],
    a =
      [0,
       [0,
        compare,
        equal,
        some_if_all_elements_are_some,
        map2_prefix,
        split_at,
        is_prefix,
        find_and_chop_longest_common_p],
       Option,
       Array,
       [0,
        make,
        init,
        empty,
        of_bytes,
        to_bytes,
        concat,
        cat,
        equal$0,
        compare$0,
        starts_with,
        ends_with,
        contains_from,
        rcontains_from,
        contains,
        sub,
        split_on_char,
        map,
        mapi,
        fold_left,
        fold_right,
        exists,
        trim,
        escaped,
        uppercase_ascii,
        lowercase_ascii,
        capitalize_ascii,
        uncapitalize_ascii,
        iter,
        iteri,
        index_from,
        index_from_opt,
        rindex_from,
        rindex_from_opt,
        index,
        index_opt,
        rindex,
        rindex_opt,
        to_seq,
        to_seqi,
        of_seq,
        get_utf_8_uchar,
        is_valid_utf_8,
        get_utf_16be_uchar,
        is_valid_utf_16be,
        get_utf_16le_uchar,
        is_valid_utf_16le,
        blit,
        copy,
        fill,
        uppercase,
        lowercase,
        capitalize,
        uncapitalize,
        get_uint8,
        get_int8,
        get_uint16_ne,
        get_uint16_be,
        get_uint16_le,
        get_int16_ne,
        get_int16_be,
        get_int16_le,
        get_int32_ne,
        get_int32_be,
        get_int32_le,
        get_int64_ne,
        get_int64_be,
        get_int64_le,
        Set,
        Map,
        Tbl,
        print$0,
        for_all]],
    Dynlink_compilerlibs_Misc =
      [0,
       fatal_error,
       fatal_errorf,
       Fatal_error,
       try_finally,
       reraise_preserving_backtrace,
       map_end,
       map_left_right,
       for_all2,
       replicate_list,
       list_remove,
       split_last,
       protect_refs,
       a,
       find_in_path,
       find_in_path_rel,
       find_in_path_uncap,
       remove_file,
       expand_directory,
       split_path_contents,
       create_hashtable,
       copy_file,
       copy_file_chunk,
       string_of_file,
       output_to_file_via_temporary,
       protect_writing_to_file,
       log2,
       align,
       no_overflow_add,
       no_overflow_sub,
       no_overflow_mul,
       no_overflow_lsl,
       [0, int, int32, int64, nativeint],
       chop_extensions,
       search_substring,
       replace_substring,
       rev_split_words,
       get_ref,
       set_or_ignore,
       fst3,
       snd3,
       thd3,
       fst4,
       snd4,
       thd4,
       for4,
       LongString,
       edit_distance,
       spellcheck,
       did_you_mean,
       cut_at,
       ordinal_suffix,
       C,
       Error_style,
       normalise_eol,
       delete_eol_spaces,
       pp_two_columns,
       show_config_and_exit,
       show_config_variable_and_exit,
       get_build_path_prefix_map,
       debug_prefix_map_flags,
       print_if,
       [0,
        native_obj_config,
        explain_parse_error,
        parse,
        read_info,
        magic_length,
        check_current,
        explain_unexpected_error,
        read_current_info,
        string_of_kind,
        human_name_of_kind,
        current_raw,
        current_version,
        parse_kind,
        raw_kind,
        raw,
        all_kinds]];
   caml_register_global
    (1276, Dynlink_compilerlibs_Misc, "Dynlink_compilerlibs.Misc");
   function Pair(A, B){
    function compare(param, a){
     var
      b2 = a[2],
      a2 = a[1],
      b1 = param[2],
      a1 = param[1],
      c = caml_call2(A[3], a1, a2);
     return 0 === c ? caml_call2(B[3], b1, b2) : c;
    }
    function output(oc, param){
     var b = param[2], a = param[1], c = B[4], d = A[4];
     return caml_call4(Stdlib_Printf[1].call(null, oc, b4), d, a, c, b);
    }
    function hash(param){
     var
      b = param[2],
      a = param[1],
      c = caml_call1(B[2], b),
      d = [0, caml_call1(A[2], a), c];
     return Stdlib_Hashtbl[28].call(null, d);
    }
    function equal(param, b){
     var
      b2 = b[2],
      a2 = b[1],
      b1 = param[2],
      a1 = param[1],
      a = caml_call2(A[1], a1, a2);
     return a ? caml_call2(B[1], b1, b2) : a;
    }
    function print(ppf, param){
     var b = param[2], a = param[1], c = B[5], d = A[5];
     return caml_call4(Stdlib_Format[129].call(null, ppf)(b5), d, a, c, b);
    }
    return [0, equal, hash, compare, output, print];
   }
   function Make_map(T){
    var
     include = Stdlib_Map[1].call(null, [0, T[3]]),
     empty = include[1],
     is_empty = include[2],
     mem = include[3],
     add = include[4],
     update = include[5],
     singleton = include[6],
     remove = include[7],
     merge = include[8],
     union = include[9],
     compare = include[10],
     equal = include[11],
     iter = include[12],
     fold = include[13],
     for_all = include[14],
     exists = include[15],
     filter = include[16],
     filter_map = include[17],
     partition = include[18],
     cardinal = include[19],
     bindings = include[20],
     min_binding = include[21],
     min_binding_opt = include[22],
     max_binding = include[23],
     max_binding_opt = include[24],
     choose = include[25],
     choose_opt = include[26],
     split = include[27],
     find = include[28],
     find_opt = include[29],
     find_first = include[30],
     find_first_opt = include[31],
     find_last = include[32],
     find_last_opt = include[33],
     map = include[34],
     mapi = include[35],
     to_seq = include[36],
     to_rev_seq = include[37],
     to_seq_from = include[38],
     add_seq = include[39],
     of_seq = include[40];
    function of_list(l){
     return Stdlib_List[25].call
             (null,
              function(map, param){
               var v = param[2], id = param[1];
               return caml_call3(add, id, v, map);
              },
              empty,
              l);
    }
    function disjoint_union(eq, print, m1, m2){
     return caml_call3
             (union,
              function(id, v1, v2){
               if(eq)
                var eq$0 = eq[1], ok = caml_call2(eq$0, v1, v2);
               else
                var ok = 0;
               if(ok) return [0, v1];
               if(print)
                var
                 print$0 = print[1],
                 a = T[5],
                 err =
                   caml_call6
                    (Stdlib_Format[133].call(null, b6),
                     a,
                     id,
                     print$0,
                     v1,
                     print$0,
                     v2);
               else
                var
                 b = T[5],
                 err = caml_call2(Stdlib_Format[133].call(null, b7), b, id);
               return fatal_error(err);
              },
              m1,
              m2);
    }
    function union_right(m1, m2){
     return caml_call3
             (merge,
              function(id, x, y){
               if(x)
                var v = y ? y[1] : x[1];
               else{if(! y) return 0; var v = y[1];}
               return [0, v];
              },
              m1,
              m2);
    }
    function union_left(m1, m2){return union_right(m2, m1);}
    function union_merge(f, m1, m2){
     function aux(param, m1, m2){
      if(m1){
       if(m2){
        var m2$0 = m2[1], m1$0 = m1[1];
        return [0, caml_call2(f, m1$0, m2$0)];
       }
       var m = m1;
      }
      else
       var m = m2;
      return m;
     }
     return caml_call3(merge, aux, m1, m2);
    }
    function rename(m, v){
     try{var a = caml_call2(find, v, m); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8]) return v;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    function map_keys(f, m){
     var a = caml_call1(bindings, m);
     return of_list
             (Stdlib_List[19].call
               (null,
                function(param){
                 var v = param[2], k = param[1];
                 return [0, caml_call1(f, k), v];
                },
                a));
    }
    function print(f, ppf, s){
     function elts(ppf, s){
      return caml_call2
              (iter,
               function(id, v){
                var a = T[5];
                return caml_call4
                        (Stdlib_Format[129].call(null, ppf)(b8), a, id, f, v);
               },
               s);
     }
     return caml_call2(Stdlib_Format[129].call(null, ppf)(b9), elts, s);
    }
    var T_set = Stdlib_Set[1].call(null, [0, T[3]]);
    function keys(map){
     return caml_call3
             (fold,
              function(k, param, set){return caml_call2(T_set[4], k, set);},
              map,
              T_set[1]);
    }
    function data(t){
     var a = caml_call1(bindings, t);
     return Stdlib_List[19].call(null, function(a){return a[2];}, a);
    }
    function of_set(f, set){
     return caml_call3
             (T_set[16],
              function(e, map){
               return caml_call3(add, e, caml_call1(f, e), map);
              },
              set,
              empty);
    }
    function transpose_keys_and_data(map){
     return caml_call3
             (fold,
              function(k, v, m){return caml_call3(add, v, k, m);},
              map,
              empty);
    }
    function transpose_keys_and_data_set(map){
     return caml_call3
             (fold,
              function(k, v, m){
               a:
               {
                try{var set$0 = caml_call2(find, v, m);}
                catch(exn$0){
                 var exn = caml_wrap_exception(exn$0);
                 if(exn !== Stdlib[8])
                  throw caml_maybe_attach_backtrace(exn, 0);
                 var set = caml_call1(T_set[5], k);
                 break a;
                }
                var set = caml_call2(T_set[4], k, set$0);
               }
               return caml_call3(add, v, set, m);
              },
              map,
              empty);
    }
    return [0,
            empty,
            is_empty,
            mem,
            add,
            update,
            singleton,
            remove,
            merge,
            union,
            compare,
            equal,
            iter,
            fold,
            for_all,
            exists,
            filter,
            filter_map,
            partition,
            cardinal,
            bindings,
            min_binding,
            min_binding_opt,
            max_binding,
            max_binding_opt,
            choose,
            choose_opt,
            split,
            find,
            find_opt,
            find_first,
            find_first_opt,
            find_last,
            find_last_opt,
            map,
            mapi,
            to_seq,
            to_rev_seq,
            to_seq_from,
            add_seq,
            of_seq,
            of_list,
            disjoint_union,
            union_right,
            union_left,
            union_merge,
            rename,
            map_keys,
            print,
            ,
            keys,
            data,
            of_set,
            transpose_keys_and_data,
            transpose_keys_and_data_set];
   }
   function n(T){
    var
     equal$0 = T[1],
     hash = T[2],
     compare$0 = T[3],
     output$0 = T[4],
     print$0 = T[5],
     include = Stdlib_Set[1].call(null, [0, T[3]]),
     empty = include[1],
     is_empty = include[2],
     mem = include[3],
     add = include[4],
     singleton = include[5],
     remove = include[6],
     union = include[7],
     inter = include[8],
     disjoint = include[9],
     diff = include[10],
     compare = include[11],
     equal = include[12],
     subset = include[13],
     iter = include[14],
     fold = include[16],
     for_all = include[17],
     exists = include[18],
     filter = include[19],
     filter_map = include[20],
     partition = include[21],
     cardinal = include[22],
     elements = include[23],
     min_elt = include[24],
     min_elt_opt = include[25],
     max_elt = include[26],
     max_elt_opt = include[27],
     choose = include[28],
     choose_opt = include[29],
     split = include[30],
     find = include[31],
     find_opt = include[32],
     find_first = include[33],
     find_first_opt = include[34],
     find_last = include[35],
     find_last_opt = include[36],
     to_seq_from = include[38],
     to_seq = include[39],
     to_rev_seq = include[40],
     add_seq = include[41],
     of_seq = include[42];
    function output(oc, s){
     Stdlib_Printf[1].call(null, oc, b_);
     caml_call2
      (iter,
       function(v){
        var a = T[4];
        return caml_call2(Stdlib_Printf[1].call(null, oc, b$), a, v);
       },
       s);
     return Stdlib_Printf[1].call(null, oc, ca);
    }
    function print(ppf, s){
     function elts(ppf, s){
      return caml_call2
              (iter,
               function(e){
                var a = T[5];
                return caml_call2
                        (Stdlib_Format[129].call(null, ppf)(cb), a, e);
               },
               s);
     }
     return caml_call2(Stdlib_Format[129].call(null, ppf)(cc), elts, s);
    }
    function to_string(s){
     return caml_call2(Stdlib_Format[133].call(null, cd), print, s);
    }
    function of_list(l){
     if(! l) return empty;
     var t = l[1];
     if(! l[2]) return caml_call1(singleton, t);
     var q = l[2], a = caml_call1(singleton, t);
     return Stdlib_List[25].call
             (null, function(acc, e){return caml_call2(add, e, acc);}, a, q);
    }
    function map(f, s){
     var a = caml_call1(elements, s);
     return of_list(Stdlib_List[19].call(null, f, a));
    }
    var
     Set =
       [0,
        empty,
        is_empty,
        mem,
        add,
        singleton,
        remove,
        union,
        inter,
        disjoint,
        diff,
        compare,
        equal,
        subset,
        iter,
        fold,
        for_all,
        exists,
        filter,
        filter_map,
        partition,
        cardinal,
        elements,
        min_elt,
        min_elt_opt,
        max_elt,
        max_elt_opt,
        choose,
        choose_opt,
        split,
        find,
        find_opt,
        find_first,
        find_first_opt,
        find_last,
        find_last_opt,
        to_seq_from,
        to_seq,
        to_rev_seq,
        add_seq,
        of_seq,
        output,
        print,
        to_string,
        of_list,
        map],
     Map = Make_map(T),
     include$0 = Stdlib_Hashtbl[26].call(null, [0, T[1], T[2]]),
     create = include$0[1],
     clear = include$0[2],
     reset = include$0[3],
     copy = include$0[4],
     add$0 = include$0[5],
     remove$0 = include$0[6],
     find$0 = include$0[7],
     find_opt$0 = include$0[8],
     find_all = include$0[9],
     replace = include$0[10],
     mem$0 = include$0[11],
     iter$0 = include$0[12],
     filter_map_inplace = include$0[13],
     fold$0 = include$0[14],
     length = include$0[15],
     stats = include$0[16],
     to_seq$0 = include$0[17],
     to_seq_keys = include$0[18],
     to_seq_values = include$0[19],
     add_seq$0 = include$0[20],
     replace_seq = include$0[21],
     of_seq$0 = include$0[22],
     T_map = Make_map(T);
    function to_list(t){
     return caml_call3
             (fold$0,
              function(key, datum, elts){return [0, [0, key, datum], elts];},
              t,
              0);
    }
    function of_list$0(elts){
     var t = caml_call1(create, 42);
     Stdlib_List[17].call
      (null,
       function(param){
        var datum = param[2], key = param[1];
        return caml_call3(add$0, t, key, datum);
       },
       elts);
     return t;
    }
    function to_map(v){return caml_call3(fold$0, T_map[4], v, T_map[1]);}
    function of_map(m){
     var t = caml_call1(create, caml_call1(T_map[19], m));
     caml_call2
      (T_map[12], function(k, v){return caml_call3(add$0, t, k, v);}, m);
     return t;
    }
    function memoize(t, f, key){
     try{var a = caml_call2(find$0, t, key); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var r = caml_call1(f, key);
      caml_call3(add$0, t, key, r);
      return r;
     }
    }
    function map$0(t, f){
     var a = to_map(t);
     return of_map(caml_call2(T_map[34], f, a));
    }
    return [0,
            T,
            equal$0,
            hash,
            compare$0,
            output$0,
            print$0,
            Set,
            [0,
             Map[1],
             Map[2],
             Map[3],
             Map[4],
             Map[5],
             Map[6],
             Map[7],
             Map[8],
             Map[9],
             Map[10],
             Map[11],
             Map[12],
             Map[13],
             Map[14],
             Map[15],
             Map[16],
             Map[17],
             Map[18],
             Map[19],
             Map[20],
             Map[21],
             Map[22],
             Map[23],
             Map[24],
             Map[25],
             Map[26],
             Map[27],
             Map[28],
             Map[29],
             Map[30],
             Map[31],
             Map[32],
             Map[33],
             Map[34],
             Map[35],
             Map[36],
             Map[37],
             Map[38],
             Map[39],
             Map[40],
             Map[41],
             Map[42],
             Map[43],
             Map[44],
             Map[45],
             Map[46],
             Map[47],
             Map[50],
             Map[51],
             Map[52],
             Map[53],
             Map[54],
             Map[48]],
            [0,
             create,
             clear,
             reset,
             copy,
             add$0,
             remove$0,
             find$0,
             find_opt$0,
             find_all,
             replace,
             mem$0,
             iter$0,
             filter_map_inplace,
             fold$0,
             length,
             stats,
             to_seq$0,
             to_seq_keys,
             to_seq_values,
             add_seq$0,
             replace_seq,
             of_seq$0,
             to_list,
             of_list$0,
             to_map,
             of_map,
             memoize,
             map$0]];
   }
   var Dynlink_compilerlibs_Identifia = [0, Pair, n];
   caml_register_global
    (1277,
     Dynlink_compilerlibs_Identifia,
     "Dynlink_compilerlibs.Identifiable");
   function compare$1(x, y){return x - y | 0;}
   function output$0(oc, x){
    return caml_call1(Stdlib_Printf[1].call(null, oc, ce), x);
   }
   function hash$0(i){return i;}
   function equal$2(i, j){return i === j ? 1 : 0;}
   var
    print$1 = Stdlib_Format[19],
    Int_base = n([0, equal$2, hash$0, compare$1, output$0, print$1]),
    T = Int_base[1],
    equal$3 = Int_base[2],
    hash$1 = Int_base[3],
    compare$2 = Int_base[4],
    output$1 = Int_base[5],
    print$2 = Int_base[6],
    Set$0 = Int_base[7],
    Map$0 = Int_base[8],
    Tbl$0 = Int_base[9];
   function zero_to_n(n){
    if(0 > n) return Set$0[1];
    var a = zero_to_n(n - 1 | 0);
    return caml_call2(Set$0[4], n, a);
   }
   function to_string(n){return Stdlib_Int[12].call(null, n);}
   var
    include =
      [0,
       T,
       equal$3,
       hash$1,
       compare$2,
       output$1,
       print$2,
       Set$0,
       Map$0,
       Tbl$0,
       zero_to_n,
       to_string];
   function of_int_exn(i){
    if(i >= -128 && 127 >= i) return i;
    return caml_call1(fatal_errorf(cf), i);
   }
   function to_int(i){return i;}
   var Int8 = [0, 0, 1, of_int_exn, to_int];
   function of_int_exn$0(i){
    if(i >= -32768 && 32767 >= i) return i;
    return caml_call1(fatal_errorf(cg), i);
   }
   var
    lower_int64 = caml_int64_neg(caml_int64_shift_left(Stdlib_Int64[2], 15)),
    upper_int64 =
      caml_int64_sub
       (caml_int64_shift_left(Stdlib_Int64[2], 15), Stdlib_Int64[2]);
   function of_int64_exn(i){
    if
     (0 <= Stdlib_Int64[15].call(null, i, lower_int64)
      && 0 >= Stdlib_Int64[15].call(null, i, upper_int64))
     return runtime.caml_int64_to_int32(i);
    return caml_call1(fatal_errorf(ch), i);
   }
   function to_int$0(t){return t;}
   var compare$3 = caml_compare;
   function output$2(oc, x){
    return caml_call1(Stdlib_Printf[1].call(null, oc, ci), x);
   }
   function hash$2(f){return Stdlib_Hashtbl[28].call(null, f);}
   function equal$4(i, j){return i === j ? 1 : 0;}
   var
    print$3 = Stdlib_Format[21],
    include$0 = n([0, equal$4, hash$2, compare$3, output$2, print$3]),
    T$0 = include$0[1],
    equal$5 = include$0[2],
    hash$3 = include$0[3],
    compare$4 = include$0[4],
    output$3 = include$0[5],
    print$4 = include$0[6],
    Set$1 = include$0[7],
    Map$1 = include$0[8],
    Tbl$1 = include$0[9],
    include$1 =
      [0,
       T$0,
       equal$5,
       hash$3,
       compare$4,
       output$3,
       print$4,
       Set$1,
       Map$1,
       Tbl$1],
    Dynlink_compilerlibs_Numbers =
      [0, include, Int8, [0, of_int_exn$0, of_int64_exn, to_int$0], include$1];
   caml_register_global
    (1278, Dynlink_compilerlibs_Numbers, "Dynlink_compilerlibs.Numbers");
   function u(S){
    function default$(v){return [0, v, S[1][2][1], 0, S[1][2][1]];}
    function set_base_default(value, t){return [0, value, t[2], t[3], t[4]];}
    function add_base_override(key, value, t){
     var a = t[4], b = t[3], c = caml_call3(S[1][2][4], key, value, t[2]);
     return [0, t[1], c, b, a];
    }
    function reset_base_overrides(t){
     return [0, t[1], S[1][2][1], t[3], t[4]];
    }
    function set_user_default(value, t){
     return [0, t[1], t[2], [0, value], t[4]];
    }
    function add_user_override(key, value, t){
     var a = caml_call3(S[1][2][4], key, value, t[4]);
     return [0, t[1], t[2], t[3], a];
    }
    var
     Parse_failure =
       [248, cst_Dynlink_compilerlibs_Arg_h, caml_fresh_oo_id(0)];
    function parse_exn(str, update){
     var
      a = Stdlib_String[16].call(null, 44, str),
      values =
        caml_call1
         (Stdlib_List[41].call
           (null, function(a){return cst$115 !== a ? 1 : 0;}),
          a),
      parsed =
        Stdlib_List[25].call
         (null,
          function(acc, key_value_pair){
           try{var equals = Stdlib_String[35].call(null, key_value_pair, 61);}
           catch(exn$1){
            var exn = caml_wrap_exception(exn$1);
            if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
            try{var value = caml_call1(S[2][1], key_value_pair);}
            catch(exn){
             var exn$0 = caml_wrap_exception(exn);
             throw caml_maybe_attach_backtrace([0, Parse_failure, exn$0], 1);
            }
            return set_user_default(value, acc);
           }
           var length = caml_ml_string_length(key_value_pair);
           if(0 <= equals && equals < length){
            if(0 === equals)
             throw caml_maybe_attach_backtrace
                    ([0,
                      Parse_failure,
                      [0, Stdlib[7], cst_Missing_key_in_argument_sp]],
                     1);
            var key = Stdlib_String[15].call(null, key_value_pair, 0, equals);
            try{var key$0 = caml_call1(S[1][1], key);}
            catch(exn){
             var exn$1 = caml_wrap_exception(exn);
             throw caml_maybe_attach_backtrace([0, Parse_failure, exn$1], 1);
            }
            var
             value$0 =
               Stdlib_String[15].call
                (null,
                 key_value_pair,
                 equals + 1 | 0,
                 (length - equals | 0) - 1 | 0);
            try{var value$1 = caml_call1(S[2][1], value$0);}
            catch(exn){
             var exn$2 = caml_wrap_exception(exn);
             throw caml_maybe_attach_backtrace([0, Parse_failure, exn$2], 1);
            }
            return add_user_override(key$0, value$1, acc);
           }
           throw caml_maybe_attach_backtrace([0, Assert_failure, cj], 1);
          },
          update[1],
          values);
     update[1] = parsed;
    }
    function parse(str, help_text, update){
     try{parse_exn(str, update);}
     catch(c){
      var a = caml_wrap_exception(c), tag = a[1];
      if(tag !== Parse_failure) throw caml_maybe_attach_backtrace(a, 0);
      var
       exn = a[2],
       b = Stdlib_Printexc[1].call(null, exn),
       err = caml_call2(Stdlib_Printf[4].call(null, ck), b, help_text);
      Stdlib[53].call(null, err);
      return Stdlib[99].call(null, 2);
     }
     return 0;
    }
    function parse_no_error(str, update){
     try{parse_exn(str, update);}
     catch(b){
      var a = caml_wrap_exception(b), tag = a[1];
      if(tag !== Parse_failure) throw caml_maybe_attach_backtrace(a, 0);
      var exn = a[2];
      return [0, exn];
     }
     return 0;
    }
    function get(key, parsed){
     try{
      var value$1 = caml_call2(S[1][2][28], key, parsed[4]);
      return value$1;
     }
     catch(exn$1){
      var exn = caml_wrap_exception(exn$1);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var match = parsed[3];
      if(match){var value = match[1]; return value;}
      try{
       var value$0 = caml_call2(S[1][2][28], key, parsed[2]);
       return value$0;
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(exn$0 === Stdlib[8]) return parsed[1];
       throw caml_maybe_attach_backtrace(exn$0, 0);
      }
     }
    }
    return [0,
            default$,
            set_base_default,
            add_base_override,
            reset_base_overrides,
            set_user_default,
            add_user_override,
            parse,
            parse_no_error,
            get];
   }
   var Dynlink_compilerlibs_Arg_helpe = [0, u];
   caml_register_global
    (1279, Dynlink_compilerlibs_Arg_helpe, "Dynlink_compilerlibs.Arg_helper");
   var
    of_string = caml_int_of_string,
    of_string$0 = caml_int_of_string,
    Int_arg_helper =
      u
       ([0,
         [0,
          of_string,
          [0,
           Map$0[1],
           Map$0[2],
           Map$0[3],
           Map$0[4],
           Map$0[5],
           Map$0[6],
           Map$0[7],
           Map$0[8],
           Map$0[9],
           Map$0[10],
           Map$0[11],
           Map$0[12],
           Map$0[13],
           Map$0[14],
           Map$0[15],
           Map$0[16],
           Map$0[17],
           Map$0[18],
           Map$0[19],
           Map$0[20],
           Map$0[21],
           Map$0[22],
           Map$0[23],
           Map$0[24],
           Map$0[25],
           Map$0[26],
           Map$0[27],
           Map$0[28],
           Map$0[29],
           Map$0[30],
           Map$0[31],
           Map$0[32],
           Map$0[33],
           Map$0[34],
           Map$0[35],
           Map$0[36],
           Map$0[37],
           Map$0[38],
           Map$0[39],
           Map$0[40]]],
         [0, of_string$0]]),
    of_string$1 = caml_int_of_string,
    of_string$2 = caml_float_of_string,
    Float_arg_helper =
      u
       ([0,
         [0,
          of_string$1,
          [0,
           Map$0[1],
           Map$0[2],
           Map$0[3],
           Map$0[4],
           Map$0[5],
           Map$0[6],
           Map$0[7],
           Map$0[8],
           Map$0[9],
           Map$0[10],
           Map$0[11],
           Map$0[12],
           Map$0[13],
           Map$0[14],
           Map$0[15],
           Map$0[16],
           Map$0[17],
           Map$0[18],
           Map$0[19],
           Map$0[20],
           Map$0[21],
           Map$0[22],
           Map$0[23],
           Map$0[24],
           Map$0[25],
           Map$0[26],
           Map$0[27],
           Map$0[28],
           Map$0[29],
           Map$0[30],
           Map$0[31],
           Map$0[32],
           Map$0[33],
           Map$0[34],
           Map$0[35],
           Map$0[36],
           Map$0[37],
           Map$0[38],
           Map$0[39],
           Map$0[40]]],
         [0, of_string$2]]),
    objfiles = [0, 0],
    ccobjs = [0, 0],
    dllibs = [0, 0],
    compile_only = [0, 0],
    output_name = [0, 0],
    include_dirs = [0, 0],
    no_std_include = [0, 0],
    print_types = [0, 0],
    make_archive = [0, 0],
    debug = [0, 0],
    debug_full = [0, 0],
    unsafe = [0, 0],
    use_linscan = [0, 0],
    link_everything = [0, 0],
    custom_runtime = [0, 0],
    no_check_prims = [0, 0],
    bytecode_compatible_32 = [0, 0],
    output_c_object = [0, 0],
    output_complete_object = [0, 0],
    output_complete_executable = [0, 0],
    all_ccopts = [0, 0],
    classic = [0, 0],
    nopervasives = [0, 0],
    match_context_rows = [0, 32],
    preprocessor = [0, 0],
    all_ppx = [0, 0],
    absname = [0, 0],
    annotations = [0, 0],
    binary_annotations = [0, 0],
    use_threads = [0, 0],
    noassert = [0, 0],
    verbose = [0, 0],
    noversion = [0, 0],
    noprompt = [0, 0],
    nopromptcont = [0, 0],
    init_file = [0, 0],
    noinit = [0, 0],
    open_modules = [0, 0],
    use_prims = [0, cst$21],
    use_runtime = [0, cst$22],
    plugin = [0, 0],
    principal = [0, 0],
    real_paths = [0, 1],
    recursive_types = [0, 0],
    strict_sequence = [0, 0],
    strict_formats = [0, 0],
    applicative_functors = [0, 1],
    make_runtime = [0, 0],
    c_compiler$0 = [0, 0],
    no_auto_link = [0, 0],
    dllpaths = [0, 0],
    make_package = [0, 0],
    for_package = [0, 0],
    error_size = [0, 500],
    float_const_prop = [0, 1],
    transparent_modules = [0, 0],
    unique_ids = [0, 1],
    locations = [0, 1],
    dump_source = [0, 0],
    dump_parsetree = [0, 0],
    dump_typedtree = [0, 0],
    dump_shape = [0, 0],
    dump_rawlambda = [0, 0],
    dump_lambda = [0, 0],
    dump_rawclambda = [0, 0],
    dump_clambda = [0, 0],
    dump_rawflambda = [0, 0],
    dump_flambda = [0, 0],
    dump_flambda_let = [0, 0],
    dump_flambda_verbose = [0, 0],
    dump_instr = [0, 0],
    keep_camlprimc_file = [0, 0],
    keep_asm_file = [0, 0],
    optimize_for_speed = [0, 1],
    opaque = [0, 0],
    dump_cmm = [0, 0],
    dump_selection = [0, 0],
    dump_cse = [0, 0],
    dump_live = [0, 0],
    dump_spill = [0, 0],
    dump_split = [0, 0],
    dump_interf = [0, 0],
    dump_prefer = [0, 0],
    dump_regalloc = [0, 0],
    dump_reload = [0, 0],
    dump_scheduling = [0, 0],
    dump_linear = [0, 0],
    dump_interval = [0, 0],
    keep_startup_file = [0, 0],
    dump_combine = [0, 0],
    profile_columns = [0, 0],
    native_code = [0, 0],
    force_slash = [0, 0],
    clambda_checks = [0, 0],
    cmm_invariants = [0, Dynlink_compilerlibs_Config[57]],
    flambda_invariant_checks = [0, Dynlink_compilerlibs_Config[56]],
    dont_write_files = [0, 0],
    insn_sched_default = 1,
    insn_sched = [0, insn_sched_default];
   function std_include_flag(prefix){
    if(no_std_include[1]) return cst$23;
    var a = Stdlib_Filename[21].call(null, Dynlink_compilerlibs_Config[3]);
    return Stdlib[28].call(null, prefix, a);
   }
   function std_include_dir(param){
    return no_std_include[1] ? 0 : [0, Dynlink_compilerlibs_Config[3], 0];
   }
   var
    shared = [0, 0],
    dlcode = [0, 1],
    cl = Dynlink_compilerlibs_Config[39] !== cst_amd64 ? 0 : 1,
    pic_code = [0, cl],
    runtime_variant = [0, cst$24],
    with_runtime = [0, 1],
    keep_docs = [0, 0],
    keep_locs = [0, 1],
    unsafe_string =
      Dynlink_compilerlibs_Config[60]
       ? [0, 0]
       : [0, 1 - Dynlink_compilerlibs_Config[61]],
    classic_inlining = [0, 0],
    inlining_report = [0, 0],
    afl_instrument$0 = [0, Dynlink_compilerlibs_Config[67]],
    afl_inst_ratio = [0, 100],
    function_sections$0 = [0, 0],
    simplify_rounds = [0, 0],
    default_simplify_rounds = [0, 1];
   function rounds(param){
    var match = simplify_rounds[1];
    if(! match) return default_simplify_rounds[1];
    var r = match[1];
    return r;
   }
   var
    default_inline_threshold = Dynlink_compilerlibs_Config[55] ? 10. : 1.25,
    default_inline_toplevel_thresh = 16. * default_inline_threshold | 0,
    default_inline_call_cost = 5,
    default_inline_alloc_cost = 7,
    default_inline_prim_cost = 3,
    default_inline_branch_cost = 5,
    default_inline_indirect_cost = 4,
    default_inline_branch_factor = 0.1,
    default_inline_lifting_benefit = 1300,
    default_inline_max_unroll = 0,
    default_inline_max_depth = 1,
    inline_threshold =
      [0, caml_call1(Float_arg_helper[1], default_inline_threshold)],
    inline_toplevel_threshold =
      [0, caml_call1(Int_arg_helper[1], default_inline_toplevel_thresh)],
    inline_call_cost =
      [0, caml_call1(Int_arg_helper[1], default_inline_call_cost)],
    inline_alloc_cost =
      [0, caml_call1(Int_arg_helper[1], default_inline_alloc_cost)],
    inline_prim_cost =
      [0, caml_call1(Int_arg_helper[1], default_inline_prim_cost)],
    inline_branch_cost =
      [0, caml_call1(Int_arg_helper[1], default_inline_branch_cost)],
    inline_indirect_cost =
      [0, caml_call1(Int_arg_helper[1], default_inline_indirect_cost)],
    inline_branch_factor =
      [0, caml_call1(Float_arg_helper[1], default_inline_branch_factor)],
    inline_lifting_benefit =
      [0, caml_call1(Int_arg_helper[1], default_inline_lifting_benefit)],
    inline_max_unroll =
      [0, caml_call1(Int_arg_helper[1], default_inline_max_unroll)],
    inline_max_depth =
      [0, caml_call1(Int_arg_helper[1], default_inline_max_depth)],
    unbox_specialised_args = [0, 1],
    unbox_free_vars_of_closures = [0, 1],
    unbox_closures = [0, 0],
    default_unbox_closures_factor = 10,
    unbox_closures_factor = [0, default_unbox_closures_factor],
    remove_unused_arguments = [0, 0];
   function use_inlining_arguments_set(round, arg){
    function set_int(arg, default$, value$1){
     if(value$1)
      var value = value$1[1], value$0 = value;
     else
      var value$0 = default$;
     if(round){
      var round$0 = round[1];
      arg[1] = caml_call3(Int_arg_helper[3], round$0, value$0, arg[1]);
      return 0;
     }
     var a = caml_call1(Int_arg_helper[4], arg[1]);
     arg[1] = caml_call2(Int_arg_helper[2], value$0, a);
     return 0;
    }
    function set_float(arg, default$, value$1){
     if(value$1)
      var value = value$1[1], value$0 = value;
     else
      var value$0 = default$;
     if(round){
      var round$0 = round[1];
      arg[1] = caml_call3(Float_arg_helper[3], round$0, value$0, arg[1]);
      return;
     }
     var a = caml_call1(Float_arg_helper[4], arg[1]);
     arg[1] = caml_call2(Float_arg_helper[2], value$0, a);
    }
    set_int(inline_call_cost, default_inline_call_cost, arg[1]);
    set_int(inline_alloc_cost, default_inline_alloc_cost, arg[2]);
    set_int(inline_prim_cost, default_inline_prim_cost, arg[3]);
    set_int(inline_branch_cost, default_inline_branch_cost, arg[4]);
    set_int(inline_indirect_cost, default_inline_indirect_cost, arg[5]);
    set_int(inline_lifting_benefit, default_inline_lifting_benefit, arg[6]);
    set_float(inline_branch_factor, default_inline_branch_factor, arg[7]);
    set_int(inline_max_depth, default_inline_max_depth, arg[8]);
    set_int(inline_max_unroll, default_inline_max_unroll, arg[9]);
    set_float(inline_threshold, default_inline_threshold, arg[10]);
    return set_int
            (inline_toplevel_threshold,
             default_inline_toplevel_thresh,
             arg[11]);
   }
   var
    classic_arguments = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [0, 1.25], cm],
    o2_arguments =
      [0,
       [0, 10],
       [0, 14],
       [0, 6],
       [0, 10],
       [0, 8],
       0,
       0,
       co,
       0,
       cn,
       [0, 400]],
    o3_arguments =
      [0,
       [0, 15],
       [0, 21],
       [0, 9],
       [0, 15],
       [0, 12],
       0,
       cs,
       cr,
       cq,
       cp,
       [0, 800]],
    all_passes = [0, 0],
    dumped_passes_list = [0, 0];
   function dumped_pass(s){
    if(Stdlib_List[36].call(null, s, all_passes[1]))
     return Stdlib_List[36].call(null, s, dumped_passes_list[1]);
    throw caml_maybe_attach_backtrace([0, Assert_failure, ct], 1);
   }
   function set_dumped_pass(s, enabled){
    var a = Stdlib_List[36].call(null, s, all_passes[1]);
    if(a){
     var
      c = dumped_passes_list[1],
      passes_without_s =
        Stdlib_List[41].call(null, function(a){return s !== a ? 1 : 0;})(c),
      dumped_passes = enabled ? [0, s, passes_without_s] : passes_without_s;
     dumped_passes_list[1] = dumped_passes;
     var b = 0;
    }
    else
     var b = a;
    return b;
   }
   var
    dump_into_file = [0, 0],
    dump_dir = [0, 0],
    color = [0, 0],
    color_reader =
      [0,
       function(param){
        return param !== cst_always$0
                ? param !== cst_auto$0 ? param !== cst_never$0 ? 0 : cu : cv
                : cw;
       },
       function(param){
        switch(param){
          case 0:
           return cst_auto;
          case 1:
           return cst_always;
          default: return cst_never;
        }
       },
       cst_expected_auto_always_or_ne,
       cst_OCAML_COLOR],
    error_style = [0, 0],
    error_style_reader =
      [0,
       function(param){
        return param !== cst_contextual$0
                ? param !== cst_short$0 ? 0 : cx
                : cy;
       },
       function(param){return param ? cst_short : cst_contextual;},
       cst_expected_contextual_or_sho,
       cst_OCAML_ERROR_STYLE],
    unboxed_types = [0, 0];
   function extension(t){return Stdlib[28].call(null, cst_cmir, ext);}
   function to_string$0(param){
    switch(param){
      case 0:
       return cst_parsing;
      case 1:
       return cst_typing;
      case 2:
       return cst_scheduling;
      default: return cst_emit;
    }
   }
   function of_string$3(param){
    return param !== cst_emit$0
            ? param
              !== cst_parsing$0
              ? param
                !== cst_scheduling$0
                ? param !== cst_typing$0 ? 0 : cz
                : cA
              : cB
            : cC;
   }
   function rank(param){
    switch(param){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 50;
      default: return 60;
    }
   }
   function is_compilation_pass(param){return 1;}
   function can_save_ir_after(param){return 2 === param ? 1 : 0;}
   function available_pass_names(filter, is_native){
    var
     a =
       caml_call1
        (Stdlib_List[41].call
          (null,
           function(t){
            var
             a = 2 === t ? 1 : 3 <= t ? 1 : 0,
             b = 1 - a,
             c = b || is_native;
            return c;
           }),
         passes),
     b = caml_call1(Stdlib_List[41].call(null, filter), a);
    return Stdlib_List[19].call(null, to_string$0, b);
   }
   function compare$5(a, b){
    var c = rank(b);
    return caml_int_compare(rank(a), c);
   }
   function to_output_filename(t, prefix){
    if(2 !== t) return fatal_error(cst_Not_supported);
    var a = extension(0);
    return Stdlib[28].call(null, prefix, a);
   }
   function of_input_filename(filename){
    var
     ext = Stdlib_Filename[10].call(null, filename),
     ext_len = caml_ml_string_length(ext);
    if(0 < ext_len){
     var
      is_prefix =
        function(ir){
         var
          s = extension(ir),
          s_len = caml_ml_string_length(s),
          a = s_len <= ext_len ? 1 : 0,
          b =
            a ? s === Stdlib_String[15].call(null, ext, 0, s_len) ? 1 : 0 : a;
         return b;
        },
      ir = Stdlib_List[39].call(null, is_prefix, all);
     if(ir)
      var
       ir$0 = ir[1],
       s = extension(ir$0),
       s_len = caml_ml_string_length(s),
       match =
         [0,
          [0,
           ir$0,
           Stdlib_String[15].call(null, ext, s_len, ext_len - s_len | 0)]];
     else
      var match = 0;
    }
    else
     var match = 0;
    return match ? cD : 0;
   }
   var stop_after = [0, 0];
   function should_stop_after(pass){
    var a = rank(pass);
    if(rank(1) <= a && print_types[1]) return 1;
    var match = stop_after[1];
    if(! match) return 0;
    var stop = match[1], b = rank(pass);
    return rank(stop) <= b ? 1 : 0;
   }
   var save_ir_after = [0, 0];
   function should_save_ir_after(pass){
    return Stdlib_List[36].call(null, pass, save_ir_after[1]);
   }
   function set_save_ir_after(pass, enabled){
    var
     a = save_ir_after[1],
     other_passes =
       Stdlib_List[41].call(null, function(a){return pass !== a ? 1 : 0;})(a),
     new_passes = enabled ? [0, pass, other_passes] : other_passes;
    save_ir_after[1] = new_passes;
    return 0;
   }
   var arg_spec = [0, 0], arg_names = [0, a[4][69][1]];
   function reset_arguments(param){
    arg_spec[1] = 0;
    arg_names[1] = a[4][69][1];
    return 0;
   }
   function add_arguments(loc, args){
    return Stdlib_List[17].call
            (null,
             function(arg){
              var arg_name = arg[1];
              try{
               var loc2 = caml_call2(a[4][69][28], arg_name, arg_names[1]);
               caml_call1(Stdlib_Printf[3].call(null, cE), arg_name);
               caml_call1(Stdlib_Printf[3].call(null, cF), loc2);
               var b = caml_call1(Stdlib_Printf[3].call(null, cG), loc);
               return b;
              }
              catch(exn$0){
               var exn = caml_wrap_exception(exn$0);
               if(exn !== Stdlib[8])
                throw caml_maybe_attach_backtrace(exn, 0);
               arg_spec[1] = Stdlib[37].call(null, arg_spec[1], [0, arg, 0]);
               arg_names[1] =
                caml_call3(a[4][69][4], arg_name, loc, arg_names[1]);
               return 0;
              }
             },
             args);
   }
   function create_usage_msg(program){
    return caml_call2(Stdlib_Printf[4].call(null, cH), program, program);
   }
   function print_arguments(program){
    var a = create_usage_msg(program);
    return Stdlib_Arg[9].call(null, arg_spec[1], a);
   }
   var
    Dynlink_compilerlibs_Clflags =
      [0,
       [0, Int_arg_helper[7], Int_arg_helper[8], Int_arg_helper[9]],
       [0, Float_arg_helper[7], Float_arg_helper[8], Float_arg_helper[9]],
       classic_arguments,
       o1_arguments,
       o2_arguments,
       o3_arguments,
       use_inlining_arguments_set,
       objfiles,
       ccobjs,
       dllibs,
       compile_only,
       output_name,
       include_dirs,
       no_std_include,
       print_types,
       make_archive,
       debug,
       debug_full,
       unsafe,
       use_linscan,
       link_everything,
       custom_runtime,
       no_check_prims,
       bytecode_compatible_32,
       output_c_object,
       output_complete_object,
       output_complete_executable,
       all_ccopts,
       classic,
       nopervasives,
       match_context_rows,
       open_modules,
       preprocessor,
       all_ppx,
       absname,
       annotations,
       binary_annotations,
       use_threads,
       noassert,
       verbose,
       noprompt,
       nopromptcont,
       init_file,
       noinit,
       noversion,
       use_prims,
       use_runtime,
       plugin,
       principal,
       real_paths,
       recursive_types,
       strict_sequence,
       strict_formats,
       applicative_functors,
       make_runtime,
       c_compiler$0,
       no_auto_link,
       dllpaths,
       make_package,
       for_package,
       error_size,
       float_const_prop,
       transparent_modules,
       unique_ids,
       locations,
       dump_source,
       dump_parsetree,
       dump_typedtree,
       dump_shape,
       dump_rawlambda,
       dump_lambda,
       dump_rawclambda,
       dump_clambda,
       dump_rawflambda,
       dump_flambda,
       dump_flambda_let,
       dump_instr,
       keep_camlprimc_file,
       keep_asm_file,
       optimize_for_speed,
       dump_cmm,
       dump_selection,
       dump_cse,
       dump_live,
       dump_spill,
       dump_split,
       dump_interf,
       dump_prefer,
       dump_regalloc,
       dump_reload,
       dump_scheduling,
       dump_linear,
       dump_interval,
       keep_startup_file,
       dump_combine,
       native_code,
       default_inline_threshold,
       inline_threshold,
       inlining_report,
       simplify_rounds,
       default_simplify_rounds,
       rounds,
       default_inline_max_unroll,
       inline_max_unroll,
       default_inline_toplevel_thresh,
       inline_toplevel_threshold,
       default_inline_call_cost,
       default_inline_alloc_cost,
       default_inline_prim_cost,
       default_inline_branch_cost,
       default_inline_indirect_cost,
       default_inline_lifting_benefit,
       inline_call_cost,
       inline_alloc_cost,
       inline_prim_cost,
       inline_branch_cost,
       inline_indirect_cost,
       inline_lifting_benefit,
       default_inline_branch_factor,
       inline_branch_factor,
       dont_write_files,
       std_include_flag,
       std_include_dir,
       shared,
       dlcode,
       pic_code,
       runtime_variant,
       with_runtime,
       force_slash,
       keep_docs,
       keep_locs,
       unsafe_string,
       opaque,
       profile_columns,
       flambda_invariant_checks,
       unbox_closures,
       unbox_closures_factor,
       default_unbox_closures_factor,
       unbox_free_vars_of_closures,
       unbox_specialised_args,
       clambda_checks,
       cmm_invariants,
       default_inline_max_depth,
       inline_max_depth,
       remove_unused_arguments,
       dump_flambda_verbose,
       classic_inlining,
       afl_instrument$0,
       afl_inst_ratio,
       function_sections$0,
       all_passes,
       dumped_pass,
       set_dumped_pass,
       dump_into_file,
       dump_dir,
       color,
       color_reader,
       error_style,
       error_style_reader,
       unboxed_types,
       insn_sched,
       insn_sched_default,
       [0,
        of_string$3,
        to_string$0,
        is_compilation_pass,
        available_pass_names,
        can_save_ir_after,
        compare$5,
        to_output_filename,
        of_input_filename],
       stop_after,
       should_stop_after,
       set_save_ir_after,
       should_save_ir_after,
       arg_spec,
       add_arguments,
       create_usage_msg,
       print_arguments,
       reset_arguments];
   caml_register_global
    (1281, Dynlink_compilerlibs_Clflags, "Dynlink_compilerlibs.Clflags");
   function create$0(param){
    var
     stat = runtime.caml_gc_quick_stat(0),
     a = stat[15],
     b = stat[1] + stat[3];
    return [0, runtime.caml_sys_time_include_children(1), b, a];
   }
   var r = [0, -1];
   function zero$0(param){r[1]++; return [0, r[1], 0., 0., 0];}
   function accumulate(t, m1, m2){
    return [0,
            t[1],
            t[2] + (m2[1] - m1[1]),
            t[3] + (m2[2] - m1[2]),
            t[4] + (m2[3] - m1[3] | 0) | 0];
   }
   function create$1(param){return Stdlib_Hashtbl[1].call(null, 0, 2);}
   var hierarchy = [0, create$1(0)], initial_measure = [0, 0];
   function reset(param){
    hierarchy[1] = create$1(0);
    initial_measure[1] = 0;
    return 0;
   }
   function record_call(opt, name, f){
    if(opt) var sth = opt[1], accumulate$0 = sth; else var accumulate$0 = 0;
    var prev_hierarchy = hierarchy[1], start_measure = create$0(0);
    if(0 === initial_measure[1]) initial_measure[1] = [0, start_measure];
    a:
    if(accumulate$0){
     try{var val = Stdlib_Hashtbl[6].call(null, prev_hierarchy, name);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var
       this_table = Stdlib_Hashtbl[1].call(null, 0, 2),
       this_table$0 = this_table,
       this_measure_diff = zero$0(0);
      break a;
     }
     var measure_diff = val[1], match = val[2];
     Stdlib_Hashtbl[10].call(null, prev_hierarchy, name);
     var this_table$0 = match, this_measure_diff = measure_diff;
    }
    else
     var
      this_table$1 = Stdlib_Hashtbl[1].call(null, 0, 2),
      this_measure_diff$0 = zero$0(0),
      this_table$0 = this_table$1,
      this_measure_diff = this_measure_diff$0;
    hierarchy[1] = this_table$0;
    return try_finally
            ([0,
              function(param){
               hierarchy[1] = prev_hierarchy;
               var
                end_measure = create$0(0),
                measure_diff =
                  accumulate(this_measure_diff, start_measure, end_measure);
               return Stdlib_Hashtbl[5].call
                       (null,
                        prev_hierarchy,
                        name,
                        [0, measure_diff, this_table$0]);
              }],
             0,
             f);
   }
   function record(accumulate, pass, f, x){
    return record_call
            (accumulate, pass, function(param){return caml_call1(f, x);});
   }
   function time_display(v){
    function to_string_without_unit(v, width){
     return caml_call2(Stdlib_Printf[4].call(null, cI), width, v);
    }
    function to_string(param, width){
     var a = to_string_without_unit(v, width - 1 | 0);
     return Stdlib[28].call(null, a, cst_s);
    }
    function worth_displaying(param){
     return caml_float_of_string(to_string_without_unit(v, 0)) !== 0. ? 1 : 0;
    }
    return [0, to_string, worth_displaying];
   }
   function bytes_of_words(words){return words * (Stdlib_Sys[9] / 8 | 0);}
   function to_string_without_unit(v, width, scale){
    var
     v_rescaled = bytes_of_words(v) / scale,
     v_rounded = Math.floor(v_rescaled * 1000. + 0.5) / 1000.,
     v_str = caml_call2(Stdlib_Printf[4].call(null, cJ), 3, v_rounded),
     index_of_dot = Stdlib_String[35].call(null, v_str, 46),
     index_of_dot$0 = 3 <= index_of_dot ? index_of_dot : 4,
     v_str_truncated = Stdlib_String[15].call(null, v_str, 0, index_of_dot$0);
    return caml_call2(Stdlib_Printf[4].call(null, cK), width, v_str_truncated);
   }
   var units = [0, cst_B, cst_kB, cst_MB, cst_GB];
   function choose_memory_scale(words){
    var bytes = bytes_of_words(words), scale = [0, units.length - 2 | 0];
    for(;;){
     if(0 < scale[1] && bytes < Math.pow(1024., scale[1])){scale[1]--; continue;}
     var a = scale[1], b = caml_check_bound(units, a)[a + 1];
     return [0, Math.pow(1024., scale[1]), b];
    }
   }
   function memory_word_display(previous, v){
    function to_string(max, width){
     var
      match = choose_memory_scale(max),
      scale_str = match[2],
      scale = match[1],
      width$0 = width - caml_ml_string_length(scale_str) | 0,
      a = to_string_without_unit(v, width$0, scale);
     return Stdlib[28].call(null, a, scale_str);
    }
    function worth_displaying(max){
     var
      scale = choose_memory_scale(max)[1],
      a =
        caml_float_of_string(to_string_without_unit(v, 0, scale)) !== 0.
         ? 1
         : 0;
     if(a){
      if(previous){
       var p = previous[1], c = to_string_without_unit(v, 0, scale);
       return to_string_without_unit(p, 0, scale) !== c ? 1 : 0;
      }
      var b = 1;
     }
     else
      var b = a;
     return b;
    }
    return [0, to_string, worth_displaying];
   }
   function rows_of_hierarchy_list(nesting, make_row, hierarchy, total, env){
    var
     l =
       Stdlib_Hashtbl[14].call
        (null, function(k, d, l){return [0, [0, k, d], l];}, hierarchy, 0),
     list =
       Stdlib_List[56].call
        (null,
         function(param, a){
          var p2 = a[2][1], p1 = param[2][1];
          return caml_int_compare(p1[1], p2[1]);
         },
         l);
    a:
    {
     if(0 === list && 0 !== nesting){var list$0 = 0; break a;}
     var r = [0, total], a = create$1(0);
     Stdlib_Hashtbl[12].call
      (null,
       function(pass, param){
        var p2 = param[1], p1 = r[1];
        r[1] = [0, p1[1], p1[2] - p2[2], p1[3] - p2[3], p1[4] - p2[4] | 0];
        return 0;
       },
       hierarchy);
     var
      list$0 =
        Stdlib[37].call(null, list, [0, [0, cst_other, [0, r[1], a]], 0]);
    }
    var env$0 = [0, env];
    return Stdlib_List[19].call
            (null,
             function(param){
              var
               match$0 = param[2],
               hierarchy = match$0[2],
               measure_diff = match$0[1],
               name = param[1],
               env$1 = env$0[1],
               rows =
                 rows_of_hierarchy_list
                  (nesting + 1 | 0, make_row, hierarchy, measure_diff, env$1),
               b = 0 === nesting ? 1 : 0,
               c = b ? name === cst_other$0 ? 1 : 0 : b,
               match = caml_call3(make_row, env$1, measure_diff, c),
               env = match[2],
               values = match[1],
               a = [0, name, values, rows];
              env$0[1] = env;
              return a;
             },
             list$0);
   }
   function print$5(ppf, columns){
    if(! columns) return 0;
    var match = initial_measure[1];
    if(match)
     var v = match[1], initial_measure$0 = v;
    else
     var initial_measure$0 = zero;
    var
     m2 = create$0(0),
     measure_diff = accumulate(zero$0(0), zero, m2),
     hierarchy$0 = hierarchy[1];
    function make_row(prev_top_heap_words, p, toplevel_other){
     var
      a = toplevel_other ? initial_measure$0[3] : 0,
      top_heap_words = (prev_top_heap_words + p[4] | 0) - a | 0;
     return [0,
             Stdlib_List[19].call
              (null,
               function(param){
                if(885068885 <= param){
                 if(936769581 <= param){
                  var value = p[2];
                  return [0, value, time_display(value)];
                 }
                 var value$0 = p[3];
                 return [0, value$0, memory_word_display(0, value$0)];
                }
                if(208707190 <= param){
                 var value$1 = p[4];
                 return [0, value$1, memory_word_display(0, value$1)];
                }
                var value$2 = top_heap_words;
                return [0,
                        value$2,
                        memory_word_display([0, prev_top_heap_words], value$2)];
               },
               columns),
             top_heap_words];
    }
    var
     rows =
       rows_of_hierarchy_list
        (0, make_row, hierarchy$0, measure_diff, initial_measure$0[3]);
    if(rows)
     var values = rows[1][2], n_columns = Stdlib_List[1].call(null, values);
    else
     var n_columns = 0;
    var maxs = caml_make_vect(n_columns, 0.);
    function loop(param){
     var rows = param[3], values = param[2];
     Stdlib_List[18].call
      (null,
       function(i, param){
        var v = param[1], a = caml_check_bound(maxs, i)[i + 1];
        maxs[i + 1] = Stdlib_Float[22].call(null, a, v);
        return 0;
       },
       values);
     return Stdlib_List[17].call(null, loop, rows);
    }
    Stdlib_List[17].call(null, loop, rows);
    function display_cell(i, param, width){
     var
      c = param[2],
      b = caml_check_bound(maxs, i)[i + 1],
      display_cell = caml_call1(c[2], b);
     if(display_cell)
      var
       d = caml_check_bound(maxs, i)[i + 1],
       a = caml_call2(c[1], d, width);
     else
      var a = Stdlib_String[1].call(null, width, 45);
     return [0, display_cell, a];
    }
    var widths = caml_make_vect(n_columns, 1);
    function loop$0(param){
     var rows = param[3], values = param[2];
     Stdlib_List[18].call
      (null,
       function(i, cell){
        var
         str = display_cell(i, cell, 0)[2],
         a = caml_check_bound(widths, i)[i + 1];
        widths[i + 1] =
         Stdlib_Int[11].call(null, a, caml_ml_string_length(str));
        return 0;
       },
       values);
     return Stdlib_List[17].call(null, loop$0, rows);
    }
    Stdlib_List[17].call(null, loop$0, rows);
    function loop$1(param, indentation){
     var
      rows = param[3],
      values = param[2],
      name = param[1],
      c =
        Stdlib_List[20].call
         (null,
          function(i, cell){
           return display_cell(i, cell, caml_check_bound(widths, i)[i + 1]);
          },
          values),
      match = Stdlib_List[54].call(null, c),
      cell_strings = match[2],
      worth_displaying = match[1];
     if(Stdlib_List[33].call(null, function(b){return b;}, worth_displaying)){
      var a = Stdlib_String[6].call(null, cst$25, cell_strings);
      caml_call3(Stdlib_Format[129].call(null, ppf)(cL), indentation, a, name);
     }
     var b = Stdlib[28].call(null, cst$26, indentation);
     return Stdlib_List[17].call
             (null, function(a){return loop$1(a, b);}, rows);
    }
    return Stdlib_List[17].call
            (null, function(a){return loop$1(a, cst$27);}, rows);
   }
   var
    column_names =
      Stdlib_List[19].call(null, function(a){return a[1];}, column_mapping),
    cM = Stdlib_String[6].call(null, cst$28, column_names),
    options_doc = caml_call1(Stdlib_Printf[4].call(null, cN), cM),
    all_columns =
      Stdlib_List[19].call(null, function(a){return a[2];}, column_mapping),
    Dynlink_compilerlibs_Profile =
      [0,
       reset,
       record_call,
       record,
       print$5,
       options_doc,
       all_columns,
       generate,
       transl,
       typing];
   caml_register_global
    (1283, Dynlink_compilerlibs_Profile, "Dynlink_compilerlibs.Profile");
   function D(Module_name){
    function create(param){return caml_call1(Module_name[3][1], 13);}
    var
     clear = Module_name[3][2],
     Inconsistency =
       [248, cst_Dynlink_compilerlibs_Consi, caml_fresh_oo_id(0)],
     Not_available =
       [248, cst_Dynlink_compilerlibs_Consi$0, caml_fresh_oo_id(0)];
    function check(tbl, name, crc, source){
     var
      match = caml_call2(Module_name[3][7], tbl, name),
      old_source = match[2],
      old_crc = match[1],
      a = caml_notequal(crc, old_crc);
     if(a)
      throw caml_maybe_attach_backtrace
             ([0, Inconsistency, name, source, old_source], 1);
     return a;
    }
    function check$0(tbl, name, crc, source){
     try{var a = check(tbl, name, crc, source); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8])
       return caml_call3(Module_name[3][5], tbl, name, [0, crc, source]);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    function check_noadd(tbl, name, crc, source){
     try{var a = check(tbl, name, crc, source); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8])
       throw caml_maybe_attach_backtrace([0, Not_available, name], 1);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    function set(tbl, name, crc, source){
     return caml_call3(Module_name[3][5], tbl, name, [0, crc, source]);
    }
    function source(tbl, name){
     return caml_call2(Module_name[3][7], tbl, name)[2];
    }
    function extract(l, tbl){
     var l$0 = Stdlib_List[59].call(null, Module_name[4], l);
     return Stdlib_List[25].call
             (null,
              function(assc, name){
               try{
                var
                 crc = caml_call2(Module_name[3][7], tbl, name)[1],
                 a = [0, [0, name, [0, crc]], assc];
                return a;
               }
               catch(exn$0){
                var exn = caml_wrap_exception(exn$0);
                if(exn === Stdlib[8]) return [0, [0, name, 0], assc];
                throw caml_maybe_attach_backtrace(exn, 0);
               }
              },
              0,
              l$0);
    }
    function extract_map(mod_names, tbl){
     return caml_call3
             (Module_name[1][16],
              function(name, result){
               try{
                var
                 crc = caml_call2(Module_name[3][7], tbl, name)[1],
                 a = caml_call3(Module_name[2][4], name, [0, crc], result);
                return a;
               }
               catch(exn$0){
                var exn = caml_wrap_exception(exn$0);
                if(exn === Stdlib[8])
                 return caml_call3(Module_name[2][4], name, 0, result);
                throw caml_maybe_attach_backtrace(exn, 0);
               }
              },
              mod_names,
              Module_name[2][1]);
    }
    function filter(p, tbl){
     var to_remove = [0, 0];
     caml_call2
      (Module_name[3][12],
       function(name, param){
        var
         a = 1 - caml_call1(p, name),
         b = a ? (to_remove[1] = [0, name, to_remove[1]], 0) : a;
        return b;
       },
       tbl);
     return Stdlib_List[17].call
             (null,
              function(name){
               for(;;){
                if(! caml_call2(Module_name[3][11], tbl, name)) return 0;
                caml_call2(Module_name[3][6], tbl, name);
               }
              },
              to_remove[1]);
    }
    return [0,
            create,
            clear,
            check$0,
            check_noadd,
            set,
            source,
            extract,
            extract_map,
            filter,
            Inconsistency,
            Not_available];
   }
   var Dynlink_compilerlibs_Consistbl = [0, D];
   caml_register_global
    (1284, Dynlink_compilerlibs_Consistbl, "Dynlink_compilerlibs.Consistbl");
   function setup$0(oc){
    try{var a = caml_sys_getenv(cst_TERM), term = a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var term = cst$29;
    }
    if(term !== cst$115 && term !== cst_dumb && caml_sys_isatty(oc)) return 2;
    return 1;
   }
   function num_lines(oc){
    var rows = runtime.caml_terminfo_rows(oc);
    return 0 < rows ? rows : 24;
   }
   function backup(oc, n){
    var a = 1 <= n ? 1 : 0;
    return a ? caml_call1(Stdlib_Printf[1].call(null, oc, cO), n) : a;
   }
   function resume(oc, n){
    var a = 1 <= n ? 1 : 0;
    return a ? caml_call1(Stdlib_Printf[1].call(null, oc, cP), n) : a;
   }
   function standout(oc, b){
    var a = b ? cst_4m : cst_0m;
    Stdlib[66].call(null, oc, a);
    return Stdlib[63].call(null, oc);
   }
   var
    Dynlink_compilerlibs_Terminfo =
      [0, setup$0, num_lines, backup, standout, resume];
   caml_register_global
    (1285, Dynlink_compilerlibs_Terminfo, "Dynlink_compilerlibs.Terminfo");
   function number(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return 1;
       case 1:
        return 2;
       case 2:
        return 5;
       case 3:
        return 10;
       case 4:
        return 11;
       case 5:
        return 12;
       case 6:
        return 14;
       case 7:
        return 16;
       case 8:
        return 20;
       case 9:
        return 21;
       case 10:
        return 23;
       case 11:
        return 8;
       case 12:
        return 28;
       case 13:
        return 29;
       case 14:
        return 39;
       case 15:
        return 52;
       case 16:
        return 56;
       case 17:
        return 59;
       case 18:
        return 62;
       case 19:
        return 64;
       case 20:
        return 68;
       case 21:
        return 70;
       case 22:
        return 71;
       default: return 72;
     }
    switch(param[0]){
      case 0:
       return 4;
      case 1:
       return 6;
      case 2:
       return 7;
      case 3:
       return 8;
      case 4:
       return 9;
      case 5:
       return 13;
      case 6:
       return 15;
      case 7:
       return 17;
      case 8:
       return 18;
      case 9:
       return 19;
      case 10:
       return 22;
      case 11:
       return 24;
      case 12:
       return 26;
      case 13:
       return 27;
      case 14:
       return 30;
      case 15:
       return 31;
      case 16:
       return 32;
      case 17:
       return 33;
      case 18:
       return 34;
      case 19:
       return 35;
      case 20:
       return 36;
      case 21:
       return 37;
      case 22:
       return 38;
      case 23:
       return 40;
      case 24:
       return 41;
      case 25:
       return 42;
      case 26:
       return 43;
      case 27:
       return 44;
      case 28:
       return 45;
      case 29:
       return 46;
      case 30:
       return 47;
      case 31:
       return 48;
      case 32:
       return 49;
      case 33:
       return 50;
      case 34:
       return 51;
      case 35:
       return 53;
      case 36:
       return 54;
      case 37:
       return 55;
      case 38:
       return 57;
      case 39:
       return 58;
      case 40:
       return 60;
      case 41:
       return 61;
      case 42:
       return 63;
      case 43:
       return 65;
      case 44:
       return 66;
      case 45:
       return 67;
      default: return 69;
    }
   }
   var
    last_warning_number = 72,
    h = Stdlib_Hashtbl[1].call(null, 0, last_warning_number);
   Stdlib_List[17].call
    (null,
     function(param){
      var names = param[2], number = param[1];
      return Stdlib_List[17].call
              (null,
               function(name){
                return Stdlib_Hashtbl[5].call(null, h, name, number);
               },
               names);
     },
     descriptions);
   function name_to_number(s){return Stdlib_Hashtbl[7].call(null, h, s);}
   function letter(param){
    var switcher = param - 97 | 0;
    if(25 < switcher >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, cQ], 1);
    switch(switcher){
      case 0:
       var loop = function(i){return 0 === i ? 0 : [0, i, loop(i - 1 | 0)];};
       return loop(last_warning_number);
      case 2:
       return cR;
      case 3:
       return cS;
      case 4:
       return cT;
      case 5:
       return cU;
      case 10:
       return cV;
      case 11:
       return cW;
      case 12:
       return cX;
      case 15:
       return cY;
      case 17:
       return cZ;
      case 18:
       return c0;
      case 20:
       return c1;
      case 21:
       return c2;
      case 23:
       return c3;
      case 24:
       return c4;
      case 25:
       return c5;
      default: return 0;
    }
   }
   var
    current =
      [0,
       [0,
        caml_make_vect(73, 1),
        caml_make_vect(73, 0),
        [0, a[4][68][1], 0],
        [0, a[4][68][1], 1]]],
    disabled = [0, 0];
   function without_warnings(f){
    return protect_refs([0, [0, disabled, 1], 0], f);
   }
   function backup$0(param){return current[1];}
   function restore(x){current[1] = x; return 0;}
   function is_active(x){
    var a = 1 - disabled[1];
    if(a)
     var b = number(x), c = caml_check_bound(current[1][1], b)[b + 1];
    else
     var c = a;
    return c;
   }
   function is_error(x){
    var a = 1 - disabled[1];
    if(a)
     var b = number(x), c = caml_check_bound(current[1][2], b)[b + 1];
    else
     var c = a;
    return c;
   }
   function with_state(state, f){
    var prev = current[1];
    restore(state);
    try{var r = caml_call1(f, 0); restore(prev); return r;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     restore(prev);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function mk_lazy(f){
    var state = current[1];
    return [246, function(a){return with_state(state, f);}];
   }
   function set_alert(error, enable, s){
    if(s !== cst_all)
     var
      match = error ? current[1][4] : current[1][3],
      pos = match[2],
      set = match[1],
      f = enable === pos ? a[4][68][4] : a[4][68][6],
      upd = [0, caml_call2(f, s, set), pos];
    else
     var upd = [0, a[4][68][1], 1 - enable];
    if(error){
     var b = current[1];
     current[1] = [0, b[1], b[2], b[3], upd];
     return 0;
    }
    var c = current[1];
    current[1] = [0, c[1], c[2], upd, c[4]];
    return 0;
   }
   function parse_alert_option(s){
    var n = caml_ml_string_length(s);
    function scan$0(counter, i){
     if(i === n) return 0;
     if((i + 1 | 0) === n)
      throw caml_maybe_attach_backtrace
             ([0, Stdlib_Arg[8], cst_Ill_formed_list_of_alert_s], 1);
     var
      match = caml_string_get(s, i),
      match$0 = caml_string_get(s, i + 1 | 0);
     if(46 <= match){
      if(64 === match){
       var
        a = i + 1 | 0,
        b = function(s){set_alert(1, 1, s); return set_alert(0, 1, s);};
       if(counter >= 50) return caml_trampoline_return(id, [0, b, a]);
       var counter$0 = counter + 1 | 0;
       return id(counter$0, b, a);
      }
     }
     else if(43 <= match)
      switch(match - 43 | 0){
        case 0:
         if(43 === match$0){
          var
           c = i + 2 | 0,
           l = 1,
           m = 1,
           d = function(a){return set_alert(m, l, a);};
          if(counter >= 50) return caml_trampoline_return(id, [0, d, c]);
          var counter$2 = counter + 1 | 0;
          return id(counter$2, d, c);
         }
         var
          e = i + 1 | 0,
          o = 1,
          p = 0,
          f = function(a){return set_alert(p, o, a);};
         if(counter >= 50) return caml_trampoline_return(id, [0, f, e]);
         var counter$1 = counter + 1 | 0;
         return id(counter$1, f, e);
        case 2:
         if(45 === match$0){
          var
           g = i + 2 | 0,
           q = 0,
           r = 1,
           h = function(a){return set_alert(r, q, a);};
          if(counter >= 50) return caml_trampoline_return(id, [0, h, g]);
          var counter$4 = counter + 1 | 0;
          return id(counter$4, h, g);
         }
         var
          j = i + 1 | 0,
          t = 0,
          u = 0,
          k = function(a){return set_alert(u, t, a);};
         if(counter >= 50) return caml_trampoline_return(id, [0, k, j]);
         var counter$3 = counter + 1 | 0;
         return id(counter$3, k, j);
      }
     throw caml_maybe_attach_backtrace
            ([0, Stdlib_Arg[8], cst_Ill_formed_list_of_alert_s$0], 1);
    }
    function scan(i){return caml_trampoline(scan$0(0, i));}
    function id(counter, f, i$1){
     var i = i$1;
     for(;;){
      if(i < n){
       var param = caml_string_get(s, i);
       a:
       {
        b:
        {
         if(65 <= param){
          var a = param - 91 | 0;
          if(5 < a >>> 0){if(32 <= a) break b;} else if(4 !== a) break b;
         }
         else
          if(48 <= param){
           if(58 <= param) break b;
          }
          else if(39 !== param) break b;
         var b = 1;
         break a;
        }
        var b = 0;
       }
       if(b){var i$0 = i + 1 | 0; i = i$0; continue;}
      }
      if(i === i$1)
       throw caml_maybe_attach_backtrace
              ([0, Stdlib_Arg[8], cst_Ill_formed_list_of_alert_s$1], 1);
      var id = Stdlib_String[15].call(null, s, i$1, i - i$1 | 0);
      caml_call1(f, id);
      if(counter >= 50) return caml_trampoline_return(scan$0, [0, i]);
      var counter$0 = counter + 1 | 0;
      return scan$0(counter$0, i);
     }
    }
    return scan(0);
   }
   function letter_alert(tokens){
    function print_modifier(ppf, param){
     switch(param){
       case 0:
        return Stdlib_Format[129].call(null, ppf)(c7);
       case 1:
        return Stdlib_Format[129].call(null, ppf)(c8);
       default: return Stdlib_Format[129].call(null, ppf)(c9);
     }
    }
    function commit_chunk(l, chunk){
     if(chunk && chunk[2]) return [0, Stdlib_List[9].call(null, chunk), l];
     return l;
    }
    function group_consecutive_letters(param, a){
     var current = param[2], l = param[1];
     if(0 === a[0] && ! a[2]){var x = a[1]; return [0, l, [0, x, current]];}
     return [0, commit_chunk(l, current), 0];
    }
    var
     match = Stdlib_List[25].call(null, group_consecutive_letters, db, tokens),
     on_going = match[2],
     l = match[1],
     consecutive_letters = commit_chunk(l, on_going);
    if(! consecutive_letters) return 0;
    var
     example = consecutive_letters[1],
     a = Stdlib_Lexing[1],
     pos = [0, cst_none, a[2], a[3], a[4]],
     nowhere = [0, pos, pos, 1];
    function spelling_hint(ppf){
     var
      max_seq_len =
        Stdlib_List[25].call
         (null,
          function(l, x){
           var a = Stdlib_List[1].call(null, x);
           return Stdlib_Int[11].call(null, l, a);
          },
          0,
          consecutive_letters);
     return 5 <= max_seq_len ? Stdlib_Format[129].call(null, ppf)(dc) : 0;
    }
    var
     b = Stdlib_Format[23],
     c = [0, function(param){return function(a){return 0;};}],
     d = Stdlib_Format[123],
     message =
       caml_call4
        (Stdlib_Format[133].call(null, dd),
         function(a, e){return d(c, b, a, e);},
         example,
         function(ppf){
          return Stdlib_List[17].call
                  (null,
                   function(param){
                    if(0 !== param[0]){
                     var m$0 = param[3], b = param[2], a = param[1];
                     return a === b
                             ? caml_call3
                               (Stdlib_Format[129].call(null, ppf)(c$),
                                print_modifier,
                                m$0,
                                a)
                             : caml_call4
                               (Stdlib_Format[129].call(null, ppf)(da),
                                print_modifier,
                                m$0,
                                a,
                                b);
                    }
                    var match = param[2], l = param[1];
                    if(match){
                     var m = match[1];
                     return caml_call3
                             (Stdlib_Format[129].call(null, ppf)(c_),
                              print_modifier,
                              m,
                              l);
                    }
                    var
                     lowercase = Stdlib_Char[5].call(null, l) === l ? 1 : 0,
                     c = lowercase ? 45 : 43;
                    return caml_call2
                            (Stdlib_Format[129].call(null, ppf)(c6), c, l);
                   },
                   tokens);
         },
         spelling_hint);
    return [0, [0, cst_ocaml_deprecated_cli, message, nowhere, nowhere]];
   }
   function parse_warnings(s){
    function error(param){
     throw caml_maybe_attach_backtrace
            ([0, Stdlib_Arg[8], cst_Ill_formed_list_of_warning], 1);
    }
    function get_num(n$1, i$1){
     var n = n$1, i = i$1;
     for(;;){
      if(caml_ml_string_length(s) <= i) return [0, i, n];
      if(9 < caml_string_get(s, i) - 48 >>> 0) return [0, i, n];
      var
       i$0 = i + 1 | 0,
       n$0 = ((10 * n | 0) + caml_string_get(s, i) | 0) - 48 | 0;
      n = n$0;
      i = i$0;
     }
    }
    function loop$0(counter, tokens$1, i$1){
     a:
     {
      var tokens = tokens$1, i = i$1;
      for(;;){
       if(caml_ml_string_length(s) <= i)
        return Stdlib_List[9].call(null, tokens);
       var match = caml_string_get(s, i);
       if(65 > match) break;
       if(97 <= match){
        if(123 <= match) break a;
       }
       else if(91 <= match) break a;
       var
        i$0 = i + 1 | 0,
        tokens$0 = [0, [0, caml_string_get(s, i), 0], tokens];
       tokens = tokens$0;
       i = i$0;
      }
      if(46 <= match){
       if(64 <= match){
        var a = i + 1 | 0, b = 2;
        if(counter >= 50)
         return caml_trampoline_return(loop_letter_num, [0, tokens, b, a]);
        var counter$0 = counter + 1 | 0;
        return loop_letter_num(counter$0, tokens, b, a);
       }
      }
      else if(43 <= match)
       switch(match - 43 | 0){
         case 0:
          var c = i + 1 | 0, d = 0;
          if(counter >= 50)
           return caml_trampoline_return(loop_letter_num, [0, tokens, d, c]);
          var counter$1 = counter + 1 | 0;
          return loop_letter_num(counter$1, tokens, d, c);
         case 2:
          var e = i + 1 | 0, f = 1;
          if(counter >= 50)
           return caml_trampoline_return(loop_letter_num, [0, tokens, f, e]);
          var counter$2 = counter + 1 | 0;
          return loop_letter_num(counter$2, tokens, f, e);
       }
     }
     return error(0);
    }
    function loop(tokens, i){return caml_trampoline(loop$0(0, tokens, i));}
    function loop_letter_num(counter, tokens, modifier, i$1){
     if(caml_ml_string_length(s) <= i$1) return error(0);
     var a = caml_string_get(s, i$1) - 65 | 0;
     if(57 < a >>> 0){
      if(9 >= a + 17 >>> 0){
       var match = get_num(0, i$1), n1 = match[2], i = match[1];
       a:
       {
        if
         ((i + 2 | 0) < caml_ml_string_length(s)
          &&
           46 === caml_string_get(s, i)
           && 46 === caml_string_get(s, i + 1 | 0)){
         var
          match$0 = get_num(0, i + 2 | 0),
          n2 = match$0[2],
          i$0 = match$0[1];
         if(n2 < n1) error(0);
         var match$1 = [0, i$0, , n2];
         break a;
        }
        var match$1 = [0, i, , n1];
       }
       var
        n2$0 = match$1[3],
        i$2 = match$1[1],
        b = [0, [1, n1, n2$0, modifier], tokens];
       if(counter >= 50) return caml_trampoline_return(loop$0, [0, b, i$2]);
       var counter$1 = counter + 1 | 0;
       return loop$0(counter$1, b, i$2);
      }
     }
     else if(5 < a - 26 >>> 0){
      var
       c = i$1 + 1 | 0,
       d = [0, [0, caml_string_get(s, i$1), [0, modifier]], tokens];
      if(counter >= 50) return caml_trampoline_return(loop$0, [0, d, c]);
      var counter$0 = counter + 1 | 0;
      return loop$0(counter$0, d, c);
     }
     return error(0);
    }
    return loop(0, 0);
   }
   function parse_options(errflag, s){
    var
     error = Stdlib_Array[8].call(null, current[1][2]),
     active = Stdlib_Array[8].call(null, current[1][1]),
     flags = errflag ? error : active;
    function action(modifier, i){
     switch(modifier){
       case 0:
        return 3 === i
                ? set_alert(errflag, 1, cst_deprecated)
                : (caml_check_bound(flags, i)[i + 1] = 1, 0);
       case 1:
        return 3 === i
                ? set_alert(errflag, 0, cst_deprecated$0)
                : (caml_check_bound(flags, i)[i + 1] = 0, 0);
       default:
        return 3 === i
                ? (set_alert
                   (0, 1, cst_deprecated$1),
                  set_alert(1, 1, cst_deprecated$2))
                : (caml_check_bound
                    (active, i)
                   [i + 1]
                  = 1,
                  caml_check_bound(error, i)[i + 1] = 1,
                  0);
     }
    }
    function eval$(param){
     if(0 === param[0]){
      var m = param[2], c = param[1], lc = Stdlib_Char[5].call(null, c);
      if(m)
       var m$0 = m[1], modifier = m$0;
      else
       var modifier = c === lc ? 1 : 0;
      var b = letter(lc);
      return Stdlib_List[17].call
              (null, function(a){return action(modifier, a);}, b);
     }
     var
      modifier$0 = param[3],
      n2 = param[2],
      n1 = param[1],
      a = Stdlib_Int[10].call(null, n2, last_warning_number);
     if(a >= n1){
      var n = n1;
      for(;;){
       action(modifier$0, n);
       var d = n + 1 | 0;
       if(a === n) break;
       n = d;
      }
     }
     return 0;
    }
    function parse_and_eval(s){
     var tokens = parse_warnings(s);
     Stdlib_List[17].call(null, eval$, tokens);
     return letter_alert(tokens);
    }
    var match = name_to_number(s);
    a:
    if(match){
     var n = match[1];
     action(0, n);
     var alerts = 0;
    }
    else if(s === cst$115)
     var alerts = parse_and_eval(s);
    else{
     var
      rest =
        Stdlib_String[15].call(null, s, 1, caml_ml_string_length(s) - 1 | 0),
      match$0 = caml_string_get(s, 0),
      match$1 = name_to_number(rest);
     if(46 <= match$0){
      if(64 === match$0 && match$1){
       var n$0 = match$1[1];
       action(2, n$0);
       var alerts = 0;
       break a;
      }
     }
     else if(43 <= match$0)
      switch(match$0 - 43 | 0){
        case 0:
         if(match$1){
          var n$1 = match$1[1];
          action(0, n$1);
          var alerts = 0;
          break a;
         }
         break;
        case 2:
         if(match$1){
          var n$2 = match$1[1];
          action(1, n$2);
          var alerts = 0;
          break a;
         }
         break;
      }
     var alerts = parse_and_eval(s);
    }
    var a = current[1];
    current[1] = [0, active, error, a[3], a[4]];
    return alerts;
   }
   parse_options(0, defaults_w);
   parse_options(1, defaults_warn_error);
   function ref_manual_explanation(param){
    return caml_call2(Stdlib_Printf[4].call(null, de), 11, 5);
   }
   function message(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cst_this_is_the_start_of_a_com;
       case 1:
        return cst_this_is_not_the_end_of_a_c;
       case 2:
        return cst_this_function_application_;
       case 3:
        return cst_this_expression_should_hav;
       case 4:
        return cst_this_match_case_is_unused;
       case 5:
        return cst_this_sub_pattern_is_unused;
       case 6:
        return cst_illegal_backslash_escape_i;
       case 7:
        return cst_this_optional_argument_can;
       case 8:
        return cst_this_argument_will_not_be_;
       case 9:
        return cst_this_statement_never_retur;
       case 10:
        return cst_all_the_fields_are_explici;
       case 11:
        return cst_this_pattern_matching_is_n;
       case 12:
        return cst_wildcard_pattern_given_as_;
       case 13:
        return cst_unescaped_end_of_line_in_a;
       case 14:
        return cst_unused_rec_flag;
       case 15:
        return caml_call1
                (Stdlib_Printf[4].call(null, df), ref_manual_explanation);
       case 16:
        return cst_this_match_case_is_unreach;
       case 17:
        return cst_A_potential_assignment_to_;
       case 18:
        return cst_Type_constraints_do_not_ap;
       case 19:
        return cst_option_unsafe_used_with_a_;
       case 20:
        return cst_This_pattern_depends_on_mu;
       case 21:
        return cst_Cannot_find_interface_file;
       case 22:
        return cst_This_function_is_marked_ta;
       default: return cst_This_call_is_in_tail_modul;
     }
    switch(param[0]){
      case 0:
       var s = param[1];
       if(s === cst$115) return cst_this_pattern_matching_is_f$0;
       var c = Stdlib[28].call(null, s, cst$30);
       return Stdlib[28].call(null, cst_this_pattern_matching_is_f, c);
      case 1:
       var ls = param[1];
       if(! ls) throw caml_maybe_attach_backtrace([0, Assert_failure, dg], 1);
       if(ls[2]){
        var
         d = Stdlib_String[6].call(null, cst$31, ls),
         e = Stdlib[28].call(null, d, cst_were_omitted_in_the_applic);
        return Stdlib[28].call(null, cst_labels, e);
       }
       var
        l = ls[1],
        f = Stdlib[28].call(null, l, cst_was_omitted_in_the_applica);
       return Stdlib[28].call(null, cst_label, f);
      case 2:
       var match = param[1];
       if(! match)
        throw caml_maybe_attach_backtrace([0, Assert_failure, dh], 1);
       var lab = match[1];
       if(match[2]){
        var slist = match[2];
        return Stdlib_String[6].call
                (null,
                 cst$33,
                 [0,
                  cst_the_following_methods_are_,
                  [0, lab, [0, cst$32, slist]]]);
       }
       var g = Stdlib[28].call(null, lab, cst_is_overridden);
       return Stdlib[28].call(null, cst_the_method, g);
      case 3:
       var s$0 = param[1];
       return s$0 !== cst$115
               ? Stdlib[28].call(null, cst_this_pattern_matching_is_n$0, s$0)
               : cst_this_pattern_matching_is_n$1;
      case 4:
       var
        s$1 = param[1],
        h = Stdlib[28].call(null, s$1, cst_Either_bind_these_labels_e);
       return Stdlib[28].call(null, cst_the_following_labels_are_n, h);
      case 5:
       var match$0 = param[1];
       if(! match$0)
        throw caml_maybe_attach_backtrace([0, Assert_failure, di], 1);
       var lab$0 = match$0[1];
       if(match$0[2]){
        var slist$0 = match$0[2];
        return Stdlib_String[6].call
                (null,
                 cst$35,
                 [0,
                  cst_the_following_instance_var,
                  [0, lab$0, [0, cst$34, slist$0]]]);
       }
       var i = Stdlib[28].call(null, lab$0, cst_is_overridden$0);
       return Stdlib[28].call(null, cst_the_instance_variable, i);
      case 6:
       var
        l$0 = param[1],
        j = Stdlib_String[6].call(null, cst$37, l$0),
        k = Stdlib[28].call(null, j, cst$36);
       return Stdlib[28].call(null, cst_the_following_private_meth, k);
      case 7:
       var m = param[1], n = Stdlib[28].call(null, m, cst_is_not_declared);
       return Stdlib[28].call(null, cst_the_virtual_method, n);
      case 8:
       var s$2 = param[1];
       return Stdlib[28].call(null, s$2, cst_is_not_principal);
      case 9:
       var s$3 = param[1];
       return Stdlib[28].call(null, s$3, cst_without_principality);
      case 10:
       var s$4 = param[1]; return s$4;
      case 11:
       var
        modname = param[1],
        o = Stdlib[28].call(null, modname, cst_is_not_a_valid_module_name);
       return Stdlib[28].call(null, cst_bad_source_file_name, o);
      case 14:
       var tc2 = param[4], tc1 = param[3], cname = param[2], kind = param[1];
       return caml_call4
               (Stdlib_Printf[4].call(null, dj), kind, cname, tc1, tc2);
      case 15:
       var file2 = param[3], file1 = param[2], modname$0 = param[1];
       return caml_call3
               (Stdlib_Printf[4].call(null, dk), file1, file2, modname$0);
      case 16:
       var v$0 = param[1], q = Stdlib[28].call(null, v$0, cst$39);
       return Stdlib[28].call(null, cst_unused_value, q);
      case 17:
       var s$5 = param[1], r = Stdlib[28].call(null, s$5, cst$40);
       return Stdlib[28].call(null, cst_unused_open, r);
      case 18:
       var s$6 = param[1], u = Stdlib[28].call(null, s$6, cst$41);
       return Stdlib[28].call(null, cst_unused_type, u);
      case 19:
       var s$7 = param[1], w = Stdlib[28].call(null, s$7, cst$42);
       return Stdlib[28].call(null, cst_unused_for_loop_index, w);
      case 20:
       var s$8 = param[1], y = Stdlib[28].call(null, s$8, cst$43);
       return Stdlib[28].call(null, cst_unused_ancestor_variable, y);
      case 21:
       var s$9 = param[1];
       switch(param[2]){
         case 0:
          var z = Stdlib[28].call(null, s$9, cst$44);
          return Stdlib[28].call(null, cst_unused_constructor, z);
         case 1:
          var A = Stdlib[28].call(null, s$9, cst_is_never_used_to_build_val);
          return Stdlib[28].call(null, cst_constructor, A);
         default:
          var
           B = Stdlib[28].call(null, s$9, cst_is_never_used_to_build_val$0);
          return Stdlib[28].call(null, cst_constructor$0, B);
       }
      case 22:
       var
        complaint = param[3],
        is_exception = param[2],
        s$10 = param[1],
        kind$0 = is_exception ? cst_exception : cst_extension_constructor,
        C = Stdlib[28].call(null, cst$45, s$10),
        name = Stdlib[28].call(null, kind$0, C);
       switch(complaint){
         case 0:
          return Stdlib[28].call(null, cst_unused, name);
         case 1:
          return Stdlib[28].call(null, name, cst_is_never_used_to_build_val$1);
         default:
          return Stdlib[28].call(null, name, cst_is_never_used_to_build_val$2);
       }
      case 23:
       var slist$1 = param[2], ty = param[1];
       if(slist$1 && ! slist$1[2] && ! param[3]){
        var
         nm = slist$1[1],
         H = Stdlib[28].call(null, ty, cst_It_is_not_visible_in_the_c),
         I = Stdlib[28].call(null, cst_was_selected_from_type, H);
        return Stdlib[28].call(null, nm, I);
       }
       if(! param[3])
        throw caml_maybe_attach_backtrace([0, Assert_failure, dl], 1);
       var
        D = Stdlib_String[6].call(null, cst$46, slist$1),
        E = Stdlib[28].call(null, D, cst_They_will_not_be_selected_),
        F = Stdlib[28].call(null, cst_contains_fields_that_are_n, E),
        G = Stdlib[28].call(null, ty, F);
       return Stdlib[28].call(null, cst_this_record_of_type, G);
      case 24:
       var slist$2 = param[1];
       if(slist$2 && ! slist$2[2] && ! param[3]){
        var
         expansion$0 = param[4],
         tl$0 = param[2],
         s$11 = slist$2[1],
         M =
           Stdlib[28].call
            (null, cst_The_first_one_was_selected$0, expansion$0),
         N = Stdlib_String[6].call(null, cst$48, tl$0),
         O = Stdlib[28].call(null, N, M),
         P = Stdlib[28].call(null, cst_belongs_to_several_types, O);
        return Stdlib[28].call(null, s$11, P);
       }
       var tl = param[2];
       if(! param[3])
        throw caml_maybe_attach_backtrace([0, Assert_failure, dm], 1);
       var
        expansion = param[4],
        J = Stdlib[28].call(null, cst_The_first_one_was_selected, expansion),
        K = Stdlib_String[6].call(null, cst$47, tl),
        L = Stdlib[28].call(null, K, J);
       return Stdlib[28].call(null, cst_these_field_labels_belong_, L);
      case 25:
       var
        s$12 = param[1],
        Q = Stdlib[28].call(null, s$12, cst_relies_on_type_directed_di);
       return Stdlib[28].call(null, cst_this_use_of, Q);
      case 26:
       var
        s$13 = param[1],
        R = Stdlib[28].call(null, s$13, cst_is_not_optional);
       return Stdlib[28].call(null, cst_the_label, R);
      case 27:
       var s$14 = param[2], kind$1 = param[1];
       return caml_call2(Stdlib_Printf[4].call(null, dn), kind$1, s$14);
      case 28:
       var s$15 = param[2], kind$2 = param[1];
       return caml_call2(Stdlib_Printf[4].call(null, dp), kind$2, s$15);
      case 29:
       var s$16 = param[2], var$ = param[1];
       return caml_call2(Stdlib_Printf[4].call(null, dq), var$, s$16);
      case 30:
       var s$17 = param[2], a = param[1];
       return caml_call2(Stdlib_Printf[4].call(null, dr), a, s$17);
      case 31:
       var
        sl = param[1],
        S = Stdlib_String[6].call(null, cst$49, sl),
        T = 1 === Stdlib_List[1].call(null, sl) ? cst$50 : cst_s$0;
       return caml_call2(Stdlib_Printf[4].call(null, ds), T, S);
      case 32:
       var match$1 = param[2], name$0 = param[1];
       if(! match$1)
        return Stdlib[28].call(null, cst_no_cmi_file_was_found_in_p, name$0);
       var msg = match$1[1];
       return caml_call2(Stdlib_Printf[4].call(null, dt), name$0, msg);
      case 33:
       var unattached = param[1];
       return unattached
               ? cst_unattached_documentation_c
               : cst_ambiguous_documentation_co;
      case 34:
       var b = param[1], U = b ? cst_tailcall : cst_non_tailcall;
       return caml_call1(Stdlib_Printf[4].call(null, du), U);
      case 35:
       var attr_name = param[1];
       return caml_call1(Stdlib_Printf[4].call(null, dv), attr_name);
      case 36:
       var attr_name$0 = param[1];
       return caml_call1(Stdlib_Printf[4].call(null, dw), attr_name$0);
      case 37:
       var reason = param[1];
       return caml_call1(Stdlib_Printf[4].call(null, dx), reason);
      case 38:
       var
        vars = param[1],
        vars$0 = Stdlib_List[56].call(null, Stdlib_String[9], vars);
       if(! vars$0)
        throw caml_maybe_attach_backtrace([0, Assert_failure, dz], 1);
       var x = vars$0[1];
       if(vars$0[2])
        var
         vars$1 = Stdlib_String[6].call(null, cst$51, vars$0),
         V = Stdlib[28].call(null, cst_appear, in_different_places),
         W = Stdlib[28].call(null, vars$1, V),
         vars_explanation = Stdlib[28].call(null, cst_variables, W);
       else
        var
         X = Stdlib[28].call(null, cst_appears, in_different_places),
         Y = Stdlib[28].call(null, x, X),
         vars_explanation = Stdlib[28].call(null, cst_variable, Y);
       return caml_call2
               (Stdlib_Printf[4].call(null, dy),
                vars_explanation,
                ref_manual_explanation);
      case 39:
       var name$1 = param[1];
       return caml_call1(Stdlib_Printf[4].call(null, dA), name$1);
      case 40:
       var s$18 = param[1], Z = Stdlib[28].call(null, s$18, cst$52);
       return Stdlib[28].call(null, cst_unused_module, Z);
      case 41:
       var t = param[1];
       return caml_call2(Stdlib_Printf[4].call(null, dB), t, t);
      case 42:
       var
        s$19 = param[1],
        _ = Stdlib[28].call(null, s$19, cst_Beware_that_this_warning_i);
       return Stdlib[28].call(null, cst_The_printed_interface_diff, _);
      case 43:
       var name$2 = param[1];
       return caml_call1(Stdlib_Printf[4].call(null, dC), name$2);
      case 44:
       var s$20 = param[1], $ = Stdlib[28].call(null, s$20, cst$53);
       return Stdlib[28].call(null, cst_unused_open$0, $);
      case 45:
       var s$21 = param[1], aa = Stdlib[28].call(null, s$21, cst$54);
       return Stdlib[28].call(null, cst_unused_functor_parameter, aa);
      case 46:
       var s$22 = param[1];
       switch(param[2]){
         case 0:
          var ab = Stdlib[28].call(null, s$22, cst$55);
          return Stdlib[28].call(null, cst_unused_record_field, ab);
         case 1:
          var
           ac = Stdlib[28].call(null, s$22, cst_is_never_read_However_this);
          return Stdlib[28].call(null, cst_record_field, ac);
         default:
          var ad = Stdlib[28].call(null, s$22, cst_is_never_mutated);
          return Stdlib[28].call(null, cst_mutable_record_field, ad);
       }
      default:
       var v = param[1], p = Stdlib[28].call(null, v, cst$38);
       return Stdlib[28].call(null, cst_unused_variable, p);
    }
   }
   var nerrors = [0, 0];
   function report(w){
    if(! is_active(w)) return -1008610421;
    if(is_error(w)) nerrors[1]++;
    var
     c = is_error(w),
     d = message(w),
     n = number(w),
     match =
       Stdlib_List[39].call
        (null,
         function(param){var number = param[1]; return number === n ? 1 : 0;},
         descriptions);
    a:
    {
     var b = 0;
     if(match){
      var match$0 = match[1][2];
      if(match$0){
       var
        s = match$0[1],
        a = caml_call2(Stdlib_Printf[4].call(null, dD), n, s);
       break a;
      }
     }
     var a = Stdlib[33].call(null, n);
    }
    return [0, -891636250, [0, a, d, c, b]];
   }
   function report_alert(alert){
    var kind = alert[1], b = 1 - disabled[1];
    if(b)
     var
      match = current[1][3],
      pos = match[2],
      set = match[1],
      match$0 = caml_call2(a[4][68][3], kind, set) === pos ? 1 : 0;
    else
     var match$0 = b;
    if(! match$0) return -1008610421;
    var kind$0 = alert[1], c = 1 - disabled[1];
    if(c)
     var
      match$1 = current[1][4],
      pos$0 = match$1[2],
      set$0 = match$1[1],
      is_error = caml_call2(a[4][68][3], kind$0, set$0) === pos$0 ? 1 : 0;
    else
     var is_error = c;
    if(is_error) nerrors[1]++;
    var message = normalise_eol(alert[2]);
    a:
    {
     if(! alert[3][3] && ! alert[4][3]){
      var
       sub_locs =
         [0,
          [0, alert[3], cst_Definition],
          [0, [0, alert[4], cst_Expected_signature], 0]];
      break a;
     }
     var sub_locs = 0;
    }
    return [0, -891636250, [0, alert[1], message, is_error, sub_locs]];
   }
   var
    Already_displayed_error =
      [248, cst_Dynlink_compilerlibs_Warni, caml_fresh_oo_id(0)];
   function reset_fatal(param){nerrors[1] = 0; return 0;}
   function check_fatal(param){
    var a = 0 < nerrors[1] ? 1 : 0;
    if(! a) return a;
    nerrors[1] = 0;
    throw caml_maybe_attach_backtrace(Already_displayed_error, 1);
   }
   function help_warnings(param){
    Stdlib_List[17].call
     (null,
      function(param){
       var description = param[3], names = param[2], number = param[1];
       if(names)
        var
         s = names[1],
         a = Stdlib[28].call(null, s, cst$56),
         name = Stdlib[28].call(null, cst$57, a);
       else
        var name = cst$58;
       return caml_call3
               (Stdlib_Printf[2].call(null, dE), number, name, description);
      },
      descriptions);
    Stdlib[46].call(null, cst_A_all_warnings);
    var i = 98;
    for(;;){
     var c = Stdlib_Char[1].call(null, i), l = letter(c);
     if(l)
      if(l[2]){
       var
        a = Stdlib_List[19].call(null, Stdlib_Int[12], l),
        b = Stdlib_String[6].call(null, cst$59, a),
        d = Stdlib_Char[6].call(null, c);
       caml_call2(Stdlib_Printf[2].call(null, dF), d, b);
      }
      else{
       var n = l[1], f = Stdlib_Char[6].call(null, c);
       caml_call2(Stdlib_Printf[2].call(null, dG), f, n);
      }
     var e = i + 1 | 0;
     if(122 === i) return Stdlib[99].call(null, 0);
     i = e;
    }
   }
   var
    Dynlink_compilerlibs_Warnings =
      [0,
       parse_options,
       parse_alert_option,
       without_warnings,
       is_active,
       is_error,
       defaults_w,
       defaults_warn_error,
       report,
       report_alert,
       Already_displayed_error,
       check_fatal,
       reset_fatal,
       help_warnings,
       backup$0,
       restore,
       with_state,
       mk_lazy,
       descriptions];
   caml_register_global
    (1288, Dynlink_compilerlibs_Warnings, "Dynlink_compilerlibs.Warnings");
   var global_bindings = [0, 0, 0, 0];
   function is_bound(param){return global_bindings[3];}
   function reset$0(param){
    if(global_bindings[3])
     return Stdlib_List[17].call
             (null,
              function(param){
               if(0 === param[0]){
                var init = param[2], ref = param[1];
                ref[1] = caml_call1(init, 0);
                return 0;
               }
               var ref$0 = param[1], snapshot = param[2];
               ref$0[1] = snapshot;
               return 0;
              },
              global_bindings[1]);
    throw caml_maybe_attach_backtrace([0, Assert_failure, dH], 1);
   }
   function s_table(create, size){
    function init(param){return caml_call1(create, size);}
    var ref = [0, caml_call1(create, size)];
    if(global_bindings[2])
     throw caml_maybe_attach_backtrace([0, Assert_failure, dI], 1);
    global_bindings[1] = [0, [0, ref, init], global_bindings[1]];
    return ref;
   }
   function s_ref(k){
    var ref = [0, k];
    if(global_bindings[2])
     throw caml_maybe_attach_backtrace([0, Assert_failure, dJ], 1);
    global_bindings[1] = [0, [1, ref, k], global_bindings[1]];
    return ref;
   }
   function fresh(param){
    var
     slots =
       Stdlib_List[19].call
        (null,
         function(r){
          if(0 === r[0]){
           var init = r[2], ref = r[1];
           return [0, ref, caml_call1(init, 0)];
          }
          if(1 - global_bindings[2]) r[2] = r[1][1];
          return [0, r[1], r[2]];
         },
         global_bindings[1]);
    global_bindings[2] = 1;
    return slots;
   }
   function with_store(slots, f){
    if(global_bindings[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, dK], 1);
    global_bindings[3] = 1;
    Stdlib_List[17].call
     (null,
      function(param){
       var ref = param[1], value = param[2];
       ref[1] = value;
       return 0;
      },
      slots);
    return Stdlib_Fun[4].call
            (null,
             function(param){
              Stdlib_List[17].call
               (null,
                function(param){param[2] = param[1][1]; return 0;},
                slots);
              global_bindings[3] = 0;
              return 0;
             },
             f);
   }
   var
    Dynlink_compilerlibs_Local_sto =
      [0, s_ref, s_table, fresh, with_store, reset$0, is_bound];
   caml_register_global
    (1289, Dynlink_compilerlibs_Local_sto, "Dynlink_compilerlibs.Local_store");
   var
    files = s_table(a[4][70][1], 42),
    files_uncap = s_table(a[4][70][1], 42);
   function path(t){return t[1];}
   function files$0(t){return t[2];}
   function create$2(path){
    try{
     var
      b = path === cst$115 ? Stdlib_Filename[1] : path,
      c = runtime.caml_sys_read_directory(b),
      a = c;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Stdlib[11]) throw caml_maybe_attach_backtrace(exn, 0);
     var a = [0];
    }
    return [0, path, Stdlib_Array[11].call(null, a)];
   }
   var dirs = s_ref(0);
   function reset$1(param){
    if(Dynlink_compilerlibs_Config[70] && ! global_bindings[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, dL], 1);
    caml_call1(a[4][70][2], files[1]);
    caml_call1(a[4][70][2], files_uncap[1]);
    dirs[1] = 0;
    return 0;
   }
   function get$0(param){return Stdlib_List[9].call(null, dirs[1]);}
   function get_paths(param){
    return Stdlib_List[21].call(null, path, dirs[1]);
   }
   function prepend_add(dir){
    return Stdlib_List[17].call
            (null,
             function(base){
              var fn = Stdlib_Filename[4].call(null, dir[1], base);
              caml_call3(a[4][70][10], files[1], base, fn);
              var b = Stdlib_String[28].call(null, base);
              return caml_call3(a[4][70][10], files_uncap[1], b, fn);
             },
             dir[2]);
   }
   function init$1(l){
    reset$1(0);
    dirs[1] = Stdlib_List[21].call(null, create$2, l);
    return Stdlib_List[17].call(null, prepend_add, dirs[1]);
   }
   function remove_dir(dir){
    if(Dynlink_compilerlibs_Config[70] && ! global_bindings[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, dM], 1);
    var
     b = dirs[1],
     new_dirs =
       Stdlib_List[41].call(null, function(d){return d[1] !== dir ? 1 : 0;})
        (b),
     a = 0 !== Stdlib_List[2].call(null, new_dirs, dirs[1]) ? 1 : 0,
     c =
       a
        ? (reset$1
           (0),
          Stdlib_List[17].call(null, prepend_add, new_dirs),
          dirs[1] = new_dirs,
          0)
        : a;
    return c;
   }
   function add(dir){
    if(Dynlink_compilerlibs_Config[70] && ! global_bindings[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, dN], 1);
    Stdlib_List[17].call
     (null,
      function(base){
       var fn = Stdlib_Filename[4].call(null, dir[1], base);
       if(1 - caml_call2(a[4][70][11], files[1], base))
        caml_call3(a[4][70][10], files[1], base, fn);
       var
        ubase = Stdlib_String[28].call(null, base),
        b = 1 - caml_call2(a[4][70][11], files_uncap[1], ubase);
       return b ? caml_call3(a[4][70][10], files_uncap[1], ubase, fn) : b;
      },
      dir[2]);
    dirs[1] = [0, dir, dirs[1]];
    return 0;
   }
   function add_dir(dir){return add(create$2(dir));}
   function prepend_dir(dir){
    if(Dynlink_compilerlibs_Config[70] && ! global_bindings[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, dO], 1);
    prepend_add(dir);
    dirs[1] = Stdlib[37].call(null, dirs[1], [0, dir, 0]);
    return 0;
   }
   function is_basename(fn){
    return Stdlib_Filename[13].call(null, fn) === fn ? 1 : 0;
   }
   function find(fn){
    if(Dynlink_compilerlibs_Config[70] && ! global_bindings[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, dP], 1);
    if(is_basename(fn) && ! Stdlib_Sys[3][1])
     return caml_call2(a[4][70][7], files[1], fn);
    return find_in_path(get_paths(0), fn);
   }
   function find_uncap(fn){
    if(Dynlink_compilerlibs_Config[70] && ! global_bindings[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, dQ], 1);
    if(is_basename(fn) && ! Stdlib_Sys[3][1]){
     var b = Stdlib_String[28].call(null, fn);
     return caml_call2(a[4][70][7], files_uncap[1], b);
    }
    return find_in_path_uncap(get_paths(0), fn);
   }
   var
    E = [0, create$2, path, files$0],
    Dynlink_compilerlibs_Load_path =
      [0,
       add_dir,
       remove_dir,
       reset$1,
       init$1,
       get_paths,
       find,
       find_uncap,
       E,
       add,
       add,
       prepend_dir,
       get$0];
   caml_register_global
    (1290, Dynlink_compilerlibs_Load_path, "Dynlink_compilerlibs.Load_path");
   function symbol(b, a){return b === a ? 1 : 0;}
   function symbol$0(b, a){return b !== a ? 1 : 0;}
   function symbol$1(b, a){return b < a ? 1 : 0;}
   function symbol$2(b, a){return a < b ? 1 : 0;}
   function symbol$3(b, a){return b <= a ? 1 : 0;}
   function symbol$4(b, a){return a <= b ? 1 : 0;}
   var
    compare$6 = caml_int_compare,
    Dynlink_compilerlibs_Int_repla =
      [0, symbol, symbol$0, symbol$1, symbol$2, symbol$3, symbol$4, compare$6];
   caml_register_global
    (1291,
     Dynlink_compilerlibs_Int_repla,
     "Dynlink_compilerlibs.Int_replace_polymorphic_compare");
   function force(f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var x$0 = match[1]; return x$0;
      case 1:
       var e = match[1]; throw caml_maybe_attach_backtrace(e, 1);
      default:
       var e$0 = match[1];
       try{var y = caml_call1(f, e$0);}
       catch(e){
        var e$1 = caml_wrap_exception(e);
        x[1] = [1, e$1];
        throw caml_maybe_attach_backtrace(e$1, 0);
       }
       x[1] = [0, y];
       return y;
    }
   }
   function get_arg(x){
    var match = x[1];
    if(2 !== match[0]) return 0;
    var a = match[1];
    return [0, a];
   }
   function get_contents(x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var b = match[1]; return [1, b];
      case 1:
       var e = match[1]; throw caml_maybe_attach_backtrace(e, 1);
      default: var a = match[1]; return [0, a];
    }
   }
   function create$3(x){return [0, [2, x]];}
   function create_forced(y){return [0, [0, y]];}
   function create_failed(e){return [0, [1, e]];}
   function log(param){return [0, 0];}
   function force_logged(log, f, x){
    var match = x[1];
    switch(match[0]){
      case 0:
       var x$0 = match[1]; return x$0;
      case 1:
       var e = match[1]; throw caml_maybe_attach_backtrace(e, 1);
      default:
       var e$0 = match[1];
       try{var err = caml_call1(f, e$0);}
       catch(e){
        var e$1 = caml_wrap_exception(e);
        x[1] = [1, e$1];
        throw caml_maybe_attach_backtrace(e$1, 0);
       }
       return 0 === err[0]
               ? (x[1] = [0, err], err)
               : (x[1] = [0, err], log[1] = [0, x, e$0, log[1]], err);
    }
   }
   function backtrack(log){
    var param = log[1];
    for(;;){
     if(! param) return 0;
     var rest = param[3], e = param[2], x = param[1];
     x[1] = [2, e];
     param = rest;
    }
   }
   var
    Dynlink_compilerlibs_Lazy_back =
      [0,
       force,
       create$3,
       get_arg,
       get_contents,
       create_forced,
       create_failed,
       log,
       force_logged,
       backtrack];
   caml_register_global
    (1292,
     Dynlink_compilerlibs_Lazy_back,
     "Dynlink_compilerlibs.Lazy_backtrack");
   function in_file(name){
    var a = Stdlib_Lexing[1], loc = [0, name, a[2], a[3], a[4]];
    return [0, loc, loc, 1];
   }
   var none = in_file(cst_none$0);
   function is_none(l){return caml_equal(l, none);}
   function curr(lexbuf){return [0, lexbuf[11], lexbuf[12], 0];}
   function init$2(lexbuf, fname){lexbuf[12] = [0, fname, 1, 0, 0]; return 0;}
   function symbol_rloc(param){
    var a = Stdlib_Parsing[6].call(null, 0);
    return [0, Stdlib_Parsing[5].call(null, 0), a, 0];
   }
   function symbol_gloc(param){
    var a = Stdlib_Parsing[6].call(null, 0);
    return [0, Stdlib_Parsing[5].call(null, 0), a, 1];
   }
   function rhs_loc(n){
    var a = Stdlib_Parsing[8].call(null, n);
    return [0, Stdlib_Parsing[7].call(null, n), a, 0];
   }
   function rhs_interval(m, n){
    var a = Stdlib_Parsing[8].call(null, n);
    return [0, Stdlib_Parsing[7].call(null, m), a, 0];
   }
   function get_pos_info(pos){
    return [0, pos[1], pos[2], pos[4] - pos[3] | 0];
   }
   function mkloc(txt, loc){return [0, txt, loc];}
   function mknoloc(txt){return [0, txt, none];}
   var
    input_name = [0, cst_none$1],
    input_lexbuf = [0, 0],
    input_phrase_buffer = [0, 0],
    status = [0, 0],
    num_loc_lines = [0, 0];
   function reset$2(param){num_loc_lines[1] = 0; return 0;}
   function echo_eof(param){
    Stdlib[47].call(null, 0);
    num_loc_lines[1]++;
    return 0;
   }
   function setup_colors(param){return caml_call1(C[7], color[1]);}
   function rewrite_absolute_path(path){
    var match = get_build_path_prefix_map(0);
    if(! match) return path;
    var map = match[1];
    return rewrite(map, path);
   }
   function absolute_path(s){
    if(Stdlib_Filename[5].call(null, s))
     var
      a = runtime.caml_sys_getcwd(0),
      s$0 = rewrite_absolute_path(Stdlib_Filename[4].call(null, a, s));
    else
     var s$0 = s;
    function aux(s$0){
     var s = s$0;
     for(;;){
      var
       base = Stdlib_Filename[13].call(null, s),
       dir = Stdlib_Filename[14].call(null, s);
      if(dir === s) return dir;
      if(base !== Stdlib_Filename[1]){
       if(base === Stdlib_Filename[2]){
        var a = aux(dir);
        return Stdlib_Filename[14].call(null, a);
       }
       var b = aux(dir);
       return Stdlib_Filename[4].call(null, b, base);
      }
      s = dir;
     }
    }
    return aux(s$0);
   }
   function show_filename(file){
    return absname[1] ? absolute_path(file) : file;
   }
   function print_filename(ppf, file){
    var a = show_filename(file);
    return Stdlib_Format[13].call(null, ppf, a);
   }
   function print_loc(ppf, loc){
    setup_colors(0);
    var
     file = loc[1][1] === cst$115 ? input_name[1] : loc[1][1],
     startline = loc[1][2],
     endline = loc[2][2],
     startchar = loc[1][4] - loc[1][3] | 0,
     endchar = loc[2][4] - loc[2][3] | 0,
     first = [0, 1];
    function capitalize(s){
     return first[1] ? (first[1] = 0, Stdlib_String[27].call(null, s)) : s;
    }
    function comma(param){
     if(first[1]) return;
     return Stdlib_Format[129].call(null, ppf)(dR);
    }
    Stdlib_Format[129].call(null, ppf)(dS);
    a:
    {
     if(file !== cst$115 && file !== cst_toplevel){
      if(file !== cst_none$3){var a = 1; break a;}
      var a = 1;
      break a;
     }
     var a = 0;
    }
    if(a){
     var d = capitalize(cst_file);
     caml_call3
      (Stdlib_Format[129].call(null, ppf)(dT), d, print_filename, file);
    }
    comma(0);
    var
     startline$0 = 0 < startline ? startline : 1,
     endline$0 = 0 < endline ? endline : startline$0;
    if(startline$0 === endline$0){
     var e = capitalize(cst_line);
     caml_call2(Stdlib_Format[129].call(null, ppf)(dU), e, startline$0);
    }
    else{
     var g = capitalize(cst_lines);
     caml_call3
      (Stdlib_Format[129].call(null, ppf)(dX), g, startline$0, endline$0);
    }
    var b = -1 !== startchar ? 1 : 0, c = b ? -1 !== endchar ? 1 : 0 : b;
    if(c){
     comma(0);
     var f = capitalize(cst_characters);
     caml_call3(Stdlib_Format[129].call(null, ppf)(dV), f, startchar, endchar);
    }
    return Stdlib_Format[129].call(null, ppf)(dW);
   }
   function print_locs(ppf, locs){
    return Stdlib_Format[123].call
            (null,
             [0,
              function(ppf, param){
               return Stdlib_Format[129].call(null, ppf)(dY);
              }],
             print_loc,
             ppf,
             locs);
   }
   function mem(iset, pos){
    return Stdlib_List[33].call
            (null,
             function(param){
              var
               e = param[2][2],
               s = param[1][2],
               a = caml_lessequal(s, pos),
               b = a ? caml_lessequal(pos, e) : a;
              return b;
             },
             iset);
   }
   function find_bound_in(iset, param){
    var end = param[2], start = param[1];
    return Stdlib_List[40].call
            (null,
             function(param){
              var
               c = param[2],
               y = c[2],
               b = c[1],
               match = param[1],
               x = match[2],
               a = match[1];
              if(caml_lessequal(start, x) && caml_lessequal(x, end))
               return [0, [0, a, x]];
              if(caml_lessequal(start, y) && caml_lessequal(y, end))
               return [0, [0, b, y]];
              return 0;
             },
             iset);
   }
   function is_start(iset, pos){
    return Stdlib_List[40].call
            (null,
             function(param){
              var match = param[1], x = match[2], a = match[1];
              return caml_equal(pos, x) ? [0, a] : 0;
             },
             iset);
   }
   function is_end(iset, pos){
    return Stdlib_List[40].call
            (null,
             function(param){
              var match = param[2], y = match[2], b = match[1];
              return caml_equal(pos, y) ? [0, b] : 0;
             },
             iset);
   }
   function highlight_terminfo(lb, ppf, locs){
    try{
     Stdlib_Format[38].call(null, ppf, 0);
     var pos0 = - lb[4] | 0;
     if(pos0 < 0) throw caml_maybe_attach_backtrace(Stdlib[3], 1);
     var lines = [0, num_loc_lines[1]], a = lb[3] - 1 | 0;
     if(a >= pos0){
      var i = pos0;
      for(;;){
       if(10 === caml_bytes_get(lb[2], i)) lines[1]++;
       var h = i + 1 | 0;
       if(a === i) break;
       i = h;
      }
     }
     var d = num_lines(Stdlib[39]) - 2 | 0;
     if(d <= lines[1]) throw caml_maybe_attach_backtrace(Stdlib[3], 1);
     Stdlib[63].call(null, Stdlib[39]);
     backup(Stdlib[39], lines[1]);
     var bol = [0, 0];
     Stdlib[42].call(null, cst$60);
     var b = (lb[3] - pos0 | 0) - 1 | 0, e = 0;
     if(b >= 0){
      var pos = e;
      for(;;){
       if(bol[1]){Stdlib[42].call(null, cst$61); bol[1] = 0;}
       let pos$0 = pos;
       if
        (Stdlib_List[33].call
          (null, function(loc){return pos$0 === loc[1][4] ? 1 : 0;}, locs))
        standout(Stdlib[39], 1);
       let pos$1 = pos;
       if
        (Stdlib_List[33].call
          (null, function(loc){return pos$1 === loc[2][4] ? 1 : 0;}, locs))
        standout(Stdlib[39], 0);
       var c = caml_bytes_get(lb[2], pos + pos0 | 0);
       Stdlib[41].call(null, c);
       bol[1] = 10 === c ? 1 : 0;
       var g = pos + 1 | 0;
       if(b === pos) break;
       pos = g;
      }
     }
     standout(Stdlib[39], 0);
     resume(Stdlib[39], num_loc_lines[1]);
     var f = Stdlib[63].call(null, Stdlib[39]);
     return f;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function highlight_quote(ppf, get_lines, opt, highlight_tag, locs){
    if(opt) var sth = opt[1], max_lines = sth; else var max_lines = 10;
    var
     intervals =
       Stdlib_List[22].call
         (null,
          function(loc){
           var e = loc[2], s = loc[1];
           if(-1 !== s[4] && -1 !== e[4])
            return [0, [0, [0, s, s[4]], [0, e, e[4] - 1 | 0]]];
           return 0;
          })
        (locs),
     d =
       Stdlib_List[19].call
        (null,
         function(param){
          var
           c = param[2],
           y = c[2],
           b = c[1],
           match = param[1],
           x = match[2],
           a = match[1];
          return runtime.caml_greaterthan(x, y)
                  ? 0
                  : [0, [0, [0, a, x], 83], [0, [0, [0, b, y], 69], 0]];
         },
         intervals),
     e = Stdlib_List[14].call(null, d),
     pos =
       Stdlib_List[56].call
        (null,
         function(param, a){
          var k = a[2], y = a[1][2], k$0 = param[2], x = param[1][2];
          function kn(param){return 83 <= param ? 0 : 1;}
          var b = [0, y, kn(k)];
          return caml_compare([0, x, kn(k$0)], b);
         },
         e),
     match =
       Stdlib_List[25].call
        (null,
         function(param, c){
          var kind = c[2], a = c[1], acc = param[2], nesting = param[1];
          if(83 <= kind){
           if(typeof nesting === "number")
            return [0, [0, -764103652, [0, a, 0]], acc];
           var match = nesting[2], n = match[2], s = match[1];
           return [0, [0, -764103652, [0, s, n + 1 | 0]], acc];
          }
          if(typeof nesting === "number")
           throw caml_maybe_attach_backtrace([0, Assert_failure, d0], 1);
          var b = nesting[2], s$0 = b[1];
          if(0 === b[2]) return [0, 867153157, [0, [0, s$0, a], acc]];
          var n$0 = b[2];
          return [0, [0, -764103652, [0, s$0, n$0 - 1 | 0]], acc];
         },
         dZ,
         pos),
     acc = match[2],
     nesting = match[1];
    if(867153157 !== nesting)
     throw caml_maybe_attach_backtrace([0, Assert_failure, d1], 1);
    var iset = Stdlib_List[9].call(null, acc);
    if(0 === iset)
     var match$1 = 0;
    else
     var
      f = Stdlib_List[9].call(null, iset),
      g = Stdlib_List[5].call(null, f)[2],
      match$1 = [0, [0, Stdlib_List[5].call(null, iset)[1], g]];
    if(! match$1) return 0;
    var
     b = match$1[1],
     rightmost = b[2][1],
     leftmost = b[1][1],
     h = caml_call2(get_lines, leftmost, rightmost),
     lines =
       Stdlib_List[19].call
        (null,
         function(line){
          var
           start_pos = line[2],
           text = line[1],
           end_pos = (start_pos + caml_ml_string_length(text) | 0) - 1 | 0,
           match = find_bound_in(iset, [0, start_pos, end_pos]);
          if(match)
           var p = match[1][1], line_nb = [0, p[2]];
          else
           var line_nb = 0;
          return [0, line_nb, line];
         },
         h),
     match$0 =
       Stdlib_List[25].call
        (null,
         function(param, b){
          var
           lnum = b[1],
           consistent = param[3],
           offset = param[2],
           i = param[1];
          if(! lnum) return [0, i + 1 | 0, offset, consistent];
          var n = lnum[1];
          if(! offset) return [0, i + 1 | 0, [0, n - i | 0], consistent];
          var
           m = offset[1],
           a = consistent ? n === (m + i | 0) ? 1 : 0 : consistent;
          return [0, i + 1 | 0, offset, a];
         },
         d2,
         lines),
     consistent = match$0[3],
     offset = match$0[2];
    if(offset && consistent)
     var
      m = offset[1],
      c =
        Stdlib_List[20].call
         (null,
          function(i, param){
           var line = param[2];
           return [0, [0, m + i | 0], line];
          },
          lines);
    else
     var c = lines;
    var
     lines$0 =
       Stdlib_List[19].call
        (null,
         function(param){
          var
           match = param[2],
           start_pos = match[2],
           text = match[1],
           lnum = param[1];
          return [0,
                  text,
                  Stdlib_Option[8].call(null, cst$62, Stdlib_Int[12], lnum),
                  start_pos];
         },
         c);
    Stdlib_Format[129].call(null, ppf)(d3);
    a:
    if(lines$0){
     var a = lines$0[1], line = a[1];
     if(line !== cst$115){
      if(! lines$0[2]){
       var line_start_cnum = a[3], line_nb = a[2];
       caml_call2(Stdlib_Format[129].call(null, ppf)(d6), line_nb, line);
       caml_call2
        (Stdlib_Format[129].call(null, ppf)(d7),
         caml_ml_string_length(line_nb),
         cst$63);
       Stdlib_String[30].call
        (null,
         function(i, c){
          var pos = line_start_cnum + i | 0;
          if(0 !== is_start(iset, pos))
           caml_call1(Stdlib_Format[129].call(null, ppf)(d8), highlight_tag);
          if(mem(iset, pos))
           Stdlib_Format[23].call(null, ppf, 94);
          else if(pos < rightmost[4])
           if(9 === c)
            Stdlib_Format[23].call(null, ppf, 9);
           else
            Stdlib_Format[23].call(null, ppf, 32);
          var a = 0 !== is_end(iset, pos) ? 1 : 0;
          return a ? Stdlib_Format[129].call(null, ppf)(d9) : a;
         },
         line);
       Stdlib_Format[129].call(null, ppf)(d_);
       break a;
      }
     }
     else if(! lines$0[2]) break a;
     pp_two_columns
      (d4,
       [0, max_lines],
       ppf,
       Stdlib_List[19].call
        (null,
         function(param){
          var
           line_start_cnum = param[3],
           line_nb = param[2],
           line = param[1],
           line$0 =
             Stdlib_String[18].call
              (null,
               function(i, car){
                return mem(iset, line_start_cnum + i | 0) ? car : 46;
               },
               line);
          return [0, line_nb, line$0];
         },
         lines$0));
    }
    return Stdlib_Format[129].call(null, ppf)(d5);
   }
   function lines_around(start_pos, end_pos, seek, read_char){
    caml_call1(seek, start_pos[3]);
    var
     lines = [0, 0],
     bol = [0, start_pos[3]],
     cur = [0, start_pos[3]],
     b = Stdlib_Buffer[1].call(null, 80);
    function add_line(param){
     if(bol[1] < cur[1]){
      var text = Stdlib_Buffer[2].call(null, b);
      Stdlib_Buffer[8].call(null, b);
      lines[1] = [0, [0, text, bol[1]], lines[1]];
      bol[1] = cur[1];
     }
    }
    for(;;){
     if(end_pos[4] > bol[1]){
      var match = caml_call1(read_char, 0);
      if(match){
       var c = match[1];
       cur[1]++;
       if(10 === c){add_line(0); continue;}
       if(13 === c) continue;
       Stdlib_Buffer[12].call(null, b, c);
       continue;
      }
      add_line(0);
     }
     return Stdlib_List[9].call(null, lines[1]);
    }
   }
   function lines_around_from_file(start_pos, end_pos, filename){
    try{
     var
      cin = Stdlib[80].call(null, filename),
      read_char =
        function(param){
         try{var a = [0, Stdlib[82].call(null, cin)]; return a;}
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn === Stdlib[12]) return 0;
          throw caml_maybe_attach_backtrace(exn, 0);
         }
        },
      a = Stdlib[90],
      lines =
        lines_around
         (start_pos, end_pos, function(b){return a(cin, b);}, read_char);
     Stdlib[93].call(null, cin);
     return lines;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib[11]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function lines_around_from_current_inpu(start_pos, end_pos){
    function from_file(param){
     var param$0 = input_name[1];
     a:
     {
      if
       (param$0 !== cst$115
        && param$0 !== cst_toplevel && param$0 !== cst_none$3){var a = 1; break a;}
      var a = 0;
     }
     return a ? lines_around_from_file(start_pos, end_pos, input_name[1]) : 0;
    }
    var
     a = input_lexbuf[1],
     b = input_phrase_buffer[1],
     match = input_name[1];
    if(b){
     var pb = b[1];
     if(match === cst_toplevel){
      var
       pos$0 = [0, 0],
       seek$0 = function(n){pos$0[1] = n; return 0;},
       read_char$0 =
         function(param){
          var a = Stdlib_Buffer[7].call(null, pb);
          if(a <= pos$0[1]) return 0;
          var c = Stdlib_Buffer[6].call(null, pb, pos$0[1]);
          pos$0[1]++;
          return [0, c];
         },
       lines = lines_around(start_pos, end_pos, seek$0, read_char$0);
      return lines ? lines : 0;
     }
    }
    if(! a) return from_file(0);
    var lb = a[1];
    function rel(n){return n - lb[4] | 0;}
    if(0 <= rel(start_pos[3]))
     var
      pos = [0, 0],
      seek = function(n){pos[1] = rel(n); return 0;},
      read_char =
        function(param){
         if(lb[3] <= pos[1]) return 0;
         var c = caml_bytes_get(lb[2], pos[1]);
         pos[1]++;
         return [0, c];
        },
      lines$0 = lines_around(start_pos, end_pos, seek, read_char);
    else
     var lines$0 = 0;
    return lines$0 ? lines$0 : from_file(0);
   }
   function msg(opt, fmt){
    if(opt) var sth = opt[1], loc = sth; else var loc = none;
    return Stdlib_Format[137].call
            (null, function(txt){return [0, txt, loc];}, fmt);
   }
   function is_quotable_loc(loc){
    var
     d = -1 === loc[1][4] ? 1 : 0,
     e = d || (-1 === loc[2][4] ? 1 : 0),
     a = 1 - e;
    if(a)
     var
      b = loc[1][1] === input_name[1] ? 1 : 0,
      c = b ? loc[2][1] === input_name[1] ? 1 : 0 : b;
    else
     var c = a;
    return c;
   }
   function pp_loc(self, report, ppf, loc){
    var a = report[1];
    if(typeof a === "number")
     var tag = cst_error;
    else
     switch(a[0]){
       case 1:
       case 3:
        var tag = cst_error; break;
       default: var tag = cst_warning;
     }
    function highlight(ppf, loc){
     var match = error_style[1];
     if(match)
      var setting = match[1], match$0 = setting;
     else
      var match$0 = default_setting$0;
     if(match$0) return 0;
     var a = is_quotable_loc(loc);
     return a
             ? highlight_quote
               (ppf, lines_around_from_current_inpu, 0, tag, [0, loc, 0])
             : a;
    }
    return caml_call4
            (Stdlib_Format[129].call(null, ppf)(d$),
             print_loc,
             loc,
             highlight,
             loc);
   }
   function pp_txt(ppf, txt){
    return caml_call1(Stdlib_Format[129].call(null, ppf)(ea), txt);
   }
   function pp(self, ppf, report){
    setup_colors(0);
    var out_functions = Stdlib_Format[102].call(null, ppf, 0);
    function out_string(str, start, len){
     var i = start, c = 0;
     for(;;){
      if(i === (start + len | 0)){
       num_loc_lines[1] = num_loc_lines[1] + c | 0;
       return caml_call3(out_functions[1], str, start, len);
      }
      if(10 === caml_string_get(str, i)){
       var c$0 = c + 1 | 0, i$0 = i + 1 | 0;
       i = i$0;
       c = c$0;
      }
      else{var i$1 = i + 1 | 0; i = i$1;}
     }
    }
    Stdlib_Format[100].call
     (null,
      ppf,
      [0,
       out_string,
       out_functions[2],
       out_functions[3],
       out_functions[4],
       out_functions[5]]);
    var
     a = Stdlib_Format[67],
     b = report[3],
     c = caml_call2(self[5], self, report),
     d = report[2][1],
     e = caml_call2(self[4], self, report),
     f = Stdlib_Format[69],
     g = report[1],
     h = caml_call2(self[2], self, report),
     i = report[2][2],
     j = caml_call2(self[3], self, report),
     k = Stdlib_Format[65];
    caml_call14
     (Stdlib_Format[129].call(null, ppf)(eb),
      k,
      0,
      j,
      i,
      h,
      g,
      f,
      0,
      e,
      d,
      c,
      b,
      a,
      0);
    Stdlib_Format[38].call(null, ppf, 0);
    return Stdlib_Format[100].call(null, ppf, out_functions);
   }
   function pp_report_kind(self, param, ppf, a){
    if(typeof a === "number") return Stdlib_Format[129].call(null, ppf)(ec);
    switch(a[0]){
      case 0:
       var w = a[1];
       return caml_call1(Stdlib_Format[129].call(null, ppf)(ed), w);
      case 1:
       var w$0 = a[1];
       return caml_call1(Stdlib_Format[129].call(null, ppf)(ee), w$0);
      case 2:
       var w$1 = a[1];
       return caml_call1(Stdlib_Format[129].call(null, ppf)(ef), w$1);
      default:
       var w$2 = a[1];
       return caml_call1(Stdlib_Format[129].call(null, ppf)(eg), w$2);
    }
   }
   function pp_main_loc(self, report, ppf, loc){return pp_loc(self, report, ppf, loc);
   }
   function pp_main_txt(self, param, ppf, txt){return pp_txt(ppf, txt);}
   function pp_submsgs(self, report, ppf, msgs){
    return Stdlib_List[17].call
            (null,
             function(msg){
              var a = caml_call2(self[6], self, report);
              return caml_call2
                      (Stdlib_Format[129].call(null, ppf)(eh), a, msg);
             },
             msgs);
   }
   function pp_submsg(self, report, ppf, param){
    var
     loc = param[2],
     txt = param[1],
     a = caml_call2(self[8], self, report),
     b = caml_call2(self[7], self, report);
    return caml_call4(Stdlib_Format[129].call(null, ppf)(ei), b, loc, a, txt);
   }
   function pp_submsg_loc(self, report, ppf, loc){
    var a = 1 - loc[3];
    return a ? pp_loc(self, report, ppf, loc) : a;
   }
   function pp_submsg_txt(self, param, ppf, loc){return pp_txt(ppf, loc);}
   var
    batch_mode_printer =
      [0,
       pp,
       pp_report_kind,
       pp_main_loc,
       pp_main_txt,
       pp_submsgs,
       pp_submsg,
       pp_submsg_loc,
       pp_submsg_txt];
   function terminfo_toplevel_printer(lb){
    function pp(self, ppf, err){
     setup_colors(0);
     var
      sub_locs =
        Stdlib_List[19].call
         (null, function(param){var loc = param[2]; return loc;}, err[3]),
      all_locs = [0, err[2][2], sub_locs],
      locs_highlighted = Stdlib_List[41].call(null, is_quotable_loc)(all_locs);
     highlight_terminfo(lb, ppf, locs_highlighted);
     return caml_call3(batch_mode_printer[1], self, ppf, err);
    }
    function pp_main_loc(param, c, b, a){return 0;}
    function pp_submsg_loc(param, b, ppf, loc){
     var a = 1 - loc[3];
     return a
             ? caml_call2
               (Stdlib_Format[129].call(null, ppf)(ej), print_loc, loc)
             : a;
    }
    return [0,
            pp,
            batch_mode_printer[2],
            pp_main_loc,
            batch_mode_printer[4],
            batch_mode_printer[5],
            batch_mode_printer[6],
            pp_submsg_loc,
            batch_mode_printer[8]];
   }
   function best_toplevel_printer(param){
    if(0 === status[1]) status[1] = setup$0(Stdlib[39]);
    var match = input_lexbuf[1];
    if(2 <= status[1] && match){
     var lb = match[1];
     return terminfo_toplevel_printer(lb);
    }
    return batch_mode_printer;
   }
   function default_report_printer(param){
    return input_name[1] === cst_toplevel
            ? best_toplevel_printer(0)
            : batch_mode_printer;
   }
   var report_printer = [0, default_report_printer];
   function print_report(ppf, report){
    var printer = caml_call1(report_printer[1], 0);
    return caml_call3(printer[1], printer, ppf, report);
   }
   function mkerror(loc, sub, txt){return [0, 0, [0, txt, loc], sub];}
   function errorf$0(opt, a){
    if(opt) var sth = opt[1], loc = sth; else var loc = none;
    if(a) var sth$0 = a[1], sub = sth$0; else var sub = 0;
    function b(a){return mkerror(loc, sub, a);}
    var c = Stdlib_Format[137];
    return function(a){return c(b, a);};
   }
   function error(opt, a, msg_str){
    if(opt) var sth = opt[1], loc = sth; else var loc = none;
    if(a) var sth$0 = a[1], sub = sth$0; else var sub = 0;
    return mkerror
            (loc,
             sub,
             function(ppf){return Stdlib_Format[13].call(null, ppf, msg_str);});
   }
   function error_of_printer(opt, a, pp, x){
    if(opt) var sth = opt[1], loc = sth; else var loc = none;
    if(a) var sth$0 = a[1], sub = sth$0; else var sub = 0;
    return mkerror(loc, sub, function(ppf){return caml_call2(pp, ppf, x);});
   }
   function error_of_printer_file(print, x){
    return error_of_printer([0, in_file(input_name[1])], 0, print, x);
   }
   function default_warning_alert_reporter(report, mk, loc, w){
    var match = caml_call1(report, w);
    if(typeof match === "number") return 0;
    var
     match$0 = match[2],
     sub_locs = match$0[4],
     is_error = match$0[3],
     message = match$0[2],
     id = match$0[1];
    function msg_of_str(str, ppf){
     return Stdlib_Format[13].call(null, ppf, str);
    }
    var
     kind = caml_call2(mk, is_error, id),
     main = [0, function(a){return msg_of_str(message, a);}, loc],
     sub =
       Stdlib_List[19].call
        (null,
         function(param){
          var sub_message = param[2], loc = param[1];
          return [0, function(a){return msg_of_str(sub_message, a);}, loc];
         },
         sub_locs);
    return [0, [0, kind, main, sub]];
   }
   function ek(is_error, id){return is_error ? [1, id] : [0, id];}
   function default_warning_reporter(a, b){
    return default_warning_alert_reporter(report, ek, a, b);
   }
   var warning_reporter = [0, default_warning_reporter];
   function report_warning(loc, w){
    return caml_call2(warning_reporter[1], loc, w);
   }
   var formatter_for_warnings = [0, Stdlib_Format[110]];
   function print_warning(loc, ppf, w){
    var match = report_warning(loc, w);
    if(! match) return 0;
    var report = match[1];
    return print_report(ppf, report);
   }
   function prerr_warning(loc, w){
    return print_warning(loc, formatter_for_warnings[1], w);
   }
   function el(is_error, id){return is_error ? [3, id] : [2, id];}
   function default_alert_reporter(a, b){
    return default_warning_alert_reporter(report_alert, el, a, b);
   }
   var alert_reporter = [0, default_alert_reporter];
   function report_alert$0(loc, w){
    return caml_call2(alert_reporter[1], loc, w);
   }
   function print_alert(loc, ppf, w){
    var match = report_alert$0(loc, w);
    if(! match) return 0;
    var report = match[1];
    return print_report(ppf, report);
   }
   function prerr_alert(loc, w){
    return print_alert(loc, formatter_for_warnings[1], w);
   }
   function alert(opt, a, kind, loc, message){
    if(opt) var sth = opt[1], def = sth; else var def = none;
    if(a) var sth$0 = a[1], use = sth$0; else var use = none;
    return prerr_alert(loc, [0, kind, message, def, use]);
   }
   function deprecated(def, use, loc, message){
    return alert(def, use, cst_deprecated$3, loc, message);
   }
   var v = [0, 0];
   function register_error_of_exn(f){v[1] = [0, f, v[1]]; return 0;}
   function error_of_exn(exn){
    if(exn === Already_displayed_error) return em;
    var param = v[1];
    for(;;){
     if(! param) return 0;
     var rest = param[2], f = param[1], match = caml_call1(f, exn);
     if(match){var error = match[1]; return [0, [0, 17724, error]];}
     param = rest;
    }
   }
   register_error_of_exn
    (function(param){
      var tag = param[1];
      if(tag !== Stdlib[11]) return 0;
      var msg = param[2];
      return [0,
              caml_call1(errorf$0([0, in_file(input_name[1])], 0)(en), msg)];
     });
   function report_exception(ppf, exn){
    var n = 5, exn$0 = exn;
    for(;;){
     try{var val = error_of_exn(exn$0);}
     catch(exn){
      var exn$1 = caml_wrap_exception(exn);
      if(0 >= n) throw caml_maybe_attach_backtrace(exn$1, 0);
      var n$0 = n - 1 | 0;
      n = n$0;
      exn$0 = exn$1;
      continue;
     }
     if(! val) throw caml_maybe_attach_backtrace(exn$0, 0);
     var match = val[1];
     if(typeof match === "number") return 0;
     var err = match[2];
     return print_report(ppf, err);
    }
   }
   var Error$0 = [248, cst_Dynlink_compilerlibs_Locat, caml_fresh_oo_id(0)];
   register_error_of_exn
    (function(param){
      var tag = param[1];
      if(tag !== Error$0) return 0;
      var e = param[2];
      return [0, e];
     });
   function raise_errorf(opt, a){
    if(opt) var sth = opt[1], loc = sth; else var loc = none;
    if(a) var sth$0 = a[1], sub = sth$0; else var sub = 0;
    function b(txt){
     throw caml_maybe_attach_backtrace
            ([0, Error$0, mkerror(loc, sub, txt)], 1);
    }
    var c = Stdlib_Format[137];
    return function(a){return c(b, a);};
   }
   var
    Dynlink_compilerlibs_Location =
      [0,
       none,
       is_none,
       in_file,
       init$2,
       curr,
       symbol_rloc,
       symbol_gloc,
       rhs_loc,
       rhs_interval,
       get_pos_info,
       mknoloc,
       mkloc,
       input_name,
       input_lexbuf,
       input_phrase_buffer,
       echo_eof,
       reset$2,
       rewrite_absolute_path,
       absolute_path,
       show_filename,
       print_filename,
       print_loc,
       print_locs,
       highlight_terminfo,
       msg,
       batch_mode_printer,
       terminfo_toplevel_printer,
       best_toplevel_printer,
       print_report,
       report_printer,
       default_report_printer,
       report_warning,
       warning_reporter,
       default_warning_reporter,
       formatter_for_warnings,
       print_warning,
       prerr_warning,
       report_alert$0,
       alert_reporter,
       default_alert_reporter,
       print_alert,
       prerr_alert,
       deprecated,
       alert,
       error,
       errorf$0,
       error_of_printer,
       error_of_printer_file,
       register_error_of_exn,
       error_of_exn,
       Error$0,
       Already_displayed_error,
       raise_errorf,
       report_exception];
   caml_register_global
    (1294, Dynlink_compilerlibs_Location, "Dynlink_compilerlibs.Location");
   function flatten(lid$0){
    var accu = 0, param = lid$0;
    for(;;)
     switch(param[0]){
       case 0:
        var s = param[1]; return [0, s, accu];
       case 1:
        var s$0 = param[2], lid = param[1], accu$0 = [0, s$0, accu];
        accu = accu$0;
        param = lid;
        break;
       default: return fatal_error(cst_Longident_flat);
     }
   }
   function last(param){
    switch(param[0]){
      case 0:
       var s = param[1]; return s;
      case 1:
       var s$0 = param[2]; return s$0;
      default: return fatal_error(cst_Longident_last);
    }
   }
   function split_at_dots(s, pos){
    try{
     var
      dot = Stdlib_String[31].call(null, s, pos, 46),
      a = split_at_dots(s, dot + 1 | 0),
      b = [0, Stdlib_String[15].call(null, s, pos, dot - pos | 0), a];
     return b;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      return [0,
              Stdlib_String[15].call
               (null, s, pos, caml_ml_string_length(s) - pos | 0),
              0];
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function unflatten(l){
    if(! l) return 0;
    var tl = l[2], hd = l[1];
    return [0,
            Stdlib_List[25].call
             (null, function(p, s){return [1, p, s];}, [0, hd], tl)];
   }
   function parse$0(s){
    var match = unflatten(split_at_dots(s, 0));
    if(! match) return eo;
    var v = match[1];
    return v;
   }
   var
    Dynlink_compilerlibs_Longident = [0, flatten, unflatten, last, parse$0];
   caml_register_global
    (1295, Dynlink_compilerlibs_Longident, "Dynlink_compilerlibs.Longident");
   var docstrings = [0, 0];
   function warn_bad_docstrings(param){
    var a = is_active(ep);
    if(! a) return a;
    var b = Stdlib_List[9].call(null, docstrings[1]);
    return Stdlib_List[17].call
            (null,
             function(ds){
              switch(ds[3]){
                case 0:
                 return prerr_warning(ds[2], er);
                case 1:
                 return 0;
                default: return 2 <= ds[4] ? prerr_warning(ds[2], es) : 0;
              }
             },
             b);
   }
   function docstring(body, loc){var ds = [0, body, loc, 0, 0]; return ds;}
   function register(ds){docstrings[1] = [0, ds, docstrings[1]]; return 0;}
   function docstring_body(ds){return ds[1];}
   function docstring_loc(ds){return ds[2];}
   var doc_loc = [0, cst_ocaml_doc, none];
   function docs_attr(ds){
    var
     body = ds[1],
     loc = ds[2],
     exp = [0, [1, [2, body, loc, 0]], loc, 0, 0],
     item = [0, [0, exp, 0], loc];
    return [0, doc_loc, [0, [0, item, 0]], loc];
   }
   function add_docs_attrs(docs, attrs){
    var a = docs[1];
    if(a)
     var
      ds = a[1],
      attrs$0 = ds[1] !== cst$115 ? [0, docs_attr(ds), attrs] : attrs;
    else
     var attrs$0 = attrs;
    var b = docs[2];
    if(b){
     var ds$0 = b[1];
     if(ds$0[1] !== cst$115)
      var
       c = [0, docs_attr(ds$0), 0],
       attrs$1 = Stdlib[37].call(null, attrs$0, c);
     else
      var attrs$1 = attrs$0;
    }
    else
     var attrs$1 = attrs$0;
    return attrs$1;
   }
   var empty_info = 0;
   function add_info_attrs(info, attrs){
    if(info){
     var ds = info[1];
     if(ds[1] !== cst$115){
      var a = [0, docs_attr(ds), 0];
      return Stdlib[37].call(null, attrs, a);
     }
    }
    return attrs;
   }
   var text_loc = [0, cst_ocaml_text, none];
   function text_attr(ds){
    var
     body = ds[1],
     loc = ds[2],
     exp = [0, [1, [2, body, loc, 0]], loc, 0, 0],
     item = [0, [0, exp, 0], loc];
    return [0, text_loc, [0, [0, item, 0]], loc];
   }
   function add_text_attrs(dsl, attrs){
    var
     fdsl =
       Stdlib_List[41].call
         (null, function(param){return param[1] !== cst$115 ? 1 : 0;})
        (dsl),
     a = Stdlib_List[19].call(null, text_attr, fdsl);
    return Stdlib[37].call(null, a, attrs);
   }
   function get_docstring(info, dsl){
    var param = dsl;
    for(;;){
     if(! param) return 0;
     var ds = param[1];
     if(1 !== ds[3]){var a = info ? 1 : 2; ds[3] = a; return [0, ds];}
     var rest = param[2];
     param = rest;
    }
   }
   function get_docstrings(dsl){
    var acc = 0, param = dsl;
    for(;;){
     if(! param) return Stdlib_List[9].call(null, acc);
     var ds = param[1];
     if(1 === ds[3]){
      var rest = param[2];
      param = rest;
     }
     else{
      var rest$0 = param[2];
      ds[3] = 2;
      var acc$0 = [0, ds, acc];
      acc = acc$0;
      param = rest$0;
     }
    }
   }
   function associate_docstrings(dsl){
    return Stdlib_List[17].call
            (null,
             function(ds){return ds[4] ? (ds[4] = 2, 0) : (ds[4] = 1, 0);},
             dsl);
   }
   var pre_table = Stdlib_Hashtbl[1].call(null, 0, 50);
   function set_pre_docstrings(pos, dsl){
    var a = 0 !== dsl ? 1 : 0;
    return a ? Stdlib_Hashtbl[5].call(null, pre_table, pos, dsl) : a;
   }
   function get_pre_docs(pos){
    try{
     var dsl = Stdlib_Hashtbl[6].call(null, pre_table, pos);
     associate_docstrings(dsl);
     var a = get_docstring(0, dsl);
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function mark_pre_docs(pos){
    try{
     var dsl = Stdlib_Hashtbl[6].call(null, pre_table, pos);
     associate_docstrings(dsl);
     return;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var post_table = Stdlib_Hashtbl[1].call(null, 0, 50);
   function set_post_docstrings(pos, dsl){
    var a = 0 !== dsl ? 1 : 0;
    return a ? Stdlib_Hashtbl[5].call(null, post_table, pos, dsl) : a;
   }
   function get_post_docs(pos){
    try{
     var dsl = Stdlib_Hashtbl[6].call(null, post_table, pos);
     associate_docstrings(dsl);
     var a = get_docstring(0, dsl);
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function mark_post_docs(pos){
    try{
     var
      dsl = Stdlib_Hashtbl[6].call(null, post_table, pos),
      a = associate_docstrings(dsl);
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function get_info(pos){
    try{
     var
      dsl = Stdlib_Hashtbl[6].call(null, post_table, pos),
      a = get_docstring(1, dsl);
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var floating_table = Stdlib_Hashtbl[1].call(null, 0, 50);
   function set_floating_docstrings(pos, dsl){
    var a = 0 !== dsl ? 1 : 0;
    return a ? Stdlib_Hashtbl[5].call(null, floating_table, pos, dsl) : a;
   }
   function get_text(pos){
    try{
     var
      dsl = Stdlib_Hashtbl[6].call(null, floating_table, pos),
      a = get_docstrings(dsl);
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function get_post_text(pos){
    try{
     var
      dsl = Stdlib_Hashtbl[6].call(null, post_table, pos),
      a = get_docstrings(dsl);
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var pre_extra_table = Stdlib_Hashtbl[1].call(null, 0, 50);
   function set_pre_extra_docstrings(pos, dsl){
    var a = 0 !== dsl ? 1 : 0;
    return a ? Stdlib_Hashtbl[5].call(null, pre_extra_table, pos, dsl) : a;
   }
   function get_pre_extra_text(pos){
    try{
     var
      dsl = Stdlib_Hashtbl[6].call(null, pre_extra_table, pos),
      a = get_docstrings(dsl);
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var post_extra_table = Stdlib_Hashtbl[1].call(null, 0, 50);
   function set_post_extra_docstrings(pos, dsl){
    var a = 0 !== dsl ? 1 : 0;
    return a ? Stdlib_Hashtbl[5].call(null, post_extra_table, pos, dsl) : a;
   }
   function get_post_extra_text(pos){
    try{
     var
      dsl = Stdlib_Hashtbl[6].call(null, post_extra_table, pos),
      a = get_docstrings(dsl);
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function symbol_docs(param){
    var a = get_post_docs(Stdlib_Parsing[6].call(null, 0));
    return [0, get_pre_docs(Stdlib_Parsing[5].call(null, 0)), a];
   }
   function symbol_docs_lazy(param){
    var
     p1 = Stdlib_Parsing[5].call(null, 0),
     p2 = Stdlib_Parsing[6].call(null, 0);
    return [246,
            function(param){
             var a = get_post_docs(p2);
             return [0, get_pre_docs(p1), a];
            }];
   }
   function rhs_docs(pos1, pos2){
    var a = get_post_docs(Stdlib_Parsing[8].call(null, pos2));
    return [0, get_pre_docs(Stdlib_Parsing[7].call(null, pos1)), a];
   }
   function rhs_docs_lazy(pos1, pos2){
    var
     p1 = Stdlib_Parsing[7].call(null, pos1),
     p2 = Stdlib_Parsing[8].call(null, pos2);
    return [246,
            function(param){
             var a = get_post_docs(p2);
             return [0, get_pre_docs(p1), a];
            }];
   }
   function mark_symbol_docs(param){
    mark_pre_docs(Stdlib_Parsing[5].call(null, 0));
    return mark_post_docs(Stdlib_Parsing[6].call(null, 0));
   }
   function mark_rhs_docs(pos1, pos2){
    mark_pre_docs(Stdlib_Parsing[7].call(null, pos1));
    return mark_post_docs(Stdlib_Parsing[8].call(null, pos2));
   }
   function symbol_info(param){
    return get_info(Stdlib_Parsing[6].call(null, 0));
   }
   function rhs_info(pos){return get_info(Stdlib_Parsing[8].call(null, pos));}
   function symbol_text(param){
    return get_text(Stdlib_Parsing[5].call(null, 0));
   }
   function symbol_text_lazy(param){
    var pos = Stdlib_Parsing[5].call(null, 0);
    return [246, function(a){return get_text(pos);}];
   }
   function rhs_text(pos){return get_text(Stdlib_Parsing[7].call(null, pos));}
   function rhs_post_text(pos){
    return get_post_text(Stdlib_Parsing[8].call(null, pos));
   }
   function rhs_text_lazy(pos){
    var pos$0 = Stdlib_Parsing[7].call(null, pos);
    return [246, function(a){return get_text(pos$0);}];
   }
   function symbol_pre_extra_text(param){
    return get_pre_extra_text(Stdlib_Parsing[5].call(null, 0));
   }
   function symbol_post_extra_text(param){
    return get_post_extra_text(Stdlib_Parsing[6].call(null, 0));
   }
   function rhs_pre_extra_text(pos){
    return get_pre_extra_text(Stdlib_Parsing[7].call(null, pos));
   }
   function rhs_post_extra_text(pos){
    return get_post_extra_text(Stdlib_Parsing[8].call(null, pos));
   }
   function symbol_docs$0(param){
    var endpos = param[2], startpos = param[1], a = get_post_docs(endpos);
    return [0, get_pre_docs(startpos), a];
   }
   function symbol_docs_lazy$0(param){
    var p2 = param[2], p1 = param[1];
    return [246,
            function(param){
             var a = get_post_docs(p2);
             return [0, get_pre_docs(p1), a];
            }];
   }
   function rhs_docs$0(pos1, pos2){
    var a = get_post_docs(pos2);
    return [0, get_pre_docs(pos1), a];
   }
   function rhs_docs_lazy$0(p1, p2){
    return [246,
            function(param){
             var a = get_post_docs(p2);
             return [0, get_pre_docs(p1), a];
            }];
   }
   function mark_symbol_docs$0(param){
    var endpos = param[2], startpos = param[1];
    mark_pre_docs(startpos);
    mark_post_docs(endpos);
    return 0;
   }
   function mark_rhs_docs$0(pos1, pos2){
    mark_pre_docs(pos1);
    mark_post_docs(pos2);
    return 0;
   }
   function symbol_info$0(endpos){return get_info(endpos);}
   function rhs_info$0(endpos){return get_info(endpos);}
   function symbol_text$0(startpos){return get_text(startpos);}
   function symbol_text_lazy$0(startpos){
    return [246, function(a){return get_text(startpos);}];
   }
   function rhs_text$0(pos){return get_text(pos);}
   function rhs_post_text$0(pos){return get_post_text(pos);}
   function rhs_text_lazy$0(pos){
    return [246, function(a){return get_text(pos);}];
   }
   function symbol_pre_extra_text$0(startpos){return get_pre_extra_text(startpos);
   }
   function symbol_post_extra_text$0(endpos){return get_post_extra_text(endpos);
   }
   function rhs_pre_extra_text$0(pos){return get_pre_extra_text(pos);}
   function rhs_post_extra_text$0(pos){return get_post_extra_text(pos);}
   function init$3(param){
    docstrings[1] = 0;
    Stdlib_Hashtbl[3].call(null, pre_table);
    Stdlib_Hashtbl[3].call(null, post_table);
    Stdlib_Hashtbl[3].call(null, floating_table);
    Stdlib_Hashtbl[3].call(null, pre_extra_table);
    return Stdlib_Hashtbl[3].call(null, post_extra_table);
   }
   var
    Dynlink_compilerlibs_Docstring =
      [0,
       init$3,
       warn_bad_docstrings,
       docstring,
       register,
       docstring_body,
       docstring_loc,
       set_pre_docstrings,
       set_post_docstrings,
       set_floating_docstrings,
       set_pre_extra_docstrings,
       set_post_extra_docstrings,
       empty_docs,
       docs_attr,
       add_docs_attrs,
       symbol_docs,
       symbol_docs_lazy,
       rhs_docs,
       rhs_docs_lazy,
       mark_symbol_docs,
       mark_rhs_docs,
       empty_info,
       docs_attr,
       add_info_attrs,
       symbol_info,
       rhs_info,
       0,
       0,
       text_attr,
       add_text_attrs,
       symbol_text,
       symbol_text_lazy,
       rhs_text,
       rhs_text_lazy,
       symbol_pre_extra_text,
       symbol_post_extra_text,
       rhs_pre_extra_text,
       rhs_post_extra_text,
       rhs_post_text,
       [0,
        symbol_docs$0,
        symbol_docs_lazy$0,
        rhs_docs$0,
        rhs_docs_lazy$0,
        mark_symbol_docs$0,
        mark_rhs_docs$0,
        symbol_info$0,
        rhs_info$0,
        symbol_text$0,
        symbol_text_lazy$0,
        rhs_text$0,
        rhs_text_lazy$0,
        symbol_pre_extra_text$0,
        symbol_post_extra_text$0,
        rhs_pre_extra_text$0,
        rhs_post_extra_text$0,
        rhs_post_text$0]];
   caml_register_global
    (1296, Dynlink_compilerlibs_Docstring, "Dynlink_compilerlibs.Docstrings");
   var
    Error$1 = [248, cst_Dynlink_compilerlibs_Synta, caml_fresh_oo_id(0)],
    Escape_error =
      [248, cst_Dynlink_compilerlibs_Synta$0, caml_fresh_oo_id(0)];
   function location_of_error(param){var l = param[1]; return l;}
   function ill_formed_ast(loc, s){
    throw caml_maybe_attach_backtrace([0, Error$1, [6, loc, s]], 1);
   }
   var
    Dynlink_compilerlibs_Syntaxerr =
      [0, Error$1, Escape_error, location_of_error, ill_formed_ast];
   caml_register_global
    (1297, Dynlink_compilerlibs_Syntaxerr, "Dynlink_compilerlibs.Syntaxerr");
   var default_loc = [0, none];
   function with_default_loc(l, f){
    return protect_refs([0, [0, default_loc, l], 0], f);
   }
   function integer(suffix, i){return [0, i, suffix];}
   function int$0(suffix, i){
    var i$0 = Stdlib_Int[12].call(null, i);
    return [0, i$0, suffix];
   }
   function int32$0(opt, i){
    if(opt) var sth = opt[1], suffix = sth; else var suffix = 108;
    var i$0 = Stdlib_Int32[14].call(null, i), suffix$0 = [0, suffix];
    return [0, i$0, suffix$0];
   }
   function int64$0(opt, i){
    if(opt) var sth = opt[1], suffix = sth; else var suffix = 76;
    var i$0 = Stdlib_Int64[14].call(null, i), suffix$0 = [0, suffix];
    return [0, i$0, suffix$0];
   }
   function nativeint$0(opt, i){
    if(opt) var sth = opt[1], suffix = sth; else var suffix = 110;
    var i$0 = Stdlib_Nativeint[15].call(null, i), suffix$0 = [0, suffix];
    return [0, i$0, suffix$0];
   }
   function float(suffix, f){return [3, f, suffix];}
   function char(c){return [1, c];}
   function string(quotation_delimiter, opt, s){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    return [2, s, loc, quotation_delimiter];
   }
   function mk(opt, name, payload){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    return [0, name, payload, loc];
   }
   var Attr = [0, mk];
   function mk$0(opt, a, d){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(a) var sth$0 = a[1], attrs = sth$0; else var attrs = 0;
    return [0, d, loc, 0, attrs];
   }
   function attr(d, a){
    var b = Stdlib[37].call(null, d[4], [0, a, 0]);
    return [0, d[1], d[2], d[3], b];
   }
   function any(loc, attrs, param){return mk$0(loc, attrs, 0);}
   function var$(loc, attrs, a){return mk$0(loc, attrs, [0, a]);}
   function arrow(loc, attrs, a, b, c){return mk$0(loc, attrs, [1, a, b, c]);}
   function tuple(loc, attrs, a){return mk$0(loc, attrs, [2, a]);}
   function constr(loc, attrs, a, b){return mk$0(loc, attrs, [3, a, b]);}
   function object(loc, attrs, a, b){return mk$0(loc, attrs, [4, a, b]);}
   function class$(loc, attrs, a, b){return mk$0(loc, attrs, [5, a, b]);}
   function alias(loc, attrs, a, b){return mk$0(loc, attrs, [6, a, b]);}
   function variant(loc, attrs, a, b, c){
    return mk$0(loc, attrs, [7, a, b, c]);
   }
   function poly(loc, attrs, a, b){return mk$0(loc, attrs, [8, a, b]);}
   function package$(loc, attrs, a, b){
    return mk$0(loc, attrs, [9, [0, a, b]]);
   }
   function extension$0(loc, attrs, a){return mk$0(loc, attrs, [10, a]);}
   function force_poly(t){
    var match = t[1];
    if(typeof match !== "number" && 8 === match[0]) return t;
    return poly([0, t[2]], 0, 0, t);
   }
   function varify_constructors(var_names, t){
    function check_variable(vl, loc, v){
     var a = Stdlib_List[36].call(null, v, vl);
     if(a) throw caml_maybe_attach_backtrace([0, Error$1, [4, loc, v]], 1);
     return a;
    }
    var
     var_names$0 =
       Stdlib_List[19].call(null, function(v){return v[1];}, var_names);
    function loop(t){
     var match = t[1];
     if(typeof match === "number")
      var desc = 0;
     else
      switch(match[0]){
        case 0:
         var x = match[1];
         check_variable(var_names$0, t[2], x);
         var desc = [0, x];
         break;
        case 1:
         var
          core_type = match[3],
          core_type$0 = match[2],
          label = match[1],
          b = loop(core_type),
          desc = [1, label, loop(core_type$0), b];
         break;
        case 2:
         var
          lst = match[1],
          desc = [2, Stdlib_List[19].call(null, loop, lst)];
         break;
        case 3:
         var longident = match[1], a = longident[1];
         if(0 === a[0] && ! match[2]){
          var s = a[1];
          if(Stdlib_List[36].call(null, s, var_names$0)){var desc = [0, s]; break;}
         }
         var
          lst$0 = match[2],
          desc = [3, longident, Stdlib_List[19].call(null, loop, lst$0)];
         break;
        case 4:
         var
          o = match[2],
          lst$1 = match[1],
          desc = [4, Stdlib_List[19].call(null, loop_object_field, lst$1), o];
         break;
        case 5:
         var
          lst$2 = match[2],
          longident$0 = match[1],
          desc = [5, longident$0, Stdlib_List[19].call(null, loop, lst$2)];
         break;
        case 6:
         var string = match[2], core_type$1 = match[1];
         check_variable(var_names$0, t[2], string);
         var desc = [6, loop(core_type$1), string];
         break;
        case 7:
         var
          lbl_lst_option = match[3],
          flag = match[2],
          row_field_list = match[1],
          desc =
            [7,
             Stdlib_List[19].call(null, loop_row_field, row_field_list),
             flag,
             lbl_lst_option];
         break;
        case 8:
         var core_type$2 = match[2], string_lst = match[1];
         Stdlib_List[17].call
          (null,
           function(v){return check_variable(var_names$0, t[2], v[1]);},
           string_lst);
         var desc = [8, string_lst, loop(core_type$2)];
         break;
        case 9:
         var
          match$0 = match[1],
          lst$3 = match$0[2],
          longident$1 = match$0[1],
          desc =
            [9,
             [0,
              longident$1,
              Stdlib_List[19].call
               (null,
                function(param){
                 var typ = param[2], n = param[1];
                 return [0, n, loop(typ)];
                },
                lst$3)]];
         break;
        default:
         var
          match$1 = match[1],
          arg = match$1[2],
          s$0 = match$1[1],
          desc = [10, [0, s$0, arg]];
      }
     return [0, desc, t[2], t[3], t[4]];
    }
    function loop_row_field(field){
     var match = field[1];
     if(0 === match[0])
      var
       lst = match[3],
       flag = match[2],
       label = match[1],
       prf_desc = [0, label, flag, Stdlib_List[19].call(null, loop, lst)];
     else
      var t = match[1], prf_desc = [1, loop(t)];
     return [0, prf_desc, field[2], field[3]];
    }
    function loop_object_field(field){
     var match = field[1];
     if(0 === match[0])
      var t = match[2], label = match[1], pof_desc = [0, label, loop(t)];
     else
      var t$0 = match[1], pof_desc = [1, loop(t$0)];
     return [0, pof_desc, field[2], field[3]];
    }
    return loop(t);
   }
   var
    Typ =
      [0,
       mk$0,
       attr,
       any,
       var$,
       arrow,
       tuple,
       constr,
       object,
       class$,
       alias,
       variant,
       poly,
       package$,
       extension$0,
       force_poly,
       varify_constructors];
   function mk$1(opt, a, d){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(a) var sth$0 = a[1], attrs = sth$0; else var attrs = 0;
    return [0, d, loc, 0, attrs];
   }
   function attr$0(d, a){
    var b = Stdlib[37].call(null, d[4], [0, a, 0]);
    return [0, d[1], d[2], d[3], b];
   }
   function any$0(loc, attrs, param){return mk$1(loc, attrs, 0);}
   function var$0(loc, attrs, a){return mk$1(loc, attrs, [0, a]);}
   function alias$0(loc, attrs, a, b){return mk$1(loc, attrs, [1, a, b]);}
   function constant(loc, attrs, a){return mk$1(loc, attrs, [2, a]);}
   function interval(loc, attrs, a, b){return mk$1(loc, attrs, [3, a, b]);}
   function tuple$0(loc, attrs, a){return mk$1(loc, attrs, [4, a]);}
   function construct(loc, attrs, a, b){return mk$1(loc, attrs, [5, a, b]);}
   function variant$0(loc, attrs, a, b){return mk$1(loc, attrs, [6, a, b]);}
   function record$0(loc, attrs, a, b){return mk$1(loc, attrs, [7, a, b]);}
   function array(loc, attrs, a){return mk$1(loc, attrs, [8, a]);}
   function or(loc, attrs, a, b){return mk$1(loc, attrs, [9, a, b]);}
   function constraint(loc, attrs, a, b){return mk$1(loc, attrs, [10, a, b]);}
   function type(loc, attrs, a){return mk$1(loc, attrs, [11, a]);}
   function lazy(loc, attrs, a){return mk$1(loc, attrs, [12, a]);}
   function unpack(loc, attrs, a){return mk$1(loc, attrs, [13, a]);}
   function open(loc, attrs, a, b){return mk$1(loc, attrs, [16, a, b]);}
   function exception(loc, attrs, a){return mk$1(loc, attrs, [14, a]);}
   function extension$1(loc, attrs, a){return mk$1(loc, attrs, [15, a]);}
   var
    Pat =
      [0,
       mk$1,
       attr$0,
       any$0,
       var$0,
       alias$0,
       constant,
       interval,
       tuple$0,
       construct,
       variant$0,
       record$0,
       array,
       or,
       constraint,
       type,
       lazy,
       unpack,
       open,
       exception,
       extension$1];
   function mk$2(opt, a, d){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(a) var sth$0 = a[1], attrs = sth$0; else var attrs = 0;
    return [0, d, loc, 0, attrs];
   }
   function attr$1(d, a){
    var b = Stdlib[37].call(null, d[4], [0, a, 0]);
    return [0, d[1], d[2], d[3], b];
   }
   function ident(loc, attrs, a){return mk$2(loc, attrs, [0, a]);}
   function constant$0(loc, attrs, a){return mk$2(loc, attrs, [1, a]);}
   function let$(loc, attrs, a, b, c){return mk$2(loc, attrs, [2, a, b, c]);}
   function fun(loc, attrs, a, b, c, d){
    return mk$2(loc, attrs, [4, a, b, c, d]);
   }
   function function$(loc, attrs, a){return mk$2(loc, attrs, [3, a]);}
   function apply(loc, attrs, a, b){return mk$2(loc, attrs, [5, a, b]);}
   function try$(loc, attrs, a, b){return mk$2(loc, attrs, [7, a, b]);}
   function tuple$1(loc, attrs, a){return mk$2(loc, attrs, [8, a]);}
   function construct$0(loc, attrs, a, b){return mk$2(loc, attrs, [9, a, b]);}
   function variant$1(loc, attrs, a, b){return mk$2(loc, attrs, [10, a, b]);}
   function record$1(loc, attrs, a, b){return mk$2(loc, attrs, [11, a, b]);}
   function field(loc, attrs, a, b){return mk$2(loc, attrs, [12, a, b]);}
   function setfield(loc, attrs, a, b, c){
    return mk$2(loc, attrs, [13, a, b, c]);
   }
   function array$0(loc, attrs, a){return mk$2(loc, attrs, [14, a]);}
   function ifthenelse(loc, attrs, a, b, c){return mk$2(loc, attrs, [15, a, b, c]);
   }
   function sequence(loc, attrs, a, b){return mk$2(loc, attrs, [16, a, b]);}
   function while$(loc, attrs, a, b){return mk$2(loc, attrs, [17, a, b]);}
   function for$(loc, attrs, a, b, c, d, e){
    return mk$2(loc, attrs, [18, a, b, c, d, e]);
   }
   function constraint$0(loc, attrs, a, b){return mk$2(loc, attrs, [19, a, b]);
   }
   function coerce(loc, attrs, a, b, c){
    return mk$2(loc, attrs, [20, a, b, c]);
   }
   function send(loc, attrs, a, b){return mk$2(loc, attrs, [21, a, b]);}
   function new$(loc, attrs, a){return mk$2(loc, attrs, [22, a]);}
   function setinstvar(loc, attrs, a, b){return mk$2(loc, attrs, [23, a, b]);}
   function override(loc, attrs, a){return mk$2(loc, attrs, [24, a]);}
   function letmodule(loc, attrs, a, b, c){
    return mk$2(loc, attrs, [25, a, b, c]);
   }
   function letexception(loc, attrs, a, b){return mk$2(loc, attrs, [26, a, b]);
   }
   function assert(loc, attrs, a){return mk$2(loc, attrs, [27, a]);}
   function lazy$0(loc, attrs, a){return mk$2(loc, attrs, [28, a]);}
   function poly$0(loc, attrs, a, b){return mk$2(loc, attrs, [29, a, b]);}
   function object$0(loc, attrs, a){return mk$2(loc, attrs, [30, a]);}
   function newtype(loc, attrs, a, b){return mk$2(loc, attrs, [31, a, b]);}
   function pack(loc, attrs, a){return mk$2(loc, attrs, [32, a]);}
   function open$0(loc, attrs, a, b){return mk$2(loc, attrs, [33, a, b]);}
   function letop(loc, attrs, let$, ands, body){
    return mk$2(loc, attrs, [34, [0, let$, ands, body]]);
   }
   function extension$2(loc, attrs, a){return mk$2(loc, attrs, [35, a]);}
   function unreachable(loc, attrs, param){return mk$2(loc, attrs, 0);}
   function case$(lhs, guard, rhs){return [0, lhs, guard, rhs];}
   function binding_op(op, pat, exp, loc){return [0, op, pat, exp, loc];}
   function mk$3(opt, a, d){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(a) var sth$0 = a[1], attrs = sth$0; else var attrs = 0;
    return [0, d, loc, attrs];
   }
   function attr$2(d, a){
    var b = Stdlib[37].call(null, d[3], [0, a, 0]);
    return [0, d[1], d[2], b];
   }
   function ident$0(loc, attrs, a){return mk$3(loc, attrs, [0, a]);}
   function alias$1(loc, attrs, a){return mk$3(loc, attrs, [6, a]);}
   function signature(loc, attrs, a){return mk$3(loc, attrs, [1, a]);}
   function functor(loc, attrs, a, b){return mk$3(loc, attrs, [2, a, b]);}
   function with$(loc, attrs, a, b){return mk$3(loc, attrs, [3, a, b]);}
   function typeof$(loc, attrs, a){return mk$3(loc, attrs, [4, a]);}
   function extension$3(loc, attrs, a){return mk$3(loc, attrs, [5, a]);}
   var
    Mty =
      [0,
       mk$3,
       attr$2,
       ident$0,
       alias$1,
       signature,
       functor,
       with$,
       typeof$,
       extension$3];
   function mk$4(opt, a, d){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(a) var sth$0 = a[1], attrs = sth$0; else var attrs = 0;
    return [0, d, loc, attrs];
   }
   function attr$3(d, a){
    var b = Stdlib[37].call(null, d[3], [0, a, 0]);
    return [0, d[1], d[2], b];
   }
   function ident$1(loc, attrs, x){return mk$4(loc, attrs, [0, x]);}
   function structure(loc, attrs, x){return mk$4(loc, attrs, [1, x]);}
   function functor$0(loc, attrs, arg, body){return mk$4(loc, attrs, [2, arg, body]);
   }
   function apply$0(loc, attrs, m1, m2){return mk$4(loc, attrs, [3, m1, m2]);}
   function constraint$1(loc, attrs, m, mty){return mk$4(loc, attrs, [4, m, mty]);
   }
   function unpack$0(loc, attrs, e){return mk$4(loc, attrs, [5, e]);}
   function extension$4(loc, attrs, a){return mk$4(loc, attrs, [6, a]);}
   var
    Mod =
      [0,
       mk$4,
       attr$3,
       ident$1,
       structure,
       functor$0,
       apply$0,
       constraint$1,
       unpack$0,
       extension$4];
   function mk$5(opt, d){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    return [0, d, loc];
   }
   function value(loc, a){return mk$5(loc, [0, a]);}
   function type$0(loc, rec_flag, a){return mk$5(loc, [1, rec_flag, a]);}
   function type_subst(loc, a){return mk$5(loc, [2, a]);}
   function type_extension(loc, a){return mk$5(loc, [3, a]);}
   function exception$0(loc, a){return mk$5(loc, [4, a]);}
   function module(loc, a){return mk$5(loc, [5, a]);}
   function mod_subst(loc, a){return mk$5(loc, [6, a]);}
   function rec_module(loc, a){return mk$5(loc, [7, a]);}
   function modtype(loc, a){return mk$5(loc, [8, a]);}
   function modtype_subst(loc, a){return mk$5(loc, [9, a]);}
   function open$1(loc, a){return mk$5(loc, [10, a]);}
   function include$2(loc, a){return mk$5(loc, [11, a]);}
   function class$0(loc, a){return mk$5(loc, [12, a]);}
   function class_type(loc, a){return mk$5(loc, [13, a]);}
   function extension$5(loc, opt, a){
    if(opt) var sth = opt[1], attrs = sth; else var attrs = 0;
    return mk$5(loc, [15, a, attrs]);
   }
   function attribute(loc, a){return mk$5(loc, [14, a]);}
   function text(txt){
    var
     f_txt =
       Stdlib_List[41].call
         (null, function(ds){return ds[1] !== cst$115 ? 1 : 0;})
        (txt);
    return Stdlib_List[19].call
            (null,
             function(ds){
              var a = text_attr(ds);
              return attribute([0, ds[2]], a);
             },
             f_txt);
   }
   var
    Sig =
      [0,
       mk$5,
       value,
       type$0,
       type_subst,
       type_extension,
       exception$0,
       module,
       mod_subst,
       rec_module,
       modtype,
       modtype_subst,
       open$1,
       include$2,
       class$0,
       class_type,
       extension$5,
       attribute,
       text];
   function mk$6(opt, d){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    return [0, d, loc];
   }
   function eval$(loc, opt, a){
    if(opt) var sth = opt[1], attrs = sth; else var attrs = 0;
    return mk$6(loc, [0, a, attrs]);
   }
   function value$0(loc, a, b){return mk$6(loc, [1, a, b]);}
   function primitive(loc, a){return mk$6(loc, [2, a]);}
   function type$1(loc, rec_flag, a){return mk$6(loc, [3, rec_flag, a]);}
   function type_extension$0(loc, a){return mk$6(loc, [4, a]);}
   function exception$1(loc, a){return mk$6(loc, [5, a]);}
   function module$0(loc, a){return mk$6(loc, [6, a]);}
   function rec_module$0(loc, a){return mk$6(loc, [7, a]);}
   function modtype$0(loc, a){return mk$6(loc, [8, a]);}
   function open$2(loc, a){return mk$6(loc, [9, a]);}
   function class$1(loc, a){return mk$6(loc, [10, a]);}
   function class_type$0(loc, a){return mk$6(loc, [11, a]);}
   function include$3(loc, a){return mk$6(loc, [12, a]);}
   function extension$6(loc, opt, a){
    if(opt) var sth = opt[1], attrs = sth; else var attrs = 0;
    return mk$6(loc, [14, a, attrs]);
   }
   function attribute$0(loc, a){return mk$6(loc, [13, a]);}
   function text$0(txt){
    var
     f_txt =
       Stdlib_List[41].call
         (null, function(ds){return ds[1] !== cst$115 ? 1 : 0;})
        (txt);
    return Stdlib_List[19].call
            (null,
             function(ds){
              var a = text_attr(ds);
              return attribute$0([0, ds[2]], a);
             },
             f_txt);
   }
   var
    Str =
      [0,
       mk$6,
       eval$,
       value$0,
       primitive,
       type$1,
       type_extension$0,
       exception$1,
       module$0,
       rec_module$0,
       modtype$0,
       open$2,
       class$1,
       class_type$0,
       include$3,
       extension$6,
       attribute$0,
       text$0];
   function mk$7(opt, a, d){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(a) var sth$0 = a[1], attrs = sth$0; else var attrs = 0;
    return [0, d, loc, attrs];
   }
   function attr$4(d, a){
    var b = Stdlib[37].call(null, d[3], [0, a, 0]);
    return [0, d[1], d[2], b];
   }
   function constr$0(loc, attrs, a, b){return mk$7(loc, attrs, [0, a, b]);}
   function structure$0(loc, attrs, a){return mk$7(loc, attrs, [1, a]);}
   function fun$0(loc, attrs, a, b, c, d){
    return mk$7(loc, attrs, [2, a, b, c, d]);
   }
   function apply$1(loc, attrs, a, b){return mk$7(loc, attrs, [3, a, b]);}
   function let$0(loc, attrs, a, b, c){return mk$7(loc, attrs, [4, a, b, c]);}
   function constraint$2(loc, attrs, a, b){return mk$7(loc, attrs, [5, a, b]);
   }
   function extension$7(loc, attrs, a){return mk$7(loc, attrs, [6, a]);}
   function open$3(loc, attrs, a, b){return mk$7(loc, attrs, [7, a, b]);}
   var
    Cl =
      [0,
       mk$7,
       attr$4,
       constr$0,
       structure$0,
       fun$0,
       apply$1,
       let$0,
       constraint$2,
       extension$7,
       open$3];
   function mk$8(opt, a, d){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(a) var sth$0 = a[1], attrs = sth$0; else var attrs = 0;
    return [0, d, loc, attrs];
   }
   function attr$5(d, a){
    var b = Stdlib[37].call(null, d[3], [0, a, 0]);
    return [0, d[1], d[2], b];
   }
   function constr$1(loc, attrs, a, b){return mk$8(loc, attrs, [0, a, b]);}
   function signature$0(loc, attrs, a){return mk$8(loc, attrs, [1, a]);}
   function arrow$0(loc, attrs, a, b, c){
    return mk$8(loc, attrs, [2, a, b, c]);
   }
   function extension$8(loc, attrs, a){return mk$8(loc, attrs, [3, a]);}
   function open$4(loc, attrs, a, b){return mk$8(loc, attrs, [4, a, b]);}
   var
    Cty =
      [0, mk$8, attr$5, constr$1, signature$0, arrow$0, extension$8, open$4];
   function mk$9(opt, b, a, d){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(b) var sth$0 = b[1], attrs = sth$0; else var attrs = 0;
    if(a) var sth$1 = a[1], docs = sth$1; else var docs = empty_docs;
    return [0, d, loc, add_docs_attrs(docs, attrs)];
   }
   function inherit(loc, attrs, a){return mk$9(loc, attrs, 0, [0, a]);}
   function val(loc, attrs, a, b, c, d){
    return mk$9(loc, attrs, 0, [1, [0, a, b, c, d]]);
   }
   function method(loc, attrs, a, b, c, d){
    return mk$9(loc, attrs, 0, [2, [0, a, b, c, d]]);
   }
   function constraint$3(loc, attrs, a, b){
    return mk$9(loc, attrs, 0, [3, [0, a, b]]);
   }
   function extension$9(loc, attrs, a){return mk$9(loc, attrs, 0, [5, a]);}
   function attribute$1(loc, a){return mk$9(loc, 0, 0, [4, a]);}
   function text$1(txt){
    var
     f_txt =
       Stdlib_List[41].call
         (null, function(ds){return ds[1] !== cst$115 ? 1 : 0;})
        (txt);
    return Stdlib_List[19].call
            (null,
             function(ds){
              var a = text_attr(ds);
              return attribute$1([0, ds[2]], a);
             },
             f_txt);
   }
   function attr$6(d, a){
    var b = Stdlib[37].call(null, d[3], [0, a, 0]);
    return [0, d[1], d[2], b];
   }
   function mk$10(opt, b, a, d){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(b) var sth$0 = b[1], attrs = sth$0; else var attrs = 0;
    if(a) var sth$1 = a[1], docs = sth$1; else var docs = empty_docs;
    return [0, d, loc, add_docs_attrs(docs, attrs)];
   }
   function inherit$0(loc, attrs, a, b, c){
    return mk$10(loc, attrs, 0, [0, a, b, c]);
   }
   function val$0(loc, attrs, a, b, c){
    return mk$10(loc, attrs, 0, [1, [0, a, b, c]]);
   }
   function method$0(loc, attrs, a, b, c){
    return mk$10(loc, attrs, 0, [2, [0, a, b, c]]);
   }
   function constraint$4(loc, attrs, a, b){
    return mk$10(loc, attrs, 0, [3, [0, a, b]]);
   }
   function initializer(loc, attrs, a){return mk$10(loc, attrs, 0, [4, a]);}
   function extension$10(loc, attrs, a){return mk$10(loc, attrs, 0, [6, a]);}
   function attribute$2(loc, a){return mk$10(loc, 0, 0, [5, a]);}
   function text$2(txt){
    var
     f_txt =
       Stdlib_List[41].call
         (null, function(ds){return ds[1] !== cst$115 ? 1 : 0;})
        (txt);
    return Stdlib_List[19].call
            (null,
             function(ds){
              var a = text_attr(ds);
              return attribute$2([0, ds[2]], a);
             },
             f_txt);
   }
   function virtual(ct){return [0, ct];}
   function concrete(o, e){return [1, o, e];}
   function attr$7(d, a){
    var b = Stdlib[37].call(null, d[3], [0, a, 0]);
    return [0, d[1], d[2], b];
   }
   function mk$11(opt, c, b, a, name, typ){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(c) var sth$0 = c[1], attrs = sth$0; else var attrs = 0;
    if(b) var sth$1 = b[1], docs = sth$1; else var docs = empty_docs;
    if(a) var sth$2 = a[1], prim = sth$2; else var prim = 0;
    return [0, name, typ, prim, add_docs_attrs(docs, attrs), loc];
   }
   var Val = [0, mk$11];
   function mk$12(opt, c, b, a, name, typ){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(c) var sth$0 = c[1], attrs = sth$0; else var attrs = 0;
    if(b) var sth$1 = b[1], docs = sth$1; else var docs = empty_docs;
    if(a) var sth$2 = a[1], text = sth$2; else var text = 0;
    return [0,
            name,
            typ,
            add_text_attrs(text, add_docs_attrs(docs, attrs)),
            loc];
   }
   var Md = [0, mk$12];
   function mk$13(opt, c, b, a, name, syn){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(c) var sth$0 = c[1], attrs = sth$0; else var attrs = 0;
    if(b) var sth$1 = b[1], docs = sth$1; else var docs = empty_docs;
    if(a) var sth$2 = a[1], text = sth$2; else var text = 0;
    return [0,
            name,
            syn,
            add_text_attrs(text, add_docs_attrs(docs, attrs)),
            loc];
   }
   var Ms = [0, mk$13];
   function mk$14(opt, c, b, a, typ, name){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(c) var sth$0 = c[1], attrs = sth$0; else var attrs = 0;
    if(b) var sth$1 = b[1], docs = sth$1; else var docs = empty_docs;
    if(a) var sth$2 = a[1], text = sth$2; else var text = 0;
    return [0,
            name,
            typ,
            add_text_attrs(text, add_docs_attrs(docs, attrs)),
            loc];
   }
   var Mtd = [0, mk$14];
   function mk$15(opt, c, b, a, name, expr){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(c) var sth$0 = c[1], attrs = sth$0; else var attrs = 0;
    if(b) var sth$1 = b[1], docs = sth$1; else var docs = empty_docs;
    if(a) var sth$2 = a[1], text = sth$2; else var text = 0;
    return [0,
            name,
            expr,
            add_text_attrs(text, add_docs_attrs(docs, attrs)),
            loc];
   }
   var Mb = [0, mk$15];
   function mk$16(opt, c, b, a, expr){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(c) var sth$0 = c[1], attrs = sth$0; else var attrs = 0;
    if(b) var sth$1 = b[1], docs = sth$1; else var docs = empty_docs;
    if(a) var sth$2 = a[1], override = sth$2; else var override = 1;
    return [0, expr, override, loc, add_docs_attrs(docs, attrs)];
   }
   var Opn = [0, mk$16];
   function mk$17(opt, b, a, mexpr){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(b) var sth$0 = b[1], attrs = sth$0; else var attrs = 0;
    if(a) var sth$1 = a[1], docs = sth$1; else var docs = empty_docs;
    return [0, mexpr, loc, add_docs_attrs(docs, attrs)];
   }
   var Incl = [0, mk$17];
   function mk$18(opt, c, b, a, pat, expr){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(c) var sth$0 = c[1], attrs = sth$0; else var attrs = 0;
    if(b) var sth$1 = b[1], docs = sth$1; else var docs = empty_docs;
    if(a) var sth$2 = a[1], text = sth$2; else var text = 0;
    return [0,
            pat,
            expr,
            add_text_attrs(text, add_docs_attrs(docs, attrs)),
            loc];
   }
   var Vb = [0, mk$18];
   function mk$19(opt, e, d, c, b, a, name, expr){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(e) var sth$0 = e[1], attrs = sth$0; else var attrs = 0;
    if(d) var sth$1 = d[1], docs = sth$1; else var docs = empty_docs;
    if(c) var sth$2 = c[1], text = sth$2; else var text = 0;
    if(b) var sth$3 = b[1], virt = sth$3; else var virt = 1;
    if(a) var sth$4 = a[1], params = sth$4; else var params = 0;
    return [0,
            virt,
            params,
            name,
            expr,
            loc,
            add_text_attrs(text, add_docs_attrs(docs, attrs))];
   }
   var Ci = [0, mk$19];
   function mk$20(opt, g, f, e, d, c, b, a, manifest, name){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(g) var sth$0 = g[1], attrs = sth$0; else var attrs = 0;
    if(f) var sth$1 = f[1], docs = sth$1; else var docs = empty_docs;
    if(e) var sth$2 = e[1], text = sth$2; else var text = 0;
    if(d) var sth$3 = d[1], params = sth$3; else var params = 0;
    if(c) var sth$4 = c[1], cstrs = sth$4; else var cstrs = 0;
    if(b) var sth$5 = b[1], kind = sth$5; else var kind = 0;
    if(a) var sth$6 = a[1], priv = sth$6; else var priv = 1;
    return [0,
            name,
            params,
            cstrs,
            kind,
            priv,
            manifest,
            add_text_attrs(text, add_docs_attrs(docs, attrs)),
            loc];
   }
   function constructor(opt, d, c, b, a, res, name){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(d) var sth$0 = d[1], attrs = sth$0; else var attrs = 0;
    if(c) var sth$1 = c[1], info = sth$1; else var info = empty_info;
    if(b) var sth$2 = b[1], vars = sth$2; else var vars = 0;
    if(a) var sth$3 = a[1], args = sth$3; else var args = et;
    return [0, name, vars, args, res, loc, add_info_attrs(info, attrs)];
   }
   function field$0(opt, c, b, a, name, typ){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(c) var sth$0 = c[1], attrs = sth$0; else var attrs = 0;
    if(b) var sth$1 = b[1], info = sth$1; else var info = empty_info;
    if(a) var sth$2 = a[1], mut = sth$2; else var mut = 0;
    return [0, name, mut, typ, loc, add_info_attrs(info, attrs)];
   }
   var Type = [0, mk$20, constructor, field$0];
   function mk$21(opt, d, c, b, a, path, constructors){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(d) var sth$0 = d[1], attrs = sth$0; else var attrs = 0;
    if(c) var sth$1 = c[1], docs = sth$1; else var docs = empty_docs;
    if(b) var sth$2 = b[1], params = sth$2; else var params = 0;
    if(a) var sth$3 = a[1], priv = sth$3; else var priv = 1;
    return [0,
            path,
            params,
            constructors,
            priv,
            loc,
            add_docs_attrs(docs, attrs)];
   }
   function mk_exception(opt, b, a, constructor){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(b) var sth$0 = b[1], attrs = sth$0; else var attrs = 0;
    if(a) var sth$1 = a[1], docs = sth$1; else var docs = empty_docs;
    return [0, constructor, loc, add_docs_attrs(docs, attrs)];
   }
   function constructor$0(opt, c, b, a, name, kind){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(c) var sth$0 = c[1], attrs = sth$0; else var attrs = 0;
    if(b) var sth$1 = b[1], docs = sth$1; else var docs = empty_docs;
    if(a) var sth$2 = a[1], info = sth$2; else var info = empty_info;
    return [0,
            name,
            kind,
            loc,
            add_docs_attrs(docs, add_info_attrs(info, attrs))];
   }
   function decl(opt, e, d, c, b, a, res, name){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(e) var sth$0 = e[1], attrs = sth$0; else var attrs = 0;
    if(d) var sth$1 = d[1], docs = sth$1; else var docs = empty_docs;
    if(c) var sth$2 = c[1], info = sth$2; else var info = empty_info;
    if(b) var sth$3 = b[1], vars = sth$3; else var vars = 0;
    if(a) var sth$4 = a[1], args = sth$4; else var args = eu;
    return [0,
            name,
            [0, vars, args, res],
            loc,
            add_docs_attrs(docs, add_info_attrs(info, attrs))];
   }
   function rebind(opt, c, b, a, name, lid){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(c) var sth$0 = c[1], attrs = sth$0; else var attrs = 0;
    if(b) var sth$1 = b[1], docs = sth$1; else var docs = empty_docs;
    if(a) var sth$2 = a[1], info = sth$2; else var info = empty_info;
    return [0,
            name,
            [1, lid],
            loc,
            add_docs_attrs(docs, add_info_attrs(info, attrs))];
   }
   var Te = [0, mk$21, mk_exception, constructor$0, decl, rebind];
   function mk$22(self, fields){return [0, self, fields];}
   var Csig = [0, mk$22];
   function mk$23(self, fields){return [0, self, fields];}
   var Cstr = [0, mk$23];
   function mk$24(opt, a, desc){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(a) var sth$0 = a[1], attrs = sth$0; else var attrs = 0;
    return [0, desc, loc, attrs];
   }
   function tag(loc, attrs, label, const$, tys){
    return mk$24(loc, attrs, [0, label, const$, tys]);
   }
   function inherit$1(loc, ty){return mk$24(loc, 0, [1, ty]);}
   var Rf = [0, mk$24, tag, inherit$1];
   function mk$25(opt, a, desc){
    if(opt) var sth = opt[1], loc = sth; else var loc = default_loc[1];
    if(a) var sth$0 = a[1], attrs = sth$0; else var attrs = 0;
    return [0, desc, loc, attrs];
   }
   function tag$0(loc, attrs, label, ty){
    return mk$25(loc, attrs, [0, label, ty]);
   }
   function inherit$2(loc, ty){return mk$25(loc, 0, [1, ty]);}
   var
    Of = [0, mk$25, tag$0, inherit$2],
    i =
      [0,
       mk$10,
       attr$7,
       inherit$0,
       val$0,
       method$0,
       constraint$4,
       initializer,
       extension$10,
       attribute$2,
       text$2,
       virtual,
       concrete],
    k =
      [0,
       mk$9,
       attr$6,
       inherit,
       val,
       method,
       constraint$3,
       extension$9,
       attribute$1,
       text$1],
    b =
      [0,
       mk$2,
       attr$1,
       ident,
       constant$0,
       let$,
       fun,
       function$,
       apply,
       function(loc, attrs, a, b){return mk$2(loc, attrs, [6, a, b]);},
       try$,
       tuple$1,
       construct$0,
       variant$1,
       record$1,
       field,
       setfield,
       array$0,
       ifthenelse,
       sequence,
       while$,
       for$,
       coerce,
       constraint$0,
       send,
       new$,
       setinstvar,
       override,
       letmodule,
       letexception,
       assert,
       lazy$0,
       poly$0,
       object$0,
       newtype,
       pack,
       open$0,
       letop,
       extension$2,
       unreachable,
       case$,
       binding_op],
    w =
      [0, char, string, integer, int$0, int32$0, int64$0, nativeint$0, float],
    Dynlink_compilerlibs_Ast_helpe =
      [0,
       default_loc,
       with_default_loc,
       w,
       Attr,
       Typ,
       Pat,
       b,
       Val,
       Type,
       Te,
       Mty,
       Mod,
       Sig,
       Str,
       Md,
       Ms,
       Mtd,
       Mb,
       Opn,
       Incl,
       Vb,
       Cty,
       k,
       Cl,
       i,
       Ci,
       Csig,
       Cstr,
       Rf,
       Of];
   caml_register_global
    (1299, Dynlink_compilerlibs_Ast_helpe, "Dynlink_compilerlibs.Ast_helper");
   function map_fst(f, param){
    var y = param[2], x = param[1];
    return [0, caml_call1(f, x), y];
   }
   function map_snd(f, param){
    var y = param[2], x = param[1];
    return [0, x, caml_call1(f, y)];
   }
   function map_opt(f, param){
    if(! param) return 0;
    var x = param[1];
    return [0, caml_call1(f, x)];
   }
   function map_loc(sub, param){
    var loc = param[2], txt = param[1];
    return [0, txt, caml_call2(sub[23], sub, loc)];
   }
   function map$0(sub, c){
    if(2 !== c[0]) return c;
    var
     quotation_delimiter = c[3],
     loc = c[2],
     s = c[1],
     loc$0 = caml_call2(sub[23], sub, loc);
    return caml_call3(w[2], quotation_delimiter, [0, loc$0], s);
   }
   function map$1(sub, param){
    var
     attrs = param[4],
     loc = param[2],
     desc = param[1],
     loc$0 = caml_call2(sub[23], sub, loc),
     attrs$0 = caml_call2(sub[2], sub, attrs);
    if(typeof desc === "number") return any([0, loc$0], [0, attrs$0], 0);
    switch(desc[0]){
      case 0:
       var s = desc[1]; return var$([0, loc$0], [0, attrs$0], s);
      case 1:
       var
        t2 = desc[3],
        t1 = desc[2],
        lab = desc[1],
        a = caml_call2(sub[38], sub, t2);
       return arrow
               ([0, loc$0],
                [0, attrs$0],
                lab,
                caml_call2(sub[38], sub, t1),
                a);
      case 2:
       var tyl = desc[1], c = caml_call1(sub[38], sub);
       return tuple
               ([0, loc$0], [0, attrs$0], Stdlib_List[19].call(null, c, tyl));
      case 3:
       var
        tl = desc[2],
        lid = desc[1],
        d = caml_call1(sub[38], sub),
        e = Stdlib_List[19].call(null, d, tl);
       return constr([0, loc$0], [0, attrs$0], map_loc(sub, lid), e);
      case 4:
       var o = desc[2], l = desc[1];
       return object
               ([0, loc$0],
                [0, attrs$0],
                Stdlib_List[19].call
                 (null,
                  function(param){
                   var
                    pof_attributes = param[3],
                    pof_loc = param[2],
                    pof_desc = param[1],
                    loc = caml_call2(sub[23], sub, pof_loc),
                    attrs = caml_call2(sub[2], sub, pof_attributes);
                   if(0 === pof_desc[0])
                    var
                     t = pof_desc[2],
                     l = pof_desc[1],
                     a = caml_call2(sub[38], sub, t),
                     desc = [0, map_loc(sub, l), a];
                   else
                    var
                     t$0 = pof_desc[1],
                     desc = [1, caml_call2(sub[38], sub, t$0)];
                   return mk$25([0, loc], [0, attrs], desc);
                  },
                  l),
                o);
      case 5:
       var
        tl$0 = desc[2],
        lid$0 = desc[1],
        f = caml_call1(sub[38], sub),
        g = Stdlib_List[19].call(null, f, tl$0);
       return class$([0, loc$0], [0, attrs$0], map_loc(sub, lid$0), g);
      case 6:
       var s$0 = desc[2], t = desc[1];
       return alias
               ([0, loc$0], [0, attrs$0], caml_call2(sub[38], sub, t), s$0);
      case 7:
       var ll = desc[3], b = desc[2], rl = desc[1];
       return variant
               ([0, loc$0],
                [0, attrs$0],
                Stdlib_List[19].call
                 (null,
                  function(param){
                   var
                    prf_attributes = param[3],
                    prf_loc = param[2],
                    prf_desc = param[1],
                    loc = caml_call2(sub[23], sub, prf_loc),
                    attrs = caml_call2(sub[2], sub, prf_attributes);
                   if(0 === prf_desc[0])
                    var
                     tl = prf_desc[3],
                     b = prf_desc[2],
                     l = prf_desc[1],
                     a = caml_call1(sub[38], sub),
                     c = Stdlib_List[19].call(null, a, tl),
                     desc = [0, map_loc(sub, l), b, c];
                   else
                    var
                     t = prf_desc[1],
                     desc = [1, caml_call2(sub[38], sub, t)];
                   return mk$24([0, loc], [0, attrs], desc);
                  },
                  rl),
                b,
                ll);
      case 8:
       var t$0 = desc[2], sl = desc[1], h = caml_call2(sub[38], sub, t$0);
       return poly
               ([0, loc$0],
                [0, attrs$0],
                Stdlib_List[19].call
                 (null, function(a){return map_loc(sub, a);}, sl),
                h);
      case 9:
       var
        match = desc[1],
        l$0 = match[2],
        lid$1 = match[1],
        f2 = caml_call1(sub[38], sub),
        i =
          Stdlib_List[19].call
           (null,
            function(param){
             var y = param[2], x = param[1], a = caml_call1(f2, y);
             return [0, map_loc(sub, x), a];
            },
            l$0);
       return package$([0, loc$0], [0, attrs$0], map_loc(sub, lid$1), i);
      default:
       var x = desc[1];
       return extension$0
               ([0, loc$0], [0, attrs$0], caml_call2(sub[18], sub, x));
    }
   }
   function map_type_declaration(sub, param){
    var
     ptype_loc = param[8],
     ptype_attributes = param[7],
     ptype_manifest = param[6],
     ptype_private = param[5],
     ptype_kind = param[4],
     ptype_cstrs = param[3],
     ptype_params = param[2],
     ptype_name = param[1],
     loc = caml_call2(sub[23], sub, ptype_loc),
     attrs = caml_call2(sub[2], sub, ptype_attributes),
     a = map_loc(sub, ptype_name),
     b = map_opt(caml_call1(sub[38], sub), ptype_manifest),
     c = [0, caml_call2(sub[42], sub, ptype_kind)],
     f3 = caml_call1(sub[23], sub),
     f2 = caml_call1(sub[38], sub),
     f1 = caml_call1(sub[38], sub),
     d =
       [0,
        Stdlib_List[19].call
         (null,
          function(param){
           var
            z = param[3],
            y = param[2],
            x = param[1],
            a = caml_call1(f3, z),
            b = caml_call1(f2, y);
           return [0, caml_call1(f1, x), b, a];
          },
          ptype_cstrs)],
     e = caml_call1(sub[38], sub);
    return mk$20
            ([0, loc],
             [0, attrs],
             0,
             0,
             [0,
              Stdlib_List[19].call
               (null, function(a){return map_fst(e, a);}, ptype_params)],
             d,
             c,
             [0, ptype_private],
             b,
             a);
   }
   function map_type_kind(sub, param){
    if(typeof param === "number") return 0 === param ? 0 : 1;
    if(0 === param[0]){
     var l = param[1], a = caml_call1(sub[16], sub);
     return [0, Stdlib_List[19].call(null, a, l)];
    }
    var l$0 = param[1], b = caml_call1(sub[22], sub);
    return [1, Stdlib_List[19].call(null, b, l$0)];
   }
   function map_constructor_arguments(sub, param){
    if(0 === param[0]){
     var l = param[1], a = caml_call1(sub[38], sub);
     return [0, Stdlib_List[19].call(null, a, l)];
    }
    var l$0 = param[1], b = caml_call1(sub[22], sub);
    return [1, Stdlib_List[19].call(null, b, l$0)];
   }
   function map_type_extension(sub, param){
    var
     ptyext_attributes = param[6],
     ptyext_loc = param[5],
     ptyext_private = param[4],
     ptyext_constructors = param[3],
     ptyext_params = param[2],
     ptyext_path = param[1],
     loc = caml_call2(sub[23], sub, ptyext_loc),
     attrs = caml_call2(sub[2], sub, ptyext_attributes),
     a = caml_call1(sub[19], sub),
     b = Stdlib_List[19].call(null, a, ptyext_constructors),
     c = map_loc(sub, ptyext_path),
     d = caml_call1(sub[38], sub);
    return mk$21
            ([0, loc],
             [0, attrs],
             0,
             [0,
              Stdlib_List[19].call
               (null, function(a){return map_fst(d, a);}, ptyext_params)],
             [0, ptyext_private],
             c,
             b);
   }
   function map_type_exception(sub, param){
    var
     ptyexn_attributes = param[3],
     ptyexn_loc = param[2],
     ptyexn_constructor = param[1],
     loc = caml_call2(sub[23], sub, ptyexn_loc),
     attrs = caml_call2(sub[2], sub, ptyexn_attributes);
    return mk_exception
            ([0, loc],
             [0, attrs],
             0,
             caml_call2(sub[19], sub, ptyexn_constructor));
   }
   function map_extension_constructor(sub, param){
    var
     pext_attributes = param[4],
     pext_loc = param[3],
     pext_kind = param[2],
     pext_name = param[1],
     loc = caml_call2(sub[23], sub, pext_loc),
     attrs = caml_call2(sub[2], sub, pext_attributes);
    if(0 === pext_kind[0])
     var
      cto = pext_kind[3],
      ctl = pext_kind[2],
      vars = pext_kind[1],
      b = map_opt(caml_call1(sub[38], sub), cto),
      c = map_constructor_arguments(sub, ctl),
      a =
        [0,
         Stdlib_List[19].call
          (null, function(a){return map_loc(sub, a);}, vars),
         c,
         b];
    else
     var li = pext_kind[1], a = [1, map_loc(sub, li)];
    return constructor$0
            ([0, loc], [0, attrs], 0, 0, map_loc(sub, pext_name), a);
   }
   function map$2(sub, param){
    var
     attrs = param[3],
     loc = param[2],
     desc = param[1],
     loc$0 = caml_call2(sub[23], sub, loc),
     attrs$0 = caml_call2(sub[2], sub, attrs);
    switch(desc[0]){
      case 0:
       var
        tys = desc[2],
        lid = desc[1],
        a = caml_call1(sub[38], sub),
        b = Stdlib_List[19].call(null, a, tys);
       return constr$1([0, loc$0], [0, attrs$0], map_loc(sub, lid), b);
      case 1:
       var x = desc[1];
       return signature$0
               ([0, loc$0], [0, attrs$0], caml_call2(sub[10], sub, x));
      case 2:
       var
        ct = desc[3],
        t = desc[2],
        lab = desc[1],
        c = caml_call2(sub[12], sub, ct);
       return arrow$0
               ([0, loc$0], [0, attrs$0], lab, caml_call2(sub[38], sub, t), c);
      case 3:
       var x$0 = desc[1];
       return extension$8
               ([0, loc$0], [0, attrs$0], caml_call2(sub[18], sub, x$0));
      default:
       var ct$0 = desc[2], o = desc[1], d = caml_call2(sub[12], sub, ct$0);
       return open$4([0, loc$0], [0, attrs$0], caml_call2(sub[31], sub, o), d);
    }
   }
   function map_field(sub, param){
    var
     attrs = param[3],
     loc = param[2],
     desc = param[1],
     loc$0 = caml_call2(sub[23], sub, loc),
     attrs$0 = caml_call2(sub[2], sub, attrs);
    switch(desc[0]){
      case 0:
       var ct = desc[1], a = caml_call2(sub[12], sub, ct);
       return caml_call3(k[3], [0, loc$0], [0, attrs$0], a);
      case 1:
       var
        match = desc[1],
        t = match[4],
        v = match[3],
        m = match[2],
        s = match[1],
        b = caml_call2(sub[38], sub, t),
        c = map_loc(sub, s);
       return caml_call6(k[4], [0, loc$0], [0, attrs$0], c, m, v, b);
      case 2:
       var
        match$0 = desc[1],
        t$0 = match$0[4],
        v$0 = match$0[3],
        p = match$0[2],
        s$0 = match$0[1],
        d = caml_call2(sub[38], sub, t$0),
        e = map_loc(sub, s$0);
       return caml_call6(k[5], [0, loc$0], [0, attrs$0], e, p, v$0, d);
      case 3:
       var
        match$1 = desc[1],
        t2 = match$1[2],
        t1 = match$1[1],
        f = caml_call2(sub[38], sub, t2),
        g = caml_call2(sub[38], sub, t1);
       return caml_call4(k[6], [0, loc$0], [0, attrs$0], g, f);
      case 4:
       var x = desc[1], h = caml_call2(sub[1], sub, x);
       return caml_call2(k[8], [0, loc$0], h);
      default:
       var x$0 = desc[1], i = caml_call2(sub[18], sub, x$0);
       return caml_call3(k[7], [0, loc$0], [0, attrs$0], i);
    }
   }
   function map_signature(sub, param){
    var
     pcsig_fields = param[2],
     pcsig_self = param[1],
     a = caml_call1(sub[14], sub),
     fields = Stdlib_List[19].call(null, a, pcsig_fields),
     self = caml_call2(sub[38], sub, pcsig_self);
    return [0, self, fields];
   }
   function map_functor_param(sub, param){
    if(! param) return 0;
    var mt = param[2], s = param[1], a = caml_call2(sub[28], sub, mt);
    return [0, map_loc(sub, s), a];
   }
   function map$3(sub, param){
    var
     attrs = param[3],
     loc = param[2],
     desc = param[1],
     loc$0 = caml_call2(sub[23], sub, loc),
     attrs$0 = caml_call2(sub[2], sub, attrs);
    switch(desc[0]){
      case 0:
       var s = desc[1];
       return ident$0([0, loc$0], [0, attrs$0], map_loc(sub, s));
      case 1:
       var sg = desc[1];
       return signature
               ([0, loc$0], [0, attrs$0], caml_call2(sub[34], sub, sg));
      case 2:
       var mt = desc[2], param$0 = desc[1], a = caml_call2(sub[28], sub, mt);
       return functor
               ([0, loc$0], [0, attrs$0], map_functor_param(sub, param$0), a);
      case 3:
       var
        l = desc[2],
        mt$0 = desc[1],
        b = caml_call1(sub[45], sub),
        c = Stdlib_List[19].call(null, b, l);
       return with$
               ([0, loc$0], [0, attrs$0], caml_call2(sub[28], sub, mt$0), c);
      case 4:
       var me = desc[1];
       return typeof$([0, loc$0], [0, attrs$0], caml_call2(sub[27], sub, me));
      case 5:
       var x = desc[1];
       return extension$3
               ([0, loc$0], [0, attrs$0], caml_call2(sub[18], sub, x));
      default:
       var s$0 = desc[1];
       return alias$1([0, loc$0], [0, attrs$0], map_loc(sub, s$0));
    }
   }
   function map_with_constraint(sub, param){
    switch(param[0]){
      case 0:
       var d = param[2], lid = param[1], a = caml_call2(sub[39], sub, d);
       return [0, map_loc(sub, lid), a];
      case 1:
       var lid2 = param[2], lid$0 = param[1], b = map_loc(sub, lid2);
       return [1, map_loc(sub, lid$0), b];
      case 2:
       var
        mty = param[2],
        lid$1 = param[1],
        c = caml_call2(sub[28], sub, mty);
       return [2, map_loc(sub, lid$1), c];
      case 3:
       var
        mty$0 = param[2],
        lid$2 = param[1],
        e = caml_call2(sub[28], sub, mty$0);
       return [3, map_loc(sub, lid$2), e];
      case 4:
       var
        d$0 = param[2],
        lid$3 = param[1],
        f = caml_call2(sub[39], sub, d$0);
       return [4, map_loc(sub, lid$3), f];
      default:
       var lid$4 = param[2], s = param[1], g = map_loc(sub, lid$4);
       return [5, map_loc(sub, s), g];
    }
   }
   function map_signature_item(sub, param){
    var
     loc = param[2],
     desc = param[1],
     loc$0 = caml_call2(sub[23], sub, loc);
    switch(desc[0]){
      case 0:
       var vd = desc[1];
       return value([0, loc$0], caml_call2(sub[44], sub, vd));
      case 1:
       var l = desc[2], rf = desc[1], a = caml_call1(sub[39], sub);
       return type$0([0, loc$0], rf, Stdlib_List[19].call(null, a, l));
      case 2:
       var l$0 = desc[1], b = caml_call1(sub[39], sub);
       return type_subst([0, loc$0], Stdlib_List[19].call(null, b, l$0));
      case 3:
       var te = desc[1];
       return type_extension([0, loc$0], caml_call2(sub[40], sub, te));
      case 4:
       var ed = desc[1];
       return exception$0([0, loc$0], caml_call2(sub[41], sub, ed));
      case 5:
       var x = desc[1];
       return module([0, loc$0], caml_call2(sub[25], sub, x));
      case 6:
       var x$0 = desc[1];
       return mod_subst([0, loc$0], caml_call2(sub[26], sub, x$0));
      case 7:
       var l$1 = desc[1], c = caml_call1(sub[25], sub);
       return rec_module([0, loc$0], Stdlib_List[19].call(null, c, l$1));
      case 8:
       var x$1 = desc[1];
       return modtype([0, loc$0], caml_call2(sub[29], sub, x$1));
      case 9:
       var x$2 = desc[1];
       return modtype_subst([0, loc$0], caml_call2(sub[29], sub, x$2));
      case 10:
       var x$3 = desc[1];
       return open$1([0, loc$0], caml_call2(sub[31], sub, x$3));
      case 11:
       var x$4 = desc[1];
       return include$2([0, loc$0], caml_call2(sub[21], sub, x$4));
      case 12:
       var l$2 = desc[1], d = caml_call1(sub[7], sub);
       return class$0([0, loc$0], Stdlib_List[19].call(null, d, l$2));
      case 13:
       var l$3 = desc[1], e = caml_call1(sub[13], sub);
       return class_type([0, loc$0], Stdlib_List[19].call(null, e, l$3));
      case 14:
       var x$5 = desc[1];
       return attribute([0, loc$0], caml_call2(sub[1], sub, x$5));
      default:
       var
        attrs = desc[2],
        x$6 = desc[1],
        attrs$0 = caml_call2(sub[2], sub, attrs);
       return extension$5
               ([0, loc$0], [0, attrs$0], caml_call2(sub[18], sub, x$6));
    }
   }
   function map$4(sub, param){
    var
     attrs = param[3],
     loc = param[2],
     desc = param[1],
     loc$0 = caml_call2(sub[23], sub, loc),
     attrs$0 = caml_call2(sub[2], sub, attrs);
    switch(desc[0]){
      case 0:
       var x = desc[1];
       return ident$1([0, loc$0], [0, attrs$0], map_loc(sub, x));
      case 1:
       var str = desc[1];
       return structure
               ([0, loc$0], [0, attrs$0], caml_call2(sub[36], sub, str));
      case 2:
       var
        body = desc[2],
        param$0 = desc[1],
        a = caml_call2(sub[27], sub, body);
       return functor$0
               ([0, loc$0], [0, attrs$0], map_functor_param(sub, param$0), a);
      case 3:
       var m2 = desc[2], m1 = desc[1], b = caml_call2(sub[27], sub, m2);
       return apply$0
               ([0, loc$0], [0, attrs$0], caml_call2(sub[27], sub, m1), b);
      case 4:
       var mty = desc[2], m = desc[1], c = caml_call2(sub[28], sub, mty);
       return constraint$1
               ([0, loc$0], [0, attrs$0], caml_call2(sub[27], sub, m), c);
      case 5:
       var e = desc[1];
       return unpack$0([0, loc$0], [0, attrs$0], caml_call2(sub[17], sub, e));
      default:
       var x$0 = desc[1];
       return extension$4
               ([0, loc$0], [0, attrs$0], caml_call2(sub[18], sub, x$0));
    }
   }
   function map_structure_item(sub, param){
    var
     loc = param[2],
     desc = param[1],
     loc$0 = caml_call2(sub[23], sub, loc);
    switch(desc[0]){
      case 0:
       var
        attrs = desc[2],
        x = desc[1],
        attrs$0 = caml_call2(sub[2], sub, attrs);
       return eval$([0, loc$0], [0, attrs$0], caml_call2(sub[17], sub, x));
      case 1:
       var vbs = desc[2], r = desc[1], a = caml_call1(sub[43], sub);
       return value$0([0, loc$0], r, Stdlib_List[19].call(null, a, vbs));
      case 2:
       var vd = desc[1];
       return primitive([0, loc$0], caml_call2(sub[44], sub, vd));
      case 3:
       var l = desc[2], rf = desc[1], b = caml_call1(sub[39], sub);
       return type$1([0, loc$0], rf, Stdlib_List[19].call(null, b, l));
      case 4:
       var te = desc[1];
       return type_extension$0([0, loc$0], caml_call2(sub[40], sub, te));
      case 5:
       var ed = desc[1];
       return exception$1([0, loc$0], caml_call2(sub[41], sub, ed));
      case 6:
       var x$0 = desc[1];
       return module$0([0, loc$0], caml_call2(sub[24], sub, x$0));
      case 7:
       var l$0 = desc[1], c = caml_call1(sub[24], sub);
       return rec_module$0([0, loc$0], Stdlib_List[19].call(null, c, l$0));
      case 8:
       var x$1 = desc[1];
       return modtype$0([0, loc$0], caml_call2(sub[29], sub, x$1));
      case 9:
       var x$2 = desc[1];
       return open$2([0, loc$0], caml_call2(sub[30], sub, x$2));
      case 10:
       var l$1 = desc[1], d = caml_call1(sub[6], sub);
       return class$1([0, loc$0], Stdlib_List[19].call(null, d, l$1));
      case 11:
       var l$2 = desc[1], e = caml_call1(sub[13], sub);
       return class_type$0([0, loc$0], Stdlib_List[19].call(null, e, l$2));
      case 12:
       var x$3 = desc[1];
       return include$3([0, loc$0], caml_call2(sub[20], sub, x$3));
      case 13:
       var x$4 = desc[1];
       return attribute$0([0, loc$0], caml_call2(sub[1], sub, x$4));
      default:
       var
        attrs$1 = desc[2],
        x$5 = desc[1],
        attrs$2 = caml_call2(sub[2], sub, attrs$1);
       return extension$6
               ([0, loc$0], [0, attrs$2], caml_call2(sub[18], sub, x$5));
    }
   }
   function map$5(sub, param){
    var
     attrs = param[4],
     loc = param[2],
     desc = param[1],
     loc$0 = caml_call2(sub[23], sub, loc),
     attrs$0 = caml_call2(sub[2], sub, attrs);
    if(typeof desc === "number")
     return caml_call3(b[39], [0, loc$0], [0, attrs$0], 0);
    switch(desc[0]){
      case 0:
       var x = desc[1], a = map_loc(sub, x);
       return caml_call3(b[3], [0, loc$0], [0, attrs$0], a);
      case 1:
       var x$0 = desc[1], c = caml_call2(sub[15], sub, x$0);
       return caml_call3(b[4], [0, loc$0], [0, attrs$0], c);
      case 2:
       var
        e = desc[3],
        vbs = desc[2],
        r = desc[1],
        f = caml_call2(sub[17], sub, e),
        g = caml_call1(sub[43], sub),
        h = Stdlib_List[19].call(null, g, vbs);
       return caml_call5(b[5], [0, loc$0], [0, attrs$0], r, h, f);
      case 3:
       var pel = desc[1], i = caml_call2(sub[5], sub, pel);
       return caml_call3(b[7], [0, loc$0], [0, attrs$0], i);
      case 4:
       var
        e$0 = desc[4],
        p = desc[3],
        def = desc[2],
        lab = desc[1],
        j = caml_call2(sub[17], sub, e$0),
        k = caml_call2(sub[32], sub, p),
        m = map_opt(caml_call1(sub[17], sub), def);
       return caml_call6(b[6], [0, loc$0], [0, attrs$0], lab, m, k, j);
      case 5:
       var
        l = desc[2],
        e$1 = desc[1],
        n = caml_call1(sub[17], sub),
        q = Stdlib_List[19].call(null, function(a){return map_snd(n, a);}, l),
        u = caml_call2(sub[17], sub, e$1);
       return caml_call4(b[8], [0, loc$0], [0, attrs$0], u, q);
      case 6:
       var
        pel$0 = desc[2],
        e$2 = desc[1],
        v = caml_call2(sub[5], sub, pel$0),
        w = caml_call2(sub[17], sub, e$2);
       return caml_call4(b[9], [0, loc$0], [0, attrs$0], w, v);
      case 7:
       var
        pel$1 = desc[2],
        e$3 = desc[1],
        y = caml_call2(sub[5], sub, pel$1),
        z = caml_call2(sub[17], sub, e$3);
       return caml_call4(b[10], [0, loc$0], [0, attrs$0], z, y);
      case 8:
       var
        el = desc[1],
        A = caml_call1(sub[17], sub),
        B = Stdlib_List[19].call(null, A, el);
       return caml_call3(b[11], [0, loc$0], [0, attrs$0], B);
      case 9:
       var
        arg = desc[2],
        lid = desc[1],
        C = map_opt(caml_call1(sub[17], sub), arg),
        D = map_loc(sub, lid);
       return caml_call4(b[12], [0, loc$0], [0, attrs$0], D, C);
      case 10:
       var
        eo = desc[2],
        lab$0 = desc[1],
        E = map_opt(caml_call1(sub[17], sub), eo);
       return caml_call4(b[13], [0, loc$0], [0, attrs$0], lab$0, E);
      case 11:
       var
        eo$0 = desc[2],
        l$0 = desc[1],
        F = map_opt(caml_call1(sub[17], sub), eo$0),
        f2 = caml_call1(sub[17], sub),
        G =
          Stdlib_List[19].call
           (null,
            function(param){
             var y = param[2], x = param[1], a = caml_call1(f2, y);
             return [0, map_loc(sub, x), a];
            },
            l$0);
       return caml_call4(b[14], [0, loc$0], [0, attrs$0], G, F);
      case 12:
       var
        lid$0 = desc[2],
        e$4 = desc[1],
        H = map_loc(sub, lid$0),
        I = caml_call2(sub[17], sub, e$4);
       return caml_call4(b[15], [0, loc$0], [0, attrs$0], I, H);
      case 13:
       var
        e2 = desc[3],
        lid$1 = desc[2],
        e1 = desc[1],
        J = caml_call2(sub[17], sub, e2),
        K = map_loc(sub, lid$1),
        L = caml_call2(sub[17], sub, e1);
       return caml_call5(b[16], [0, loc$0], [0, attrs$0], L, K, J);
      case 14:
       var
        el$0 = desc[1],
        M = caml_call1(sub[17], sub),
        N = Stdlib_List[19].call(null, M, el$0);
       return caml_call3(b[17], [0, loc$0], [0, attrs$0], N);
      case 15:
       var
        e3 = desc[3],
        e2$0 = desc[2],
        e1$0 = desc[1],
        O = map_opt(caml_call1(sub[17], sub), e3),
        P = caml_call2(sub[17], sub, e2$0),
        Q = caml_call2(sub[17], sub, e1$0);
       return caml_call5(b[18], [0, loc$0], [0, attrs$0], Q, P, O);
      case 16:
       var
        e2$1 = desc[2],
        e1$1 = desc[1],
        R = caml_call2(sub[17], sub, e2$1),
        S = caml_call2(sub[17], sub, e1$1);
       return caml_call4(b[19], [0, loc$0], [0, attrs$0], S, R);
      case 17:
       var
        e2$2 = desc[2],
        e1$2 = desc[1],
        T = caml_call2(sub[17], sub, e2$2),
        U = caml_call2(sub[17], sub, e1$2);
       return caml_call4(b[20], [0, loc$0], [0, attrs$0], U, T);
      case 18:
       var
        e3$0 = desc[5],
        d = desc[4],
        e2$3 = desc[3],
        e1$3 = desc[2],
        p$0 = desc[1],
        V = caml_call2(sub[17], sub, e3$0),
        W = caml_call2(sub[17], sub, e2$3),
        X = caml_call2(sub[17], sub, e1$3),
        Y = caml_call2(sub[32], sub, p$0);
       return caml_call7(b[21], [0, loc$0], [0, attrs$0], Y, X, W, d, V);
      case 19:
       var
        t = desc[2],
        e$5 = desc[1],
        Z = caml_call2(sub[38], sub, t),
        _ = caml_call2(sub[17], sub, e$5);
       return caml_call4(b[23], [0, loc$0], [0, attrs$0], _, Z);
      case 20:
       var
        t2 = desc[3],
        t1 = desc[2],
        e$6 = desc[1],
        $ = caml_call2(sub[38], sub, t2),
        aa = map_opt(caml_call1(sub[38], sub), t1),
        ab = caml_call2(sub[17], sub, e$6);
       return caml_call5(b[22], [0, loc$0], [0, attrs$0], ab, aa, $);
      case 21:
       var
        s = desc[2],
        e$7 = desc[1],
        ac = map_loc(sub, s),
        ad = caml_call2(sub[17], sub, e$7);
       return caml_call4(b[24], [0, loc$0], [0, attrs$0], ad, ac);
      case 22:
       var lid$2 = desc[1], ae = map_loc(sub, lid$2);
       return caml_call3(b[25], [0, loc$0], [0, attrs$0], ae);
      case 23:
       var
        e$8 = desc[2],
        s$0 = desc[1],
        af = caml_call2(sub[17], sub, e$8),
        ag = map_loc(sub, s$0);
       return caml_call4(b[26], [0, loc$0], [0, attrs$0], ag, af);
      case 24:
       var
        sel = desc[1],
        f2$0 = caml_call1(sub[17], sub),
        ah =
          Stdlib_List[19].call
           (null,
            function(param){
             var y = param[2], x = param[1], a = caml_call1(f2$0, y);
             return [0, map_loc(sub, x), a];
            },
            sel);
       return caml_call3(b[27], [0, loc$0], [0, attrs$0], ah);
      case 25:
       var
        e$9 = desc[3],
        me = desc[2],
        s$1 = desc[1],
        ai = caml_call2(sub[17], sub, e$9),
        aj = caml_call2(sub[27], sub, me),
        ak = map_loc(sub, s$1);
       return caml_call5(b[28], [0, loc$0], [0, attrs$0], ak, aj, ai);
      case 26:
       var
        e$10 = desc[2],
        cd = desc[1],
        al = caml_call2(sub[17], sub, e$10),
        am = caml_call2(sub[19], sub, cd);
       return caml_call4(b[29], [0, loc$0], [0, attrs$0], am, al);
      case 27:
       var e$11 = desc[1], an = caml_call2(sub[17], sub, e$11);
       return caml_call3(b[30], [0, loc$0], [0, attrs$0], an);
      case 28:
       var e$12 = desc[1], ao = caml_call2(sub[17], sub, e$12);
       return caml_call3(b[31], [0, loc$0], [0, attrs$0], ao);
      case 29:
       var
        t$0 = desc[2],
        e$13 = desc[1],
        ap = map_opt(caml_call1(sub[38], sub), t$0),
        aq = caml_call2(sub[17], sub, e$13);
       return caml_call4(b[32], [0, loc$0], [0, attrs$0], aq, ap);
      case 30:
       var cls = desc[1], ar = caml_call2(sub[11], sub, cls);
       return caml_call3(b[33], [0, loc$0], [0, attrs$0], ar);
      case 31:
       var
        e$14 = desc[2],
        s$2 = desc[1],
        as = caml_call2(sub[17], sub, e$14),
        at = map_loc(sub, s$2);
       return caml_call4(b[34], [0, loc$0], [0, attrs$0], at, as);
      case 32:
       var me$0 = desc[1], au = caml_call2(sub[27], sub, me$0);
       return caml_call3(b[35], [0, loc$0], [0, attrs$0], au);
      case 33:
       var
        e$15 = desc[2],
        o = desc[1],
        av = caml_call2(sub[17], sub, e$15),
        aw = caml_call2(sub[30], sub, o);
       return caml_call4(b[36], [0, loc$0], [0, attrs$0], aw, av);
      case 34:
       var
        match = desc[1],
        body = match[3],
        ands = match[2],
        let$ = match[1],
        ax = caml_call2(sub[17], sub, body),
        ay = caml_call1(sub[3], sub),
        az = Stdlib_List[19].call(null, ay, ands),
        aA = caml_call2(sub[3], sub, let$);
       return caml_call5(b[37], [0, loc$0], [0, attrs$0], aA, az, ax);
      default:
       var x$1 = desc[1], aB = caml_call2(sub[18], sub, x$1);
       return caml_call3(b[38], [0, loc$0], [0, attrs$0], aB);
    }
   }
   function map_binding_op(sub, param){
    var
     pbop_loc = param[4],
     pbop_exp = param[3],
     pbop_pat = param[2],
     pbop_op = param[1],
     op = map_loc(sub, pbop_op),
     pat = caml_call2(sub[32], sub, pbop_pat),
     exp = caml_call2(sub[17], sub, pbop_exp),
     loc = caml_call2(sub[23], sub, pbop_loc);
    return caml_call4(b[41], op, pat, exp, loc);
   }
   function map$6(sub, param){
    var
     attrs = param[4],
     loc = param[2],
     desc = param[1],
     loc$0 = caml_call2(sub[23], sub, loc),
     attrs$0 = caml_call2(sub[2], sub, attrs);
    if(typeof desc === "number") return any$0([0, loc$0], [0, attrs$0], 0);
    switch(desc[0]){
      case 0:
       var s = desc[1];
       return var$0([0, loc$0], [0, attrs$0], map_loc(sub, s));
      case 1:
       var s$0 = desc[2], p = desc[1], b = map_loc(sub, s$0);
       return alias$0
               ([0, loc$0], [0, attrs$0], caml_call2(sub[32], sub, p), b);
      case 2:
       var c = desc[1];
       return constant([0, loc$0], [0, attrs$0], caml_call2(sub[15], sub, c));
      case 3:
       var c2 = desc[2], c1 = desc[1], d = caml_call2(sub[15], sub, c2);
       return interval
               ([0, loc$0], [0, attrs$0], caml_call2(sub[15], sub, c1), d);
      case 4:
       var pl = desc[1], e = caml_call1(sub[32], sub);
       return tuple$0
               ([0, loc$0], [0, attrs$0], Stdlib_List[19].call(null, e, pl));
      case 5:
       var p$0 = desc[2], l = desc[1];
       if(p$0)
        var
         x$0 = p$0[1],
         p$1 = x$0[2],
         vl = x$0[1],
         f = caml_call2(sub[32], sub, p$1),
         a =
           [0,
            [0,
             Stdlib_List[19].call
              (null, function(a){return map_loc(sub, a);}, vl),
             f]];
       else
        var a = 0;
       return construct([0, loc$0], [0, attrs$0], map_loc(sub, l), a);
      case 6:
       var p$2 = desc[2], l$0 = desc[1];
       return variant$0
               ([0, loc$0],
                [0, attrs$0],
                l$0,
                map_opt(caml_call1(sub[32], sub), p$2));
      case 7:
       var cf = desc[2], lpl = desc[1], f2 = caml_call1(sub[32], sub);
       return record$0
               ([0, loc$0],
                [0, attrs$0],
                Stdlib_List[19].call
                 (null,
                  function(param){
                   var y = param[2], x = param[1], a = caml_call1(f2, y);
                   return [0, map_loc(sub, x), a];
                  },
                  lpl),
                cf);
      case 8:
       var pl$0 = desc[1], g = caml_call1(sub[32], sub);
       return array
               ([0, loc$0], [0, attrs$0], Stdlib_List[19].call(null, g, pl$0));
      case 9:
       var p2 = desc[2], p1 = desc[1], h = caml_call2(sub[32], sub, p2);
       return or([0, loc$0], [0, attrs$0], caml_call2(sub[32], sub, p1), h);
      case 10:
       var t = desc[2], p$3 = desc[1], i = caml_call2(sub[38], sub, t);
       return constraint
               ([0, loc$0], [0, attrs$0], caml_call2(sub[32], sub, p$3), i);
      case 11:
       var s$1 = desc[1];
       return type([0, loc$0], [0, attrs$0], map_loc(sub, s$1));
      case 12:
       var p$4 = desc[1];
       return lazy([0, loc$0], [0, attrs$0], caml_call2(sub[32], sub, p$4));
      case 13:
       var s$2 = desc[1];
       return unpack([0, loc$0], [0, attrs$0], map_loc(sub, s$2));
      case 14:
       var p$5 = desc[1];
       return exception
               ([0, loc$0], [0, attrs$0], caml_call2(sub[32], sub, p$5));
      case 15:
       var x = desc[1];
       return extension$1
               ([0, loc$0], [0, attrs$0], caml_call2(sub[18], sub, x));
      default:
       var p$6 = desc[2], lid = desc[1], j = caml_call2(sub[32], sub, p$6);
       return open([0, loc$0], [0, attrs$0], map_loc(sub, lid), j);
    }
   }
   function map$7(sub, param){
    var
     attrs = param[3],
     loc = param[2],
     desc = param[1],
     loc$0 = caml_call2(sub[23], sub, loc),
     attrs$0 = caml_call2(sub[2], sub, attrs);
    switch(desc[0]){
      case 0:
       var
        tys = desc[2],
        lid = desc[1],
        a = caml_call1(sub[38], sub),
        b = Stdlib_List[19].call(null, a, tys);
       return constr$0([0, loc$0], [0, attrs$0], map_loc(sub, lid), b);
      case 1:
       var s = desc[1];
       return structure$0
               ([0, loc$0], [0, attrs$0], caml_call2(sub[11], sub, s));
      case 2:
       var
        ce = desc[4],
        p = desc[3],
        e = desc[2],
        lab = desc[1],
        c = caml_call2(sub[8], sub, ce),
        d = caml_call2(sub[32], sub, p);
       return fun$0
               ([0, loc$0],
                [0, attrs$0],
                lab,
                map_opt(caml_call1(sub[17], sub), e),
                d,
                c);
      case 3:
       var
        l = desc[2],
        ce$0 = desc[1],
        f = caml_call1(sub[17], sub),
        g = Stdlib_List[19].call(null, function(a){return map_snd(f, a);}, l);
       return apply$1
               ([0, loc$0], [0, attrs$0], caml_call2(sub[8], sub, ce$0), g);
      case 4:
       var
        ce$1 = desc[3],
        vbs = desc[2],
        r = desc[1],
        h = caml_call2(sub[8], sub, ce$1),
        i = caml_call1(sub[43], sub);
       return let$0
               ([0, loc$0],
                [0, attrs$0],
                r,
                Stdlib_List[19].call(null, i, vbs),
                h);
      case 5:
       var ct = desc[2], ce$2 = desc[1], j = caml_call2(sub[12], sub, ct);
       return constraint$2
               ([0, loc$0], [0, attrs$0], caml_call2(sub[8], sub, ce$2), j);
      case 6:
       var x = desc[1];
       return extension$7
               ([0, loc$0], [0, attrs$0], caml_call2(sub[18], sub, x));
      default:
       var ce$3 = desc[2], o = desc[1], k = caml_call2(sub[8], sub, ce$3);
       return open$3([0, loc$0], [0, attrs$0], caml_call2(sub[31], sub, o), k);
    }
   }
   function map_kind(sub, param){
    if(0 === param[0]){
     var t = param[1];
     return [0, caml_call2(sub[38], sub, t)];
    }
    var e = param[2], o = param[1];
    return [1, o, caml_call2(sub[17], sub, e)];
   }
   function map_field$0(sub, param){
    var
     attrs = param[3],
     loc = param[2],
     desc = param[1],
     loc$0 = caml_call2(sub[23], sub, loc),
     attrs$0 = caml_call2(sub[2], sub, attrs);
    switch(desc[0]){
      case 0:
       var s = desc[3], ce = desc[2], o = desc[1];
       if(s) var x$1 = s[1], a = [0, map_loc(sub, x$1)]; else var a = 0;
       var b = caml_call2(sub[8], sub, ce);
       return caml_call5(i[3], [0, loc$0], [0, attrs$0], o, b, a);
      case 1:
       var
        match = desc[1],
        k = match[3],
        m = match[2],
        s$0 = match[1],
        c = map_kind(sub, k),
        d = map_loc(sub, s$0);
       return caml_call5(i[4], [0, loc$0], [0, attrs$0], d, m, c);
      case 2:
       var
        match$0 = desc[1],
        k$0 = match$0[3],
        p = match$0[2],
        s$1 = match$0[1],
        f = map_kind(sub, k$0),
        g = map_loc(sub, s$1);
       return caml_call5(i[5], [0, loc$0], [0, attrs$0], g, p, f);
      case 3:
       var
        match$1 = desc[1],
        t2 = match$1[2],
        t1 = match$1[1],
        h = caml_call2(sub[38], sub, t2),
        j = caml_call2(sub[38], sub, t1);
       return caml_call4(i[6], [0, loc$0], [0, attrs$0], j, h);
      case 4:
       var e = desc[1], l = caml_call2(sub[17], sub, e);
       return caml_call3(i[7], [0, loc$0], [0, attrs$0], l);
      case 5:
       var x = desc[1], n = caml_call2(sub[1], sub, x);
       return caml_call2(i[9], [0, loc$0], n);
      default:
       var x$0 = desc[1], q = caml_call2(sub[18], sub, x$0);
       return caml_call3(i[8], [0, loc$0], [0, attrs$0], q);
    }
   }
   function map_structure(sub, param){
    var
     pcstr_fields = param[2],
     pcstr_self = param[1],
     a = caml_call1(sub[9], sub),
     b = Stdlib_List[19].call(null, a, pcstr_fields);
    return [0, caml_call2(sub[32], sub, pcstr_self), b];
   }
   function class_infos(sub, f, param){
    var
     pci_attributes = param[6],
     pci_loc = param[5],
     pci_expr = param[4],
     pci_name = param[3],
     pl = param[2],
     pci_virt = param[1],
     loc = caml_call2(sub[23], sub, pci_loc),
     attrs = caml_call2(sub[2], sub, pci_attributes),
     a = caml_call1(f, pci_expr),
     b = map_loc(sub, pci_name),
     c = caml_call1(sub[38], sub);
    return mk$19
            ([0, loc],
             [0, attrs],
             0,
             0,
             [0, pci_virt],
             [0,
              Stdlib_List[19].call
               (null, function(a){return map_fst(c, a);}, pl)],
             b,
             a);
   }
   var
    default_mapper =
      [0,
       function(this$, a){
        var
         b = caml_call2(this$[23], this$, a[3]),
         c = caml_call2(this$[33], this$, a[2]);
        return [0, map_loc(this$, a[1]), c, b];
       },
       function(this$, l){
        var a = caml_call1(this$[1], this$);
        return Stdlib_List[19].call(null, a, l);
       },
       map_binding_op,
       function(this$, param){
        var
         pc_rhs = param[3],
         pc_guard = param[2],
         pc_lhs = param[1],
         a = caml_call2(this$[17], this$, pc_rhs),
         b = map_opt(caml_call1(this$[17], this$), pc_guard);
        return [0, caml_call2(this$[32], this$, pc_lhs), b, a];
       },
       function(this$, l){
        var a = caml_call1(this$[4], this$);
        return Stdlib_List[19].call(null, a, l);
       },
       function(this$){
        var a = caml_call1(this$[8], this$);
        return function(b){return class_infos(this$, a, b);};
       },
       function(this$){
        var a = caml_call1(this$[12], this$);
        return function(b){return class_infos(this$, a, b);};
       },
       map$7,
       map_field$0,
       map_signature,
       map_structure,
       map$2,
       function(this$){
        var a = caml_call1(this$[12], this$);
        return function(b){return class_infos(this$, a, b);};
       },
       map_field,
       map$0,
       function(this$, param){
        var
         pcd_attributes = param[6],
         pcd_loc = param[5],
         pcd_res = param[4],
         pcd_args = param[3],
         pcd_vars = param[2],
         pcd_name = param[1],
         a = map_loc(this$, pcd_name),
         b = map_opt(caml_call1(this$[38], this$), pcd_res),
         c = [0, map_constructor_arguments(this$, pcd_args)],
         d =
           [0,
            Stdlib_List[19].call
             (null, function(a){return map_loc(this$, a);}, pcd_vars)],
         e = [0, caml_call2(this$[2], this$, pcd_attributes)];
        return constructor
                ([0, caml_call2(this$[23], this$, pcd_loc)], e, 0, d, c, b, a);
       },
       map$5,
       function(this$, param){
        var e = param[2], s = param[1], a = caml_call2(this$[33], this$, e);
        return [0, map_loc(this$, s), a];
       },
       map_extension_constructor,
       function(this$, param){
        var
         pincl_attributes = param[3],
         pincl_loc = param[2],
         pincl_mod = param[1],
         a = caml_call2(this$[27], this$, pincl_mod),
         b = [0, caml_call2(this$[2], this$, pincl_attributes)];
        return mk$17([0, caml_call2(this$[23], this$, pincl_loc)], b, 0, a);
       },
       function(this$, param){
        var
         pincl_attributes = param[3],
         pincl_loc = param[2],
         pincl_mod = param[1],
         a = caml_call2(this$[28], this$, pincl_mod),
         b = [0, caml_call2(this$[2], this$, pincl_attributes)];
        return mk$17([0, caml_call2(this$[23], this$, pincl_loc)], b, 0, a);
       },
       function(this$, param){
        var
         pld_attributes = param[5],
         pld_loc = param[4],
         pld_type = param[3],
         pld_mutable = param[2],
         pld_name = param[1],
         a = caml_call2(this$[38], this$, pld_type),
         b = map_loc(this$, pld_name),
         c = [0, caml_call2(this$[2], this$, pld_attributes)];
        return field$0
                ([0, caml_call2(this$[23], this$, pld_loc)],
                 c,
                 0,
                 [0, pld_mutable],
                 b,
                 a);
       },
       function(this$, l){return l;},
       function(this$, param){
        var
         pmb_loc = param[4],
         pmb_attributes = param[3],
         pmb_expr = param[2],
         pmb_name = param[1],
         a = caml_call2(this$[27], this$, pmb_expr),
         b = map_loc(this$, pmb_name),
         c = [0, caml_call2(this$[2], this$, pmb_attributes)];
        return mk$15
                ([0, caml_call2(this$[23], this$, pmb_loc)], c, 0, 0, b, a);
       },
       function(this$, param){
        var
         pmd_loc = param[4],
         pmd_attributes = param[3],
         pmd_type = param[2],
         pmd_name = param[1],
         a = caml_call2(this$[28], this$, pmd_type),
         b = map_loc(this$, pmd_name),
         c = [0, caml_call2(this$[2], this$, pmd_attributes)];
        return mk$12
                ([0, caml_call2(this$[23], this$, pmd_loc)], c, 0, 0, b, a);
       },
       function(this$, param){
        var
         pms_loc = param[4],
         pms_attributes = param[3],
         pms_manifest = param[2],
         pms_name = param[1],
         a = map_loc(this$, pms_manifest),
         b = map_loc(this$, pms_name),
         c = [0, caml_call2(this$[2], this$, pms_attributes)];
        return mk$13
                ([0, caml_call2(this$[23], this$, pms_loc)], c, 0, 0, b, a);
       },
       map$4,
       map$3,
       function(this$, param){
        var
         pmtd_loc = param[4],
         pmtd_attributes = param[3],
         pmtd_type = param[2],
         pmtd_name = param[1],
         a = map_loc(this$, pmtd_name),
         b = map_opt(caml_call1(this$[28], this$), pmtd_type),
         c = [0, caml_call2(this$[2], this$, pmtd_attributes)];
        return mk$14
                ([0, caml_call2(this$[23], this$, pmtd_loc)], c, 0, 0, b, a);
       },
       function(this$, param){
        var
         popen_attributes = param[4],
         popen_loc = param[3],
         popen_override = param[2],
         popen_expr = param[1],
         a = caml_call2(this$[27], this$, popen_expr),
         b = [0, caml_call2(this$[2], this$, popen_attributes)];
        return mk$16
                ([0, caml_call2(this$[23], this$, popen_loc)],
                 b,
                 0,
                 [0, popen_override],
                 a);
       },
       function(this$, param){
        var
         popen_attributes = param[4],
         popen_loc = param[3],
         popen_override = param[2],
         popen_expr = param[1],
         a = map_loc(this$, popen_expr),
         b = [0, caml_call2(this$[2], this$, popen_attributes)];
        return mk$16
                ([0, caml_call2(this$[23], this$, popen_loc)],
                 b,
                 0,
                 [0, popen_override],
                 a);
       },
       map$6,
       function(this$, param){
        switch(param[0]){
          case 0:
           var x = param[1]; return [0, caml_call2(this$[36], this$, x)];
          case 1:
           var x$0 = param[1]; return [1, caml_call2(this$[34], this$, x$0)];
          case 2:
           var x$1 = param[1]; return [2, caml_call2(this$[38], this$, x$1)];
          default:
           var
            g = param[2],
            x$2 = param[1],
            a = map_opt(caml_call1(this$[17], this$), g);
           return [3, caml_call2(this$[32], this$, x$2), a];
        }
       },
       function(this$, l){
        var a = caml_call1(this$[35], this$);
        return Stdlib_List[19].call(null, a, l);
       },
       map_signature_item,
       function(this$, l){
        var a = caml_call1(this$[37], this$);
        return Stdlib_List[19].call(null, a, l);
       },
       map_structure_item,
       map$1,
       map_type_declaration,
       map_type_extension,
       map_type_exception,
       map_type_kind,
       function(this$, param){
        var
         pvb_loc = param[4],
         pvb_attributes = param[3],
         pvb_expr = param[2],
         pvb_pat = param[1],
         a = caml_call2(this$[17], this$, pvb_expr),
         b = caml_call2(this$[32], this$, pvb_pat),
         c = [0, caml_call2(this$[2], this$, pvb_attributes)];
        return mk$18
                ([0, caml_call2(this$[23], this$, pvb_loc)], c, 0, 0, b, a);
       },
       function(this$, param){
        var
         pval_loc = param[5],
         pval_attributes = param[4],
         pval_prim = param[3],
         pval_type = param[2],
         pval_name = param[1],
         a = caml_call2(this$[38], this$, pval_type),
         b = map_loc(this$, pval_name),
         c = [0, caml_call2(this$[2], this$, pval_attributes)];
        return mk$11
                ([0, caml_call2(this$[23], this$, pval_loc)],
                 c,
                 0,
                 [0, pval_prim],
                 b,
                 a);
       },
       map_with_constraint];
   function extension_of_error(param){
    var sub = param[3], main = param[2], kind = param[1];
    if(0 !== kind)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_extension_of_error_expecte], 1);
    function str_of_pp(pp_msg){
     return caml_call1(Stdlib_Format[133].call(null, ev), pp_msg);
    }
    var
     a =
       Stdlib_List[19].call
        (null,
         function(msg){
          var
           a = msg[2],
           c = [2, str_of_pp(msg[1]), a, 0],
           d = [0, [0, eval$(0, 0, caml_call3(b[4], 0, 0, c)), 0]];
          return extension$6(0, 0, [0, [0, cst_ocaml_error, msg[2]], d]);
         },
         sub),
     c = main[2],
     d = [2, str_of_pp(main[1]), c, 0],
     e = [0, [0, eval$(0, 0, caml_call3(b[4], 0, 0, d)), a]];
    return [0, [0, cst_ocaml_error$0, main[2]], e];
   }
   function attribute_of_warning(loc, s){
    return mk
            (0,
             [0, cst_ocaml_ppwarning, loc],
             [0,
              [0,
               eval$([0, loc], 0, caml_call3(b[4], 0, 0, [2, s, loc, 0])),
               0]]);
   }
   var cookies = [0, a[4][69][1]];
   function get_cookie(k){
    try{var b = [0, caml_call2(a[4][69][28], k, cookies[1])]; return b;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function set_cookie(k, v){
    cookies[1] = caml_call3(a[4][69][4], k, v, cookies[1]);
    return 0;
   }
   var tool_name_ref = [0, cst_none$2];
   function tool_name(param){return tool_name_ref[1];}
   function lid(name){return [0, [0, name], none];}
   function make_string(s){
    var a = caml_call3(w[2], 0, 0, s);
    return caml_call3(b[4], 0, 0, a);
   }
   function make_bool(x){
    if(x){var a = lid(cst_true); return caml_call4(b[12], 0, 0, a, 0);}
    var c = lid(cst_false);
    return caml_call4(b[12], 0, 0, c, 0);
   }
   function make_list(f, lst){
    if(lst){
     var
      rest = lst[2],
      x = lst[1],
      a = [0, make_list(f, rest), 0],
      c = [0, caml_call1(f, x), a],
      d = [0, caml_call3(b[11], 0, 0, c)],
      e = lid(cst$64);
     return caml_call4(b[12], 0, 0, e, d);
    }
    var g = lid(cst$65);
    return caml_call4(b[12], 0, 0, g, 0);
   }
   function get_cookies(param){
    var
     c =
       make_list
        (function(param){
          var
           x2 = param[2],
           x1 = param[1],
           a = [0, make_string(x1), [0, x2, 0]];
          return caml_call3(b[11], 0, 0, a);
         },
         caml_call1(a[4][69][20], cookies[1]));
    return [0, lid(cst_cookies), c];
   }
   function mk$26(fields){
    return [0,
            [0, cst_ocaml_ppx_context, none],
            [0, [0, eval$(0, 0, caml_call4(b[14], 0, 0, fields, 0)), 0]],
            none];
   }
   function ppx_context(tool_name, param){
    var
     f = [0, get_cookies(0), 0],
     g = make_bool(unsafe_string[1]),
     h = [0, [0, lid(cst_unsafe_string), g], f],
     i = make_bool(unboxed_types[1]),
     j = [0, [0, lid(cst_unboxed_types), i], h],
     k = make_bool(transparent_modules[1]),
     l = [0, [0, lid(cst_transparent_modules), k], j],
     m = make_bool(principal[1]),
     n = [0, [0, lid(cst_principal), m], l],
     o = make_bool(recursive_types[1]),
     p = [0, [0, lid(cst_recursive_types), o], n],
     q = make_bool(0),
     r = [0, [0, lid(cst_use_vmthreads), q], p],
     s = make_bool(use_threads[1]),
     t = [0, [0, lid(cst_use_threads), s], r],
     u = make_bool(debug[1]),
     v = [0, [0, lid(cst_debug), u], t],
     opt = for_package[1];
    if(opt)
     var
      x = opt[1],
      c = [0, make_string(x)],
      d = lid(cst_Some),
      a = caml_call4(b[12], 0, 0, d, c);
    else
     var e = lid(cst_None$0), a = caml_call4(b[12], 0, 0, e, 0);
    var
     w = [0, [0, lid(cst_for_package), a], v],
     y = make_list(make_string, open_modules[1]),
     z = [0, [0, lid(cst_open_modules), y], w],
     A = make_list(make_string, get_paths(0)),
     B = [0, [0, lid(cst_load_path), A], z],
     C = make_list(make_string, include_dirs[1]),
     D = [0, [0, lid(cst_include_dirs), C], B],
     E = make_string(tool_name),
     fields = [0, [0, lid(cst_tool_name), E], D];
    return mk$26(fields);
   }
   function get_fields(param){
    if(0 === param[0]){
     var b = param[1];
     if(b){
      var c = b[1][1];
      if(0 === c[0]){
       var a = c[1][1];
       if(typeof a !== "number" && 11 === a[0] && ! a[2] && ! c[2] && ! b[2]){var fields = a[1]; return fields;}
      }
     }
    }
    return raise_errorf(0, 0)(ew);
   }
   function restore$0(fields){
    return Stdlib_List[17].call
            (null,
             function(param){
              var match$0 = param[1][1];
              if(0 !== match$0[0]) return 0;
              var payload = param[2], name = match$0[1];
              function get_string(param){
               var a = param[1];
               if(typeof a !== "number" && 1 === a[0]){
                var b = a[1];
                if(2 === b[0] && ! b[3]){var str = b[1]; return str;}
               }
               return caml_call1(raise_errorf(0, 0)(ex), name);
              }
              function get_bool(pexp){
               var a = pexp[1];
               if(typeof a !== "number" && 9 === a[0]){
                var b = a[1][1];
                if(0 === b[0]){
                 var c = b[1];
                 if(c !== cst_false$1){
                  if(c === cst_true$1 && ! a[2]) return 1;
                 }
                 else if(! a[2]) return 0;
                }
               }
               return caml_call1(raise_errorf(0, 0)(ey), name);
              }
              function get_list(elem, param){
               var a = param[1];
               if(typeof a !== "number" && 9 === a[0]){
                var e = a[1][1];
                if(0 === e[0]){
                 var f = e[1];
                 if(f !== cst$135){
                  if(f === cst$136 && ! a[2]) return 0;
                 }
                 else{
                  var g = a[2];
                  if(g){
                   var b = g[1][1];
                   if(typeof b !== "number" && 8 === b[0]){
                    var c = b[1];
                    if(c){
                     var d = c[2];
                     if(d && ! d[2]){
                      var rest = d[1], exp = c[1], h = get_list(elem, rest);
                      return [0, caml_call1(elem, exp), h];
                     }
                    }
                   }
                  }
                 }
                }
               }
               return caml_call1(raise_errorf(0, 0)(ez), name);
              }
              var switch$ = caml_string_compare(name, cst_recursive_types$0);
              if(0 <= switch$){
               if(0 >= switch$){
                recursive_types[1] = get_bool(payload);
                return 0;
               }
               if(name === cst_tool_name$0){
                tool_name_ref[1] = get_string(payload);
                return 0;
               }
               if(name === cst_transparent_modules$0){
                transparent_modules[1] = get_bool(payload);
                return 0;
               }
               if(name === cst_unboxed_types$0){
                unboxed_types[1] = get_bool(payload);
                return 0;
               }
               if(name === cst_unsafe_string$0){
                unsafe_string[1] = get_bool(payload);
                return 0;
               }
               if(name === cst_use_threads$0){
                use_threads[1] = get_bool(payload);
                return 0;
               }
               if(name === cst_use_vmthreads$0){
                var f = get_bool(payload);
                return f ? raise_errorf(0, 0)(eC) : f;
               }
              }
              else{
               if(name === cst_cookies$0){
                var
                 l =
                   get_list
                    (function(param){
                      var a = param[1];
                      if(typeof a !== "number" && 8 === a[0]){
                       var b = a[1];
                       if(b){
                        var c = b[2];
                        if(c && ! c[2]){
                         var e2 = c[1], e1 = b[1];
                         return [0, get_string(e1), e2];
                        }
                       }
                      }
                      return caml_call1(raise_errorf(0, 0)(eA), name);
                     },
                     payload);
                cookies[1] =
                 Stdlib_List[25].call
                  (null,
                   function(s, param){
                    var v = param[2], k = param[1];
                    return caml_call3(a[4][69][4], k, v, s);
                   },
                   a[4][69][1],
                   l);
                return 0;
               }
               if(name === cst_debug$0){
                debug[1] = get_bool(payload);
                return 0;
               }
               if(name === cst_for_package$0){
                var b = payload[1];
                a:
                {
                 if(typeof b !== "number" && 9 === b[0]){
                  var d = b[1][1];
                  if(0 === d[0]){
                   var e = d[1];
                   if(e !== cst_None$2){
                    if(e === cst_Some$1){
                     var match = b[2];
                     if(match){
                      var exp = match[1], c = [0, get_string(exp)];
                      break a;
                     }
                    }
                   }
                   else if(! b[2]){var c = 0; break a;}
                  }
                 }
                 var c = caml_call1(raise_errorf(0, 0)(eB), name);
                }
                for_package[1] = c;
                return 0;
               }
               if(name === cst_include_dirs$0){
                include_dirs[1] = get_list(get_string, payload);
                return 0;
               }
               if(name === cst_load_path$0)
                return init$1(get_list(get_string, payload));
               if(name === cst_open_modules$0){
                open_modules[1] = get_list(get_string, payload);
                return 0;
               }
               if(name === cst_principal$0){
                principal[1] = get_bool(payload);
                return 0;
               }
              }
              return 0;
             },
             fields);
   }
   function update_cookies(fields){
    var
     fields$0 =
       Stdlib_List[41].call
         (null,
          function(param){
           var a = param[1][1];
           if(0 === a[0] && a[1] === cst_cookies$0) return 0;
           return 1;
          })
        (fields),
     a = [0, get_cookies(0), 0];
    return Stdlib[37].call(null, fields$0, a);
   }
   function extension_of_exn(exn){
    var match = error_of_exn(exn);
    if(! match) throw caml_maybe_attach_backtrace(exn, 1);
    var match$0 = match[1];
    if(typeof match$0 === "number")
     return [0, [0, cst_ocaml_error$1, none], eD];
    var error = match$0[2];
    return extension_of_error(error);
   }
   function apply_lazy(source, target, mapper){
    function implem(ast){
     a:
     {
      if(ast){
       var a = ast[1][1];
       if(13 === a[0]){
        var b = a[1];
        if(b[1][1] === cst_ocaml_ppx_context$0){
         var l = ast[2], x = b[2], ast$0 = l, fields = get_fields(x);
         break a;
        }
       }
      }
      var ast$0 = ast, fields = 0;
     }
     restore$0(fields);
     try{
      var
       mapper$0 = caml_call1(mapper, 0),
       c = caml_call2(mapper$0[36], mapper$0, ast$0),
       ast$1 = c;
     }
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       ast$1 = [0, [0, [14, extension_of_exn(exn), 0], none], 0];
     }
     var fields$0 = update_cookies(fields);
     return [0, attribute$0(0, mk$26(fields$0)), ast$1];
    }
    function iface(ast){
     a:
     {
      if(ast){
       var a = ast[1][1];
       if(14 === a[0]){
        var b = a[1];
        if(b[1][1] === cst_ocaml_ppx_context$0){
         var l = ast[2], x = b[2], ast$0 = l, fields = get_fields(x);
         break a;
        }
       }
      }
      var ast$0 = ast, fields = 0;
     }
     restore$0(fields);
     try{
      var
       mapper$0 = caml_call1(mapper, 0),
       c = caml_call2(mapper$0[34], mapper$0, ast$0),
       ast$1 = c;
     }
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       ast$1 = [0, [0, [15, extension_of_exn(exn), 0], none], 0];
     }
     var fields$0 = update_cookies(fields);
     return [0, attribute(0, mk$26(fields$0)), ast$1];
    }
    var
     ic = Stdlib[80].call(null, source),
     magic =
       Stdlib[86].call
        (null, ic, caml_ml_string_length(Dynlink_compilerlibs_Config[30]));
    function rewrite(transform){
     input_name[1] = Stdlib[89].call(null, ic);
     var ast = Stdlib[89].call(null, ic);
     Stdlib[93].call(null, ic);
     var
      ast$0 = caml_call1(transform, ast),
      oc = Stdlib[61].call(null, target);
     Stdlib[66].call(null, oc, magic);
     Stdlib[72].call(null, oc, input_name[1]);
     Stdlib[72].call(null, oc, ast$0);
     return Stdlib[76].call(null, oc);
    }
    return magic === Dynlink_compilerlibs_Config[30]
            ? rewrite(implem)
            : magic
              === Dynlink_compilerlibs_Config[29]
              ? rewrite(iface)
              : (Stdlib
                  [93].call
                 (null, ic),
                Stdlib[2].call(null, cst_Ast_mapper_OCaml_version_m));
   }
   function drop_ppx_context_str(restore, items){
    if(items){
     var b = items[1][1];
     if(13 === b[0]){
      var c = b[1];
      if(c[1][1] === cst_ocaml_ppx_context$0){
       var items$0 = items[2], a = c[2];
       if(restore) restore$0(get_fields(a));
       return items$0;
      }
     }
    }
    return items;
   }
   function drop_ppx_context_sig(restore, items){
    if(items){
     var b = items[1][1];
     if(14 === b[0]){
      var c = b[1];
      if(c[1][1] === cst_ocaml_ppx_context$0){
       var items$0 = items[2], a = c[2];
       if(restore) restore$0(get_fields(a));
       return items$0;
      }
     }
    }
    return items;
   }
   function add_ppx_context_str(tool_name, ast){
    return [0, attribute$0(0, ppx_context(tool_name, 0)), ast];
   }
   function add_ppx_context_sig(tool_name, ast){
    return [0, attribute(0, ppx_context(tool_name, 0)), ast];
   }
   function apply$2(source, target, mapper){
    return apply_lazy(source, target, function(param){return mapper;});
   }
   function run_main(mapper){
    try{
     var a = runtime.caml_sys_argv(0), n = a.length - 1;
     if(2 < n)
      var
       mapper$0 =
         function(param){
          try{
           var
            b = Stdlib_Array[7].call(null, a, 1, n - 3 | 0),
            c = caml_call1(mapper, Stdlib_Array[11].call(null, b));
           return c;
          }
          catch(exn$0){
           var
            exn = caml_wrap_exception(exn$0),
            f = function(param, a){throw caml_maybe_attach_backtrace(exn, 0);};
           return [0,
                   default_mapper[1],
                   default_mapper[2],
                   default_mapper[3],
                   default_mapper[4],
                   default_mapper[5],
                   default_mapper[6],
                   default_mapper[7],
                   default_mapper[8],
                   default_mapper[9],
                   default_mapper[10],
                   default_mapper[11],
                   default_mapper[12],
                   default_mapper[13],
                   default_mapper[14],
                   default_mapper[15],
                   default_mapper[16],
                   default_mapper[17],
                   default_mapper[18],
                   default_mapper[19],
                   default_mapper[20],
                   default_mapper[21],
                   default_mapper[22],
                   default_mapper[23],
                   default_mapper[24],
                   default_mapper[25],
                   default_mapper[26],
                   default_mapper[27],
                   default_mapper[28],
                   default_mapper[29],
                   default_mapper[30],
                   default_mapper[31],
                   default_mapper[32],
                   default_mapper[33],
                   f,
                   default_mapper[35],
                   f,
                   default_mapper[37],
                   default_mapper[38],
                   default_mapper[39],
                   default_mapper[40],
                   default_mapper[41],
                   default_mapper[42],
                   default_mapper[43],
                   default_mapper[44],
                   default_mapper[45]];
          }
         },
       b = n - 1 | 0,
       c = n - 2 | 0,
       f = caml_check_bound(a, b)[b + 1],
       d = apply_lazy(caml_check_bound(a, c)[c + 1], f, mapper$0);
     else{
      var g = Stdlib_Sys[1];
      caml_call1(Stdlib_Printf[3].call(null, eE), g);
      var d = Stdlib[99].call(null, 2);
     }
     return d;
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      e = Stdlib_Printexc[1].call(null, exn);
     Stdlib[53].call(null, e);
     return Stdlib[99].call(null, 2);
    }
   }
   var register_function = [0, function(name, f){return run_main(f);}];
   function register$0(name, f){
    return caml_call2(register_function[1], name, f);
   }
   var
    Dynlink_compilerlibs_Ast_mappe =
      [0,
       default_mapper,
       tool_name,
       apply$2,
       run_main,
       register_function,
       register$0,
       map_opt,
       extension_of_error,
       attribute_of_warning,
       add_ppx_context_str,
       add_ppx_context_sig,
       drop_ppx_context_str,
       drop_ppx_context_sig,
       set_cookie,
       get_cookie];
   caml_register_global
    (1300, Dynlink_compilerlibs_Ast_mappe, "Dynlink_compilerlibs.Ast_mapper");
   var Error$2 = [248, cst_Dynlink_compilerlibs_Attr_, caml_fresh_oo_id(0)];
   function get_no_payload_attribute(alt_names, attrs){
    var
     match =
       Stdlib_List[41].call
         (null,
          function(a){return Stdlib_List[36].call(null, a[1][1], alt_names);})
        (attrs);
    if(! match) return 0;
    var a = match[1], b = a[2], name = a[1];
    if(0 === b[0] && ! b[1] && ! match[2]) return [0, name];
    var match$0 = match[2];
    if(! match$0)
     throw caml_maybe_attach_backtrace([0, Error$2, name[2], [1, name[1]]], 1);
    var name$0 = match$0[1][1];
    throw caml_maybe_attach_backtrace
           ([0, Error$2, name$0[2], [0, name$0[1]]], 1);
   }
   function has_no_payload_attribute(alt_names, attrs){
    return get_no_payload_attribute(alt_names, attrs) ? 1 : 0;
   }
   function report_error(ppf, param){
    if(0 === param[0]){
     var name = param[1];
     return caml_call1(Stdlib_Format[129].call(null, ppf)(eF), name);
    }
    var name$0 = param[1];
    return caml_call1(Stdlib_Format[129].call(null, ppf)(eG), name$0);
   }
   register_error_of_exn
    (function(param){
      var tag = param[1];
      if(tag !== Error$2) return 0;
      var err = param[3], loc = param[2];
      return [0, error_of_printer([0, loc], 0, report_error, err)];
     });
   var
    Dynlink_compilerlibs_Attr_help =
      [0,
       get_no_payload_attribute,
       has_no_payload_attribute,
       Error$2,
       report_error];
   caml_register_global
    (1301, Dynlink_compilerlibs_Attr_help, "Dynlink_compilerlibs.Attr_helper");
   function string_of_payload(param){
    if(0 === param[0]){
     var a = param[1];
     if(a){
      var d = a[1][1];
      if(0 === d[0]){
       var b = d[1][1];
       if(typeof b !== "number" && 1 === b[0] && ! a[2]){
        var c = b[1];
        if(2 !== c[0]) return 0;
        var s = c[1];
        return [0, s];
       }
      }
     }
    }
    return 0;
   }
   function string_of_opt_payload(p){
    var match = string_of_payload(p);
    if(! match) return cst$66;
    var s = match[1];
    return s;
   }
   function error_of_extension(ext){
    var match = ext[1], main_txt = match[1];
    if(main_txt !== cst_error$1 && main_txt !== cst_ocaml_error$2){
     var loc = match[2];
     return caml_call1(errorf$0([0, loc], 0)(eK), main_txt);
    }
    var p = ext[2], main_loc = match[2];
    if(0 === p[0]){
     var match$0 = p[1];
     if(! match$0)
      throw caml_maybe_attach_backtrace(Already_displayed_error, 1);
     var b = match$0[1][1];
     if(0 === b[0]){
      var a = b[1][1];
      if(typeof a !== "number" && 1 === a[0]){
       var match$1 = a[1];
       if(2 === match$1[0]){
        var
         inner = match$0[2],
         msg = match$1[1],
         sub =
           Stdlib_List[19].call
            (null,
             function(param){
              var c = param[1];
              if(14 !== c[0])
               return [0,
                       function(ppf){
                        return caml_call1
                                (Stdlib_Format[129].call(null, ppf)(eH), main_txt);
                       },
                       main_loc];
              var d = c[1], match = d[1], txt = match[1];
              if(txt !== cst_error$1 && txt !== cst_ocaml_error$2){
               var loc = match[2];
               return [0,
                       function(ppf){
                        return caml_call1
                                (Stdlib_Format[129].call(null, ppf)(eI), txt);
                       },
                       loc];
              }
              var p = d[2], loc$0 = match[2];
              if(0 === p[0]){
               var a = p[1];
               if(a){
                var e = a[1][1];
                if(0 === e[0]){
                 var b = e[1][1];
                 if(typeof b !== "number" && 1 === b[0]){
                  var f = b[1];
                  if(2 === f[0] && ! a[2]){
                   var msg = f[1];
                   return [0,
                           function(ppf){
                            return Stdlib_Format[125].call(null, ppf, msg);
                           },
                           loc$0];
                  }
                 }
                }
               }
              }
              return [0,
                      function(ppf){
                       return caml_call1
                               (Stdlib_Format[129].call(null, ppf)(eJ), main_txt);
                      },
                      loc$0];
             },
             inner);
        return error_of_printer
                ([0, main_loc], [0, sub], Stdlib_Format[125], msg);
       }
      }
     }
    }
    return caml_call1(errorf$0([0, main_loc], 0)(eL), main_txt);
   }
   function kind_and_message(param){
    if(0 === param[0]){
     var b = param[1];
     if(b){
      var f = b[1][1];
      if(0 === f[0]){
       var a = f[1][1];
       if(typeof a !== "number")
        switch(a[0]){
          case 0:
           var g = a[1][1];
           if(0 === g[0] && ! b[2]){
            var id = g[1];
            return [0, [0, id, cst$67]];
           }
           break;
          case 5:
           var c = a[1][1];
           if(typeof c !== "number" && 0 === c[0]){
            var h = c[1][1];
            if(0 === h[0]){
             var d = a[2];
             if(d){
              var i = d[1];
              if(typeof i[1] === "number"){
               var e = i[2][1];
               if(typeof e !== "number" && 1 === e[0]){
                var j = e[1];
                if(2 === j[0] && ! d[2] && ! b[2]){
                 var s = j[1], id$0 = h[1];
                 return [0, [0, id$0, s]];
                }
               }
              }
             }
            }
           }
           break;
        }
      }
     }
    }
    return 0;
   }
   function cat$0(s1, s2){
    if(s2 === cst$115) return s1;
    var a = Stdlib[28].call(null, cst$68, s2);
    return Stdlib[28].call(null, s1, a);
   }
   function alert_attr(x){
    var match = x[1][1];
    a:
    if(match !== cst_alert){
     if(match !== cst_deprecated$5){
      if(match === cst_ocaml_alert) break a;
      if(match !== "ocaml.deprecated") return 0;
     }
     return [0, [0, x, cst_deprecated$4, string_of_opt_payload(x[2])]];
    }
    var match$0 = kind_and_message(x[2]);
    if(! match$0) return 0;
    var match$1 = match$0[1], message = match$1[2], kind = match$1[1];
    return [0, [0, x, kind, message]];
   }
   function alert_attrs(l){return Stdlib_List[22].call(null, alert_attr)(l);}
   function alerts_of_attrs(l){
    var b = alert_attrs(l);
    return Stdlib_List[25].call
            (null,
             function(acc, param){
              var message = param[3], kind = param[2];
              function upd(param){
               if(param){
                var s = param[1];
                if(s !== cst$115) return [0, cat$0(s, message)];
               }
               return [0, message];
              }
              return caml_call3(a[4][69][5], kind, upd, acc);
             },
             a[4][69][1],
             b);
   }
   function check_alerts(loc, attrs, s){
    var b = alerts_of_attrs(attrs);
    return caml_call2
            (a[4][69][12],
             function(kind, message){
              return alert(0, 0, kind, loc, cat$0(s, message));
             },
             b);
   }
   function check_alerts_inclusion(def, use, loc, attrs1, attrs2, s){
    var m2 = alerts_of_attrs(attrs2), b = alerts_of_attrs(attrs1);
    return caml_call2
            (a[4][69][12],
             function(kind, msg){
              var b = 1 - caml_call2(a[4][69][3], kind, m2);
              return b
                      ? alert([0, def], [0, use], kind, loc, cat$0(s, msg))
                      : b;
             },
             b);
   }
   function deprecated_mutable_of_attrs(param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var match = param[1], a = match[1][1];
     if(a !== "deprecated_mutable" && a !== "ocaml.deprecated_mutable"){var tl = param[2]; param = tl; continue;}
     var p = match[2];
     return [0, string_of_opt_payload(p)];
    }
   }
   function check_deprecated_mutable(loc, attrs, s){
    var match = deprecated_mutable_of_attrs(attrs);
    if(! match) return 0;
    var
     txt = match[1],
     a = cat$0(s, txt),
     message = caml_call1(Stdlib_Printf[4].call(null, eM), a);
    return alert(0, 0, cst_deprecated$3, loc, message);
   }
   function check_deprecated_mutable_inclu(def, use, loc, attrs1, attrs2, s){
    var
     match = deprecated_mutable_of_attrs(attrs1),
     match$0 = deprecated_mutable_of_attrs(attrs2);
    if(match && ! match$0){
     var
      txt = match[1],
      a = cat$0(s, txt),
      message = caml_call1(Stdlib_Printf[4].call(null, eN), a),
      use$0 = [0, use],
      def$0 = [0, def];
     return alert(def$0, use$0, cst_deprecated$3, loc, message);
    }
    return 0;
   }
   function attrs_of_sig(param){
    if(param){
     var match = param[1][1];
     if(14 === match[0]){
      var tl = param[2], a = match[1];
      return [0, a, attrs_of_sig(tl)];
     }
    }
    return 0;
   }
   function alerts_of_sig(sg){return alerts_of_attrs(attrs_of_sig(sg));}
   function attrs_of_str(param){
    if(param){
     var match = param[1][1];
     if(13 === match[0]){
      var tl = param[2], a = match[1];
      return [0, a, attrs_of_str(tl)];
     }
    }
    return 0;
   }
   function alerts_of_str(str){return alerts_of_attrs(attrs_of_str(str));}
   function check_no_alert(attrs){
    var a = alert_attrs(attrs);
    return Stdlib_List[17].call
            (null,
             function(param){
              var a = param[1];
              return prerr_warning(a[3], [35, a[1][1]]);
             },
             a);
   }
   function warn_payload(loc, txt, msg){
    return prerr_warning(loc, [30, txt, msg]);
   }
   function warning_attribute(opt){
    if(opt) var sth = opt[1], ppwarning = sth; else var ppwarning = 1;
    function process(loc, txt, errflag, payload){
     var match = string_of_payload(payload);
     if(! match)
      return warn_payload(loc, txt, cst_A_single_string_literal_is);
     var s = match[1];
     try{
      var
       a = parse_options(errflag, s),
       b =
         Stdlib_Option[9].call
          (null, function(a){return prerr_alert(loc, a);}, a);
      return b;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0), tag = exn[1];
      if(tag !== Stdlib_Arg[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var msg = exn[2];
      return warn_payload(loc, txt, msg);
     }
    }
    return function(param){
     var txt = param[1][1];
     if(txt !== cst_alert && txt !== cst_ocaml_alert){
      a:
      {
       b:
       if(txt !== cst_ocaml_ppwarning$0){
        c:
        if(txt !== "ocaml.warnerror"){
         if(txt !== "ocaml.warning"){
          if(txt === "ppwarning") break b;
          if(txt === "warnerror") break c;
          if(txt !== cst_warning$1) break a;
         }
         var attr_loc = param[3], attr_payload = param[2];
         return process(attr_loc, txt, 0, attr_payload);
        }
        var attr_loc$0 = param[3], attr_payload$0 = param[2];
        return process(attr_loc$0, txt, 1, attr_payload$0);
       }
       var g = param[2];
       if(0 === g[0]){
        var c = g[1];
        if(c){
         var h = c[1], i = h[1];
         if(0 === i[0]){
          var d = i[1][1];
          if(typeof d !== "number" && 1 === d[0]){
           var j = d[1];
           if(2 === j[0] && ! c[2]){
            var pstr_loc = h[2], s$0 = j[1];
            if(ppwarning) return prerr_warning(pstr_loc, [10, s$0]);
           }
          }
         }
        }
       }
      }
      return 0;
     }
     var attr_loc$1 = param[3], attr_payload$1 = param[2];
     if(0 === attr_payload$1[0]){
      var a = attr_payload$1[1];
      if(a){
       var e = a[1][1];
       if(0 === e[0]){
        var b = e[1][1];
        if(typeof b !== "number" && 1 === b[0]){
         var f = b[1];
         if(2 === f[0] && ! a[2]){
          var s = f[1];
          try{var k = parse_alert_option(s); return k;}
          catch(exn$0){
           var exn = caml_wrap_exception(exn$0), tag = exn[1];
           if(tag !== Stdlib_Arg[8])
            throw caml_maybe_attach_backtrace(exn, 0);
           var msg = exn[2];
           return warn_payload(attr_loc$1, txt, msg);
          }
         }
        }
       }
      }
     }
     var match = kind_and_message(attr_payload$1);
     return match
             ? match
                 [1]
                [1]
               !== cst_all
               ? 0
               : warn_payload(attr_loc$1, txt, cst_The_alert_name_all_is_rese)
             : warn_payload(attr_loc$1, txt, cst_Invalid_payload);};
   }
   function warning_scope(ppwarning, attrs, f){
    var prev = current[1];
    try{
     var
      a = Stdlib_List[9].call(null, attrs),
      b = warning_attribute(ppwarning);
     Stdlib_List[17].call(null, b, a);
     var ret = caml_call1(f, 0);
     restore(prev);
     return ret;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     restore(prev);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function eO(a){
    var match = a[1][1];
    if
     (match !== cst_ocaml_warn_on_literal_patt
      && match !== "warn_on_literal_pattern")
     return 0;
    return 1;
   }
   var eP = Stdlib_List[33];
   function warn_on_literal_pattern(a){return eP(eO, a);}
   function eQ(a){
    var match = a[1][1];
    if(match !== "explicit_arity" && match !== "ocaml.explicit_arity")
     return 0;
    return 1;
   }
   var eR = Stdlib_List[33];
   function explicit_arity(a){return eR(eQ, a);}
   function F(a){
    var match = a[1][1];
    if(match !== "immediate" && match !== "ocaml.immediate") return 0;
    return 1;
   }
   var G = Stdlib_List[33];
   function immediate(a){return G(F, a);}
   function H(a){
    var match = a[1][1];
    if(match !== "immediate64" && match !== "ocaml.immediate64") return 0;
    return 1;
   }
   var I = Stdlib_List[33];
   function immediate64(a){return I(H, a);}
   function check(l, a){return Stdlib_List[36].call(null, a[1][1], l);}
   function has_unboxed(attr){
    return Stdlib_List[33].call(null, function(a){return check(eS, a);}, attr);
   }
   function has_boxed(attr){
    return Stdlib_List[33].call(null, function(a){return check(eT, a);}, attr);
   }
   var
    Dynlink_compilerlibs_Builtin_a =
      [0,
       check_alerts,
       check_alerts_inclusion,
       alerts_of_attrs,
       alerts_of_sig,
       alerts_of_str,
       check_deprecated_mutable,
       check_deprecated_mutable_inclu,
       check_no_alert,
       error_of_extension,
       warning_attribute,
       warning_scope,
       warn_on_literal_pattern,
       explicit_arity,
       immediate,
       immediate64,
       has_unboxed,
       has_boxed];
   caml_register_global
    (1302,
     Dynlink_compilerlibs_Builtin_a,
     "Dynlink_compilerlibs.Builtin_attributes");
   var
    lowest_scope = 0,
    highest_scope = 100000000,
    currentstamp = s_ref(0),
    predefstamp = s_ref(0);
   function create_scoped(scope, s){
    currentstamp[1]++;
    return [1, s, currentstamp[1], scope];
   }
   function create_local(s){
    currentstamp[1]++;
    return [0, s, currentstamp[1]];
   }
   function create_predef(s){predefstamp[1]++; return [3, s, predefstamp[1]];}
   function create_persistent(s){return [2, s];}
   function name(param){var name = param[1]; return name;}
   function rename(id){
    if(id[0] < 2){
     var name = id[1];
     currentstamp[1]++;
     return [0, name, currentstamp[1]];
    }
    var name$0 = id[1];
    return caml_call1(fatal_errorf(eU), name$0);
   }
   function unique_name(param){
    switch(param[0]){
      case 2:
       var name$0 = param[1]; return Stdlib[28].call(null, name$0, cst_0$1);
      case 3:
       var name$1 = param[1]; return name$1;
      default:
       var
        stamp = param[2],
        name = param[1],
        a = Stdlib_Int[12].call(null, stamp),
        b = Stdlib[28].call(null, cst$69, a);
       return Stdlib[28].call(null, name, b);
    }
   }
   function unique_toplevel_name(param){
    if(param[0] < 2){
     var
      stamp = param[2],
      name = param[1],
      a = Stdlib_Int[12].call(null, stamp),
      b = Stdlib[28].call(null, cst$70, a);
     return Stdlib[28].call(null, name, b);
    }
    var name$0 = param[1];
    return name$0;
   }
   function persistent(param){return 2 === param[0] ? 1 : 0;}
   function original_equal(i1, i2){
    a:
    {
     switch(i1[0]){
       case 0:
        if(0 === i2[0]){var name2 = i2[1], name1 = i1[1]; break a;} break;
       case 1:
        if(1 === i2[0]){var name2 = i2[1], name1 = i1[1]; break a;} break;
       case 2:
        if(2 === i2[0]){var name2 = i2[1], name1 = i1[1]; break a;} break;
       default:
        if(3 === i2[0]){var s2 = i2[2], s1 = i1[2]; return s1 === s2 ? 1 : 0;}
     }
     return 0;
    }
    return name1 === name2 ? 1 : 0;
   }
   function same(i1, i2){
    a:
    {
     switch(i1[0]){
       case 0:
        if(0 === i2[0]){var s2 = i2[2], s1 = i1[2]; break a;} break;
       case 1:
        if(1 === i2[0]){var s2 = i2[2], s1 = i1[2]; break a;} break;
       case 2:
        if(2 === i2[0]){
         var name2 = i2[1], name1 = i1[1];
         return name1 === name2 ? 1 : 0;
        }
        break;
       default: if(3 === i2[0]){var s2 = i2[2], s1 = i1[2]; break a;}
     }
     return 0;
    }
    return s1 === s2 ? 1 : 0;
   }
   function scope(param){
    switch(param[0]){
      case 0:
       return highest_scope;
      case 1:
       var scope = param[3]; return scope;
      default: return lowest_scope;
    }
   }
   var reinit_level = [0, -1];
   function reinit(param){
    return 0 <= reinit_level[1]
            ? (currentstamp[1] = reinit_level[1], 0)
            : (reinit_level[1] = currentstamp[1], 0);
   }
   function global(param){return param[0] < 2 ? 0 : 1;}
   function is_predef(param){return 3 === param[0] ? 1 : 0;}
   function J(with_scope, ppf){
    return function(param){
     switch(param[0]){
       case 0:
        var
         n = param[2],
         name = param[1],
         a =
           unique_ids[1]
            ? caml_call1(Stdlib_Format[132].call(null, eV), n)
            : cst$71;
        return caml_call2(Stdlib_Format[129].call(null, ppf)(eW), name, a);
       case 1:
        var
         scope = param[3],
         n$0 = param[2],
         name$0 = param[1],
         b =
           with_scope
            ? caml_call1(Stdlib_Format[132].call(null, eX), scope)
            : cst$73,
         c =
           unique_ids[1]
            ? caml_call1(Stdlib_Format[132].call(null, eY), n$0)
            : cst$72;
        return caml_call3
                (Stdlib_Format[129].call(null, ppf)(eZ), name$0, c, b);
       case 2:
        var name$1 = param[1];
        return caml_call1(Stdlib_Format[129].call(null, ppf)(e0), name$1);
       default:
        var
         n$1 = param[2],
         name$2 = param[1],
         d =
           unique_ids[1]
            ? caml_call1(Stdlib_Format[132].call(null, e1), n$1)
            : cst$74;
        return caml_call2(Stdlib_Format[129].call(null, ppf)(e2), name$2, d);
     }};
   }
   function print_with_scope(ppf, id){return J(1, ppf)(id);}
   function print$6(ppf, id){return J(0, ppf)(id);}
   var empty$0 = 0;
   function mknode(l, d, r){
    if(l) var h = l[4], hl = h; else var hl = 0;
    if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
    var a = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
    return [0, l, d, r, a];
   }
   function balance(l, d, r){
    if(l) var h = l[4], hl = h; else var hl = 0;
    if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
    if((hr + 1 | 0) < hl){
     if(l){
      var lr = l[3], ld = l[2], ll = l[1];
      if(lr) var h$1 = lr[4], h$2 = h$1; else var h$2 = 0;
      if(ll) var h$3 = ll[4], h$4 = h$3; else var h$4 = 0;
      if(h$2 <= h$4) return mknode(ll, ld, mknode(lr, d, r));
      if(lr){
       var lrr = lr[3], lrd = lr[2], lrl = lr[1], a = mknode(lrr, d, r);
       return mknode(mknode(ll, ld, lrl), lrd, a);
      }
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, e3], 1);
    }
    if((hl + 1 | 0) >= hr) return mknode(l, d, r);
    if(r){
     var rl = r[1], rr = r[3], rd = r[2];
     if(rl) var h$5 = rl[4], h$6 = h$5; else var h$6 = 0;
     if(rr) var h$7 = rr[4], h$8 = h$7; else var h$8 = 0;
     if(h$6 <= h$8) return mknode(mknode(l, d, rl), rd, rr);
     if(rl){
      var
       rr$0 = r[3],
       rd$0 = r[2],
       rlr = rl[3],
       rld = rl[2],
       rll = rl[1],
       b = mknode(rlr, rd$0, rr$0);
      return mknode(mknode(l, d, rll), rld, b);
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, e4], 1);
   }
   function add$0(id, data, param){
    if(! param) return [0, 0, [0, id, data, 0], 0, 1];
    var
     h = param[4],
     r = param[3],
     k = param[2],
     l = param[1],
     name$0 = k[1][1],
     name = id[1],
     c = Stdlib_String[9].call(null, name, name$0);
    return 0 === c
            ? [0, l, [0, id, data, [0, k]], r, h]
            : 0
              <= c
              ? balance(l, k, add$0(id, data, r))
              : balance(add$0(id, data, l), k, r);
   }
   function remove_min_binding(param){
    if(! param) return Stdlib[1].call(null, cst_Map_remove_min_elt);
    var l = param[1];
    if(l){
     var r = param[3], d = param[2];
     return balance(remove_min_binding(l), d, r);
    }
    var r$0 = param[3];
    return r$0;
   }
   function remove(id, m){
    if(! m) return 0;
    var
     h = m[4],
     t2 = m[3],
     k = m[2],
     t1 = m[1],
     name$0 = k[1][1],
     name = id[1],
     c = Stdlib_String[9].call(null, name, name$0);
    if(0 !== c){
     if(0 <= c){
      var rr = remove(id, t2);
      return t2 === rr ? m : balance(t1, k, rr);
     }
     var ll = remove(id, t1);
     return t1 === ll ? m : balance(ll, k, t2);
    }
    var match = k[3];
    if(match){var k$0 = match[1]; return [0, t1, k$0, t2, h];}
    if(! t1) return t2;
    if(! t2) return t1;
    var param = t2;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param[1];
     if(! l){var d = param[2]; return balance(t1, d, remove_min_binding(t2));}
     param = l;
    }
   }
   function find_same(id, param$1){
    var param$0 = param$1;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var
      r = param$0[3],
      k$0 = param$0[2],
      l = param$0[1],
      name$0 = k$0[1][1],
      name = id[1],
      c = Stdlib_String[9].call(null, name, name$0);
     if(0 === c) break;
     param$0 = 0 <= c ? r : l;
    }
    if(same(id, k$0[1])) return k$0[2];
    var param = k$0[3];
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var k = param[1];
     if(same(id, k[1])) return k[2];
     param = k[3];
    }
   }
   function find_name(n, param$0){
    var param = param$0;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var
      r = param[3],
      k = param[2],
      l = param[1],
      name = k[1][1],
      c = Stdlib_String[9].call(null, n, name);
     if(0 === c) return [0, k[1], k[2]];
     param = 0 <= c ? r : l;
    }
   }
   function get_all(param){
    if(! param) return 0;
    var k = param[1], a = get_all(k[3]);
    return [0, [0, k[1], k[2]], a];
   }
   function find_all(n, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var
      r = param[3],
      k = param[2],
      l = param[1],
      name = k[1][1],
      c = Stdlib_String[9].call(null, n, name);
     if(0 === c){var a = get_all(k[3]); return [0, [0, k[1], k[2]], a];}
     param = 0 <= c ? r : l;
    }
   }
   function fold_aux(f, stack$2, accu$1, param$0){
    var stack = stack$2, accu = accu$1, param = param$0;
    for(;;)
     if(param){
      var
       r = param[3],
       k = param[2],
       l = param[1],
       accu$0 = caml_call2(f, k, accu),
       stack$0 = [0, l, stack];
      stack = stack$0;
      accu = accu$0;
      param = r;
     }
     else{
      if(! stack) return accu;
      var stack$1 = stack[2], a = stack[1];
      stack = stack$1;
      param = a;
     }
   }
   function fold_name(f, tbl, accu){
    return fold_aux
            (function(k){return caml_call2(f, k[1], k[2]);}, 0, accu, tbl);
   }
   function fold_data(f, d, accu){
    if(! d) return accu;
    var k = d[1], a = fold_data(f, k[3], accu);
    return caml_call3(f, k[1], k[2], a);
   }
   function fold_all(f, tbl, accu){
    return fold_aux
            (function(k){
              var a = [0, k];
              return function(b){return fold_data(f, a, b);};
             },
             0,
             accu,
             tbl);
   }
   function iter$0(f, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var r = param[3], k = param[2], l = param[1];
     iter$0(f, l);
     caml_call2(f, k[1], k[2]);
     param = r;
    }
   }
   function make_key_generator(param){
    var c = [0, 1];
    return function(global_id){
     if(global_id[0] < 2){
      var stamp = c[1];
      c[1]--;
      return [0, key_name, stamp];
     }
     var name = global_id[1];
     return caml_call1(fatal_errorf(e5), name);};
   }
   function compare$7(x, y){
    a:
    {
     switch(x[0]){
       case 0:
        if(0 !== y[0]) return 1;
        var c = x[2] - y[2] | 0;
        return 0 === c ? caml_string_compare(x[1], y[1]) : c;
       case 1:
        switch(y[0]){
          case 1:
           var c$0 = x[2] - y[2] | 0;
           return 0 === c$0 ? caml_string_compare(x[1], y[1]) : c$0;
          case 0:
           break a;
          default: return 1;
        }
       case 2:
        var x$0 = x[1];
        switch(y[0]){
          case 2:
           var y$0 = y[1]; return caml_string_compare(x$0, y$0);
          case 3:
           return 1;
          case 0:
           break a;
        }
        break;
       default:
        var s1 = x[2];
        switch(y[0]){
          case 2:
           return -1;
          case 3:
           var s2 = y[2]; return caml_int_compare(s1, s2);
          case 0:
           break a;
        }
     }
     return -1;
    }
    return -1;
   }
   function output$4(oc, id){
    var a = unique_name(id);
    return Stdlib[66].call(null, oc, a);
   }
   function hash$4(i){
    if(i[0] < 2) var stamp = i[2], a = stamp; else var a = 0;
    var name = i[1];
    return caml_string_get(name, 0) ^ a;
   }
   var
    include$4 = n([0, same, hash$4, compare$7, output$4, print$6]),
    T$1 = include$4[1],
    hash$5 = include$4[3],
    compare$8 = include$4[4],
    output$5 = include$4[5],
    print$7 = include$4[6],
    Set$2 = include$4[7],
    Map$2 = include$4[8],
    Tbl$2 = include$4[9],
    Dynlink_compilerlibs_Ident =
      [0,
       T$1,
       original_equal,
       hash$5,
       output$5,
       print$7,
       Set$2,
       Map$2,
       Tbl$2,
       print_with_scope,
       create_scoped,
       create_local,
       create_persistent,
       create_predef,
       rename,
       name,
       unique_name,
       unique_toplevel_name,
       persistent,
       same,
       compare$8,
       global,
       is_predef,
       scope,
       lowest_scope,
       highest_scope,
       reinit,
       empty$0,
       add$0,
       find_same,
       find_name,
       find_all,
       fold_name,
       fold_all,
       iter$0,
       remove,
       make_key_generator];
   caml_register_global
    (1303, Dynlink_compilerlibs_Ident, "Dynlink_compilerlibs.Ident");
   function same$0(p1$1, p2$1){
    var p1 = p1$1, p2 = p2$1;
    for(;;){
     var a = p1 === p2 ? 1 : 0;
     if(a)
      var b = a;
     else{
      switch(p1[0]){
        case 0:
         var id1 = p1[1];
         if(0 === p2[0]){var id2 = p2[1]; return same(id1, id2);}
         break;
        case 1:
         var s1 = p1[2], p1$0 = p1[1];
         if(1 === p2[0]){
          var s2 = p2[2], p2$0 = p2[1], c = s1 === s2 ? 1 : 0;
          if(! c) return c;
          p1 = p1$0;
          p2 = p2$0;
          continue;
         }
         break;
        default:
         var arg1 = p1[2], fun1 = p1[1];
         if(2 === p2[0]){
          var arg2 = p2[2], fun2 = p2[1], d = same$0(fun1, fun2);
          if(! d) return d;
          p1 = arg1;
          p2 = arg2;
          continue;
         }
      }
      var b = 0;
     }
     return b;
    }
   }
   function compare$9(p1$1, p2$1){
    var p1 = p1$1, p2 = p2$1;
    for(;;){
     if(p1 === p2) return 0;
     a:
     {
      switch(p1[0]){
        case 0:
         var id1 = p1[1];
         if(0 === p2[0]){
          var id2 = p2[1];
          return caml_call2(compare$8, id1, id2);
         }
         break;
        case 1:
         var p1$0 = p1[1], s1 = p1[2];
         if(1 === p2[0]){
          var s2 = p2[2], p2$0 = p2[1], h = compare$9(p1$0, p2$0);
          return 0 === h ? Stdlib_String[9].call(null, s1, s2) : h;
         }
         break;
        default:
         var arg1 = p1[2], fun1 = p1[1];
         if(2 !== p2[0]) break a;
         var arg2 = p2[2], fun2 = p2[1], h$0 = compare$9(fun1, fun2);
         if(0 !== h$0) return h$0;
         p1 = arg1;
         p2 = arg2;
         continue;
      }
      if(0 !== p2[0]) return -1;
     }
     return 1;
    }
   }
   function find_free_opt(ids, param$0){
    var param = param$0;
    a:
    for(;;)
     switch(param[0]){
       case 0:
        break a;
       case 1:
        var p = param[1]; param = p; break;
       default:
        var p2 = param[2], p1 = param[1], res = find_free_opt(ids, p1);
        if(res) return res;
        param = p2;
     }
    var id = param[1];
    return Stdlib_List[39].call(null, function(a){return same(id, a);}, ids);
   }
   function exists_free(ids, p){return find_free_opt(ids, p) ? 1 : 0;}
   function scope$0(param$0){
    var param = param$0;
    for(;;)
     switch(param[0]){
       case 0:
        var id = param[1]; return scope(id);
       case 1:
        var p = param[1]; param = p; break;
       default:
        var p2 = param[2], p1 = param[1], a = scope$0(p2), b = scope$0(p1);
        return Stdlib_Int[11].call(null, b, a);
     }
   }
   function kfalse(param){return 0;}
   function name$0(opt, param){
    if(opt) var sth = opt[1], paren = sth; else var paren = kfalse;
    switch(param[0]){
      case 0:
       var id = param[1], name = id[1]; return name;
      case 1:
       var s = param[2], p = param[1];
       if(caml_call1(paren, s))
        var
         b = Stdlib[28].call(null, s, cst$75),
         a = Stdlib[28].call(null, cst$76, b);
       else
        var a = Stdlib[28].call(null, cst$77, s);
       var c = name$0([0, paren], p);
       return Stdlib[28].call(null, c, a);
      default:
       var
        p2 = param[2],
        p1 = param[1],
        d = name$0([0, paren], p2),
        e = Stdlib[28].call(null, d, cst$78),
        f = Stdlib[28].call(null, cst$79, e),
        g = name$0([0, paren], p1);
       return Stdlib[28].call(null, g, f);
    }
   }
   function print$8(ppf, param){
    switch(param[0]){
      case 0:
       var id = param[1]; return print_with_scope(ppf, id);
      case 1:
       var s = param[2], p = param[1];
       return caml_call3
               (Stdlib_Format[129].call(null, ppf)(e6), print$8, p, s);
      default:
       var p2 = param[2], p1 = param[1];
       return caml_call4
               (Stdlib_Format[129].call(null, ppf)(e7),
                print$8,
                p1,
                print$8,
                p2);
    }
   }
   function head(param$0){
    var param = param$0;
    for(;;)
     switch(param[0]){
       case 0:
        var id = param[1]; return id;
       case 1:
        var p = param[1]; param = p; break;
       default: throw caml_maybe_attach_backtrace([0, Assert_failure, e8], 1);
     }
   }
   function flatten$0(t){
    var acc = 0, param = t;
    for(;;)
     switch(param[0]){
       case 0:
        var id = param[1]; return [0, 17724, [0, id, acc]];
       case 1:
        var s = param[2], p = param[1], acc$0 = [0, s, acc];
        acc = acc$0;
        param = p;
        break;
       default: return 437034030;
     }
   }
   function heads(p){
    function heads(p$1, acc$1){
     var p = p$1, acc = acc$1;
     for(;;)
      switch(p[0]){
        case 0:
         var id = p[1]; return [0, id, acc];
        case 1:
         var p$0 = p[1]; p = p$0; break;
        default:
         var p2 = p[2], p1 = p[1], acc$0 = heads(p2, acc);
         p = p1;
         acc = acc$0;
      }
    }
    return heads(p, 0);
   }
   function last$0(param$0){
    var param = param$0;
    for(;;)
     switch(param[0]){
       case 0:
        var id = param[1], name = id[1]; return name;
       case 1:
        var s = param[2]; return s;
       default: var p = param[2]; param = p;
     }
   }
   function is_uident(s){
    if(s !== cst$115) return 25 < caml_string_get(s, 0) - 65 >>> 0 ? 0 : 1;
    throw caml_maybe_attach_backtrace([0, Assert_failure, e9], 1);
   }
   function constructor_typath(p){
    switch(p[0]){
      case 0:
       var id = p[1], name = id[1]; if(is_uident(name)) return [2, id]; break;
      case 1:
       var s = p[2], ty_path = p[1];
       if(is_uident(s))
        return is_uident(last$0(ty_path)) ? [1, ty_path, s] : [3, ty_path, s];
       break;
    }
    return [0, p];
   }
   function is_constructor_typath(p){
    return 0 === constructor_typath(p)[0] ? 0 : 1;
   }
   var
    T$2 = [0, compare$9],
    Set$3 = Stdlib_Set[1].call(null, T$2),
    Map$3 = Stdlib_Map[1].call(null, T$2),
    Dynlink_compilerlibs_Path =
      [0,
       same$0,
       compare$9,
       find_free_opt,
       exists_free,
       scope$0,
       flatten$0,
       name$0,
       head,
       print$8,
       heads,
       last$0,
       is_uident,
       constructor_typath,
       is_constructor_typath,
       Map$3,
       Set$3];
   caml_register_global
    (1304, Dynlink_compilerlibs_Path, "Dynlink_compilerlibs.Path");
   var Error$3 = [248, cst_Dynlink_compilerlibs_Primi, caml_fresh_oo_id(0)];
   function is_ocaml_repr(param){
    if(typeof param === "number" && ! param) return 1;
    return 0;
   }
   function is_unboxed(param){
    if(typeof param === "number" && 1 !== param) return 0;
    return 1;
   }
   function is_untagged(param){
    if(typeof param === "number" && 2 <= param) return 1;
    return 0;
   }
   function make_native_repr_args(arity, x){
    return 0 === arity ? 0 : [0, x, make_native_repr_args(arity - 1 | 0, x)];
   }
   function simple(name, arity, alloc){
    return [0, name, arity, alloc, cst$80, make_native_repr_args(arity, 0), 0];
   }
   function make$0
   (name, alloc, native_name, native_repr_args, native_repr_res){
    return [0,
            name,
            Stdlib_List[1].call(null, native_repr_args),
            alloc,
            native_name,
            native_repr_args,
            native_repr_res];
   }
   function parse_declaration(valdecl, native_repr_args, native_repr_res){
    var
     arity = Stdlib_List[1].call(null, native_repr_args),
     match = valdecl[3];
    a:
    if(match){
     var name = match[1], match$0 = match[2];
     if(match$0){
      var name2 = match$0[1];
      if(name2 !== cst_noalloc){
       var c = match$0[2];
       if(c && c[1] === cst_float$0){
        var
         old_style_float = 1,
         old_style_noalloc = 0,
         native_name = name2,
         name$0 = name;
        break a;
       }
      }
      else{
       var b = match$0[2];
       if(b){
        var name2$0 = b[1], i = b[2];
        if(i && i[1] === cst_float$0){
         var
          old_style_float = 1,
          old_style_noalloc = 1,
          native_name = name2$0,
          name$0 = name;
         break a;
        }
        var
         old_style_float = 0,
         old_style_noalloc = 1,
         native_name = name2$0,
         name$0 = name;
        break a;
       }
      }
      if(name2 !== cst_noalloc)
       var
        old_style_float = 0,
        old_style_noalloc = 0,
        native_name = name2,
        name$0 = name;
      else
       var
        old_style_float = 0,
        old_style_noalloc = 1,
        native_name = cst$81,
        name$0 = name;
     }
     else
      var
       old_style_float = 0,
       old_style_noalloc = 0,
       native_name = cst$82,
       name$0 = name;
    }
    else
     var
      a = fatal_error(cst_Primitive_parse_declaratio),
      old_style_float$0 = a[4],
      old_style_noalloc$1 = a[3],
      native_name$0 = a[2],
      name$1 = a[1],
      old_style_float = old_style_float$0,
      old_style_noalloc = old_style_noalloc$1,
      native_name = native_name$0,
      name$0 = name$1;
    var noalloc_attribute = has_no_payload_attribute(e_, valdecl[4]);
    if(old_style_float)
     var
      d = Stdlib_List[32].call(null, is_ocaml_repr, native_repr_args),
      j = d ? is_ocaml_repr(native_repr_res) : d,
      e = 1 - j;
    else
     var e = old_style_float;
    if(e) throw caml_maybe_attach_backtrace([0, Error$3, valdecl[5], 0], 1);
    var
     noalloc_attribute$0 =
       old_style_noalloc ? noalloc_attribute : old_style_noalloc;
    if(noalloc_attribute$0)
     throw caml_maybe_attach_backtrace([0, Error$3, valdecl[5], 1], 1);
    var old_style_noalloc$0 = old_style_noalloc || old_style_float;
    if(old_style_float){
     var loc = valdecl[5];
     alert(0, 0, cst_deprecated$3, loc, message$0);
    }
    else if(old_style_noalloc$0){
     var loc$0 = valdecl[5];
     alert(0, 0, cst_deprecated$3, loc$0, message$1);
    }
    var f = native_name === cst$115 ? 1 : 0;
    if(f)
     var
      g = Stdlib_List[32].call(null, is_ocaml_repr, native_repr_args),
      k = g ? is_ocaml_repr(native_repr_res) : g,
      h = 1 - k;
    else
     var h = f;
    if(h) throw caml_maybe_attach_backtrace([0, Error$3, valdecl[5], 2], 1);
    var noalloc = old_style_noalloc$0 || noalloc_attribute;
    if(old_style_float)
     var
      native_repr_res$0 = 1,
      native_repr_args$0 = make_native_repr_args(arity, 1);
    else
     var
      native_repr_res$0 = native_repr_res,
      native_repr_args$0 = native_repr_args;
    return [0,
            name$0,
            arity,
            1 - noalloc,
            native_name,
            native_repr_args$0,
            native_repr_res$0];
   }
   function add_native_repr_attributes(ty, attrs){
    a:
    {
     if(typeof ty !== "number" && 1 === ty[0]){
      if(! attrs) break a;
      var
       rest = attrs[2],
       attr_opt = attrs[1],
       b = ty[3],
       a = ty[2],
       label = ty[1],
       b$0 = add_native_repr_attributes(b, rest);
      if(attr_opt)
       var attr$0 = attr_opt[1], a$0 = [14, a, attr$0];
      else
       var a$0 = a;
      return [1, label, a$0, b$0];
     }
     if(attrs){
      var c = attrs[1];
      if(c && ! attrs[2]){var attr = c[1]; return [14, ty, attr];}
     }
    }
    if
     (Stdlib_List[32].call(null, function(x){return 0 === x ? 1 : 0;}, attrs))
     return ty;
    throw caml_maybe_attach_backtrace([0, Assert_failure, e$], 1);
   }
   function print$9(p, osig_val_decl){
    var prims = p[4] !== cst$115 ? [0, p[1], [0, p[4], 0]] : [0, p[1], 0];
    function for_all(f){
     var a = Stdlib_List[32].call(null, f, p[5]);
     return a ? caml_call1(f, p[6]) : a;
    }
    var
     all_unboxed = for_all(is_unboxed),
     all_untagged = for_all(is_untagged),
     attrs = p[3] ? 0 : [0, oattr_noalloc, 0],
     attrs$0 =
       all_unboxed
        ? [0, oattr_unboxed, attrs]
        : all_untagged ? [0, oattr_untagged, attrs] : attrs;
    function attr_of_native_repr(param){
     if(typeof param === "number")
      switch(param){
        case 0:
         return 0;
        case 2:
         return all_untagged ? 0 : [0, oattr_untagged];
      }
     return all_unboxed ? 0 : [0, oattr_unboxed];
    }
    var
     a = [0, attr_of_native_repr(p[6]), 0],
     b = Stdlib_List[19].call(null, attr_of_native_repr, p[5]),
     type_attrs = Stdlib[37].call(null, b, a),
     c = add_native_repr_attributes(osig_val_decl[2], type_attrs);
    return [0, osig_val_decl[1], c, prims, attrs$0];
   }
   function native_name(p){return p[4] !== cst$115 ? p[4] : p[1];}
   function byte_name(p){return p[1];}
   function equal_boxed_integer(bi1, bi2){
    a:
    {
     switch(bi1){
       case 0:
        if(bi2) break a; break;
       case 1:
        if(1 !== bi2) break a; break;
       default: if(2 > bi2) break a;
     }
     return 1;
    }
    return 0;
   }
   function equal_native_repr(nr1, nr2){
    if(typeof nr1 === "number")
     switch(nr1){
       case 0:
        if(typeof nr2 === "number" && ! nr2) return 1; return 0;
       case 1:
        if(typeof nr2 === "number" && 1 === nr2) return 1; return 0;
       default: if(typeof nr2 === "number" && 2 <= nr2) return 1; return 0;
     }
    var bi1 = nr1[1];
    if(typeof nr2 === "number") return 0;
    var bi2 = nr2[1];
    return equal_boxed_integer(bi1, bi2);
   }
   function native_name_is_external(p){
    var
     nat_name = native_name(p),
     a = nat_name !== cst$115 ? 1 : 0,
     b = a ? 37 !== caml_string_get(nat_name, 0) ? 1 : 0 : a;
    return b;
   }
   function report_error$0(ppf, err){
    switch(err){
      case 0:
       return Stdlib_Format[129].call(null, ppf)(fa);
      case 1:
       return Stdlib_Format[129].call(null, ppf)(fb);
      default: return Stdlib_Format[129].call(null, ppf)(fc);
    }
   }
   register_error_of_exn
    (function(param){
      var tag = param[1];
      if(tag !== Error$3) return 0;
      var err = param[3], loc = param[2];
      return [0, error_of_printer([0, loc], 0, report_error$0, err)];
     });
   var
    Dynlink_compilerlibs_Primitive =
      [0,
       simple,
       make$0,
       parse_declaration,
       print$9,
       native_name,
       byte_name,
       equal_boxed_integer,
       equal_native_repr,
       native_name_is_external,
       Error$3];
   caml_register_global
    (1305, Dynlink_compilerlibs_Primitive, "Dynlink_compilerlibs.Primitive");
   var Violation = [0];
   function coerce$0(t, as){
    a:
    {
     b:
     {
      switch(t){
        case 0:
         switch(as){case 2: return ff;case 0: break;default: break b;} break;
        case 1:
         if(0 !== as) break a; break;
      }
      if(! as) break a;
     }
     if(2 > as) return fe;
    }
    return fd;
   }
   function of_attributes(attrs){
    var match$0 = G(F, attrs), match = I(H, attrs);
    return match$0 ? 1 : match ? 2 : 0;
   }
   var
    Dynlink_compilerlibs_Type_imme = [0, Violation, coerce$0, of_attributes];
   caml_register_global
    (1306,
     Dynlink_compilerlibs_Type_imme,
     "Dynlink_compilerlibs.Type_immediacy");
   var equal$6 = caml_equal, compare$10 = caml_compare;
   function hash$6(x){return Stdlib_Hashtbl[28].call(null, x);}
   function print$10(fmt, param){
    if(typeof param === "number")
     return Stdlib_Format[13].call(null, fmt, cst_internal);
    switch(param[0]){
      case 0:
       var s = param[1]; return Stdlib_Format[13].call(null, fmt, s);
      case 1:
       var id = param[2], comp_unit = param[1];
       return caml_call2
               (Stdlib_Format[129].call(null, fmt)(fg), comp_unit, id);
      default:
       var name = param[1];
       return caml_call1(Stdlib_Format[129].call(null, fmt)(fh), name);
    }
   }
   function output$6(oc, t){
    var fmt = Stdlib_Format[108].call(null, oc);
    return print$10(fmt, t);
   }
   var
    include$5 = n([0, equal$6, hash$6, compare$10, output$6, print$10]),
    T$3 = include$5[1],
    equal$7 = include$5[2],
    hash$7 = include$5[3],
    compare$11 = include$5[4],
    output$7 = include$5[5],
    print$11 = include$5[6],
    Set$4 = include$5[7],
    Map$4 = include$5[8],
    Tbl$3 = include$5[9],
    id = [0, -1];
   function reinit$0(param){id[1] = -1; return 0;}
   function mk$27(current_unit){id[1]++; return [1, current_unit, id[1]];}
   function of_compilation_unit_id(id){
    if(1 - persistent(id)){
     var name$0 = id[1];
     caml_call1(fatal_errorf(fi), name$0);
    }
    var name = id[1];
    return [0, name];
   }
   function of_predef_id(id){
    if(1 - is_predef(id)){
     var name$0 = id[1];
     caml_call1(fatal_errorf(fj), name$0);
    }
    var name = id[1];
    return [2, name];
   }
   function for_actual_declaration(param){
    if(typeof param !== "number" && 1 === param[0]) return 1;
    return 0;
   }
   function to_string$1(param){
    switch(param){
      case 0:
       return cst_value;
      case 1:
       return cst_type;
      case 2:
       return cst_module;
      case 3:
       return cst_module_type;
      case 4:
       return cst_extension_constructor$0;
      case 5:
       return cst_class;
      default: return cst_class_type;
    }
   }
   function can_appear_in_types(param){
    if(4 !== param && param) return 1;
    return 0;
   }
   var
    Sig_component_kind = [0, to_string$1, can_appear_in_types],
    compare$12 = caml_compare;
   function make$1(str, ns){return [0, str, ns];}
   function value$1(id){var name = id[1]; return [0, name, 0];}
   function type$2(id){var name = id[1]; return [0, name, 1];}
   function module$1(id){var name = id[1]; return [0, name, 2];}
   function module_type(id){var name = id[1]; return [0, name, 3];}
   function extension_constructor(id){var name = id[1]; return [0, name, 4];}
   function class$2(id){var name = id[1]; return [0, name, 5];}
   function class_type$1(id){var name = id[1]; return [0, name, 6];}
   function print$12(fmt, param){
    var ns = param[2], name = param[1], a = to_string$1(ns);
    return caml_call2(Stdlib_Format[129].call(null, fmt)(fk), name, a);
   }
   var Map$5 = Stdlib_Map[1].call(null, [0, compare$12]);
   function print$13(fmt){
    function a(fmt){
     return caml_call1(Stdlib_Format[129].call(null, fmt)(fl), print$11);
    }
    var b = 0, c = Stdlib_Format[126];
    function print_uid_opt(d, e){return c(b, a, d, e);}
    function aux(fmt, param){
     var desc = param[2], uid = param[1];
     if(typeof desc === "number"){
      var a = 0, b = Stdlib_Format[126];
      return caml_call2
              (Stdlib_Format[129].call(null, fmt)(fm),
               function(c, d){return b(a, print$11, c, d);},
               uid);
     }
     switch(desc[0]){
       case 0:
        var id = desc[1];
        return caml_call4
                (Stdlib_Format[129].call(null, fmt)(fn),
                 print$7,
                 id,
                 print_uid_opt,
                 uid);
       case 1:
        var t = desc[2], id$0 = desc[1];
        return caml_call6
                (Stdlib_Format[129].call(null, fmt)(fo),
                 print_uid_opt,
                 uid,
                 print$7,
                 id$0,
                 aux,
                 t);
       case 2:
        var t2 = desc[2], t1 = desc[1];
        return caml_call6
                (Stdlib_Format[129].call(null, fmt)(fp),
                 aux,
                 t1,
                 aux,
                 t2,
                 print_uid_opt,
                 uid);
       case 3:
        var
         map = desc[1],
         print_map =
           function(fmt){
            return caml_call1
                    (Map$5[12],
                     function(item, t){
                      return caml_call4
                              (Stdlib_Format[129].call(null, fmt)(fq),
                               print$12,
                               item,
                               aux,
                               t);
                     });
           };
        return caml_call4
                (Stdlib_Format[129].call(null, fmt)(fr),
                 print_uid_opt,
                 uid,
                 print_map,
                 map);
       case 4:
        var item = desc[2], t$0 = desc[1];
        if(! uid)
         return caml_call4
                 (Stdlib_Format[129].call(null, fmt)(ft),
                  aux,
                  t$0,
                  print$12,
                  item);
        var uid$0 = uid[1];
        return caml_call6
                (Stdlib_Format[129].call(null, fmt)(fs),
                 aux,
                 t$0,
                 print$12,
                 item,
                 print$11,
                 uid$0);
       default:
        var name = desc[1];
        return caml_call1(Stdlib_Format[129].call(null, fmt)(fu), name);
     }
    }
    return caml_call1(Stdlib_Format[129].call(null, fmt)(fv), aux);
   }
   function fresh_var(opt, uid){
    if(opt) var sth = opt[1], name = sth; else var name = cst_shape_var;
    var var$ = create_local(name);
    return [0, var$, [0, [0, uid], [0, var$]]];
   }
   var for_unnamed_functor_param = create_local(cst$83);
   function var$1(uid, id){return [0, [0, uid], [0, id]];}
   function abs(uid, var$, body){return [0, uid, [1, var$, body]];}
   function str(uid, map){return [0, uid, [3, map]];}
   function leaf(uid){return [0, [0, uid], 0];}
   function proj(uid, t, item){
    var match = t[2];
    if(typeof match === "number") return t;
    if(3 !== match[0]) return [0, uid, [4, t, item]];
    var map = match[1];
    try{var a = caml_call2(Map$5[28], item, map); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return t;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function app(uid, f, arg){return [0, uid, [2, f, arg]];}
   function decompose_abs(t){
    var match = t[2];
    if(typeof match !== "number" && 1 === match[0]){
     var t$0 = match[2], x = match[1];
     return [0, [0, x, t$0]];
    }
    return 0;
   }
   function Make_reduce(Params){
    function improve_uid(uid, nf){return nf[1] ? nf : [0, uid, nf[2]];}
    function bind(env, var$, shape){
     var
      a = env[5],
      b = env[4],
      c = caml_call3(Map$2[4], var$, shape, env[3]);
     return [0, env[1], env[2], c, b, a];
    }
    function reduce(env, arg){
     var memo_key = [0, env[3], arg], memo_table = env[4];
     try{
      var res$0 = Stdlib_Hashtbl[6].call(null, memo_table, memo_key);
      return res$0;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var res = reduce$0(env, arg);
      Stdlib_Hashtbl[11].call(null, memo_table, memo_key, res);
      return res;
     }
    }
    function reduce$0(env, t){
     var local_env = env[3], global_env = env[2], fuel = env[1];
     function reduce$0(env, t){return reduce(env, t);}
     function delay_reduce(env, t){return [0, env[3], t];}
     function force(param){
      var t = param[2], local_env = param[1];
      return reduce$0([0, env[1], env[2], local_env, env[4], env[5]], t);
     }
     function return$(desc){return [0, t[1], desc];}
     if(0 > fuel[1]) return return$([6, t[2]]);
     var match = t[2];
     if(typeof match === "number") return return$(0);
     switch(match[0]){
       case 0:
        var id = match[1];
        try{var val = caml_call2(Map$2[28], id, local_env);}
        catch(exn$1){
         var exn = caml_wrap_exception(exn$1);
         if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
         try{var res = caml_call2(Params[3], global_env, id);}
         catch(exn){
          var exn$0 = caml_wrap_exception(exn);
          if(exn$0 === Stdlib[8]) return return$([0, id]);
          throw caml_maybe_attach_backtrace(exn$0, 0);
         }
         return caml_equal(res, t)
                 ? return$([0, id])
                 : (fuel[1]--, reduce$0(env, res));
        }
        if(! val) return return$([0, id]);
        var def = val[1];
        return force(def);
       case 1:
        var
         body = match[2],
         var$ = match[1],
         body_nf = delay_reduce(bind(env, var$, 0), body);
        return return$([2, local_env, var$, body, body_nf]);
       case 2:
        var
         arg = match[2],
         f = match[1],
         f$0 = reduce$0(env, f),
         match$0 = f$0[2];
        if(typeof match$0 !== "number" && 2 === match$0[0]){
         var
          body$0 = match$0[3],
          var$0 = match$0[2],
          clos_env = match$0[1],
          arg$1 = delay_reduce(env, arg),
          env$0 =
            bind
             ([0, env[1], env[2], clos_env, env[4], env[5]],
              var$0,
              [0, arg$1]),
          a = reduce$0(env$0, body$0);
         return improve_uid(t[1], a);
        }
        var arg$0 = reduce$0(env, arg);
        return return$([1, f$0, arg$0]);
       case 3:
        var
         m = match[1],
         mnf =
           caml_call2(Map$5[34], function(a){return delay_reduce(env, a);}, m);
        return return$([3, mnf]);
       case 4:
        var
         item = match[2],
         str = match[1],
         str$0 = reduce$0(env, str),
         nored = function(param){return return$([4, str$0, item]);},
         match$1 = str$0[2];
        if(typeof match$1 !== "number" && 3 === match$1[0]){
         var items = match$1[1];
         try{var nf = caml_call2(Map$5[28], item, items);}
         catch(exn){
          var exn$1 = caml_wrap_exception(exn);
          if(exn$1 === Stdlib[8]) return nored(0);
          throw caml_maybe_attach_backtrace(exn$1, 0);
         }
         var b = force(nf);
         return improve_uid(t[1], b);
        }
        return nored(0);
       default:
        var unit_name = match[1], match$2 = caml_call1(Params[2], unit_name);
        if(! match$2) return return$([5, unit_name]);
        var t$0 = match$2[1];
        return reduce$0(env, t$0);
     }
    }
    function read_back(env, memo_key){
     var memo_table = env[5];
     try{
      var res$0 = Stdlib_Hashtbl[6].call(null, memo_table, memo_key);
      return res$0;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var res = read_back$0(env, memo_key);
      Stdlib_Hashtbl[11].call(null, memo_table, memo_key, res);
      return res;
     }
    }
    function read_back$0(env, nf){
     var a = read_back_desc(env, nf[2]);
     return [0, nf[1], a];
    }
    function read_back_desc(env, desc){
     function read_back$0(nf){return read_back(env, nf);}
     function read_back_force(param){
      var t = param[2], local_env = param[1];
      return read_back$0
              (reduce([0, env[1], env[2], local_env, env[4], env[5]], t));
     }
     if(typeof desc === "number") return 0;
     switch(desc[0]){
       case 0:
        var v = desc[1]; return [0, v];
       case 1:
        var nfu = desc[2], nft = desc[1], a = read_back$0(nfu);
        return [2, read_back$0(nft), a];
       case 2:
        var nf = desc[4], x = desc[2]; return [1, x, read_back_force(nf)];
       case 3:
        var nstr = desc[1];
        return [3, caml_call2(Map$5[34], read_back_force, nstr)];
       case 4:
        var item = desc[2], nf$0 = desc[1];
        return [4, read_back$0(nf$0), item];
       case 5:
        var s = desc[1]; return [5, s];
       default: var t = desc[1]; return t;
     }
    }
    function reduce$1(global_env, t){
     var
      fuel = [0, Params[1]],
      reduce_memo_table = Stdlib_Hashtbl[1].call(null, 0, 42),
      read_back_memo_table = Stdlib_Hashtbl[1].call(null, 0, 42),
      local_env = Map$2[1],
      env =
        [0,
         fuel,
         global_env,
         local_env,
         reduce_memo_table,
         read_back_memo_table];
     return read_back(env, reduce(env, t));
    }
    return [0, , , , , , , , , reduce$1];
   }
   function read_unit_shape(param){return 0;}
   function find_shape(env, id){
    throw caml_maybe_attach_backtrace(Stdlib[8], 1);
   }
   var Local_reduce = Make_reduce([0, 10, read_unit_shape, find_shape]);
   function local_reduce(shape){return Local_reduce[9].call(null, 0, shape);}
   var dummy_mod = [0, 0, [3, Map$5[1]]];
   function of_path(find_shape, namespace){
    function aux(ns, param){
     switch(param[0]){
       case 0:
        var id = param[1]; return caml_call2(find_shape, ns, id);
       case 1:
        var name = param[2], path = param[1];
        return proj(0, aux(2, path), [0, name, ns]);
       default:
        var p2 = param[2], p1 = param[1], a = aux(2, p2);
        return app(0, aux(2, p1), a);
     }
    }
    return function(a){return aux(namespace, a);};
   }
   function for_persistent_unit(s){
    return [0, [0, of_compilation_unit_id([2, s])], [5, s]];
   }
   function set_uid_if_none(t, uid){return t[1] ? t : [0, [0, uid], t[2]];}
   var empty$1 = Map$5[1];
   function add$1(t, item, shape){
    return caml_call3(Map$5[4], item, shape, t);
   }
   function add_value(t, id, uid){
    var a = leaf(uid), b = value$1(id);
    return caml_call3(Map$5[4], b, a, t);
   }
   function add_value_proj(t, id, shape){
    var item = value$1(id), a = proj(0, shape, item);
    return caml_call3(Map$5[4], item, a, t);
   }
   function add_type(t, id, uid){
    var a = leaf(uid), b = type$2(id);
    return caml_call3(Map$5[4], b, a, t);
   }
   function add_type_proj(t, id, shape){
    var item = type$2(id), a = proj(0, shape, item);
    return caml_call3(Map$5[4], item, a, t);
   }
   function add_module(t, id, shape){
    var a = module$1(id);
    return caml_call3(Map$5[4], a, shape, t);
   }
   function add_module_proj(t, id, shape){
    var item = module$1(id), a = proj(0, shape, item);
    return caml_call3(Map$5[4], item, a, t);
   }
   function add_module_type(t, id, uid){
    var a = leaf(uid), b = module_type(id);
    return caml_call3(Map$5[4], b, a, t);
   }
   function add_module_type_proj(t, id, shape){
    var item = module_type(id), a = proj(0, shape, item);
    return caml_call3(Map$5[4], item, a, t);
   }
   function add_extcons(t, id, uid){
    var a = leaf(uid), b = extension_constructor(id);
    return caml_call3(Map$5[4], b, a, t);
   }
   function add_extcons_proj(t, id, shape){
    var item = extension_constructor(id), a = proj(0, shape, item);
    return caml_call3(Map$5[4], item, a, t);
   }
   function add_class(t, id, uid){
    var a = leaf(uid), b = class$2(id);
    return caml_call3(Map$5[4], b, a, t);
   }
   function add_class_proj(t, id, shape){
    var item = class$2(id), a = proj(0, shape, item);
    return caml_call3(Map$5[4], item, a, t);
   }
   function add_class_type(t, id, uid){
    var a = leaf(uid), b = class_type$1(id);
    return caml_call3(Map$5[4], b, a, t);
   }
   function add_class_type_proj(t, id, shape){
    var item = class_type$1(id), a = proj(0, shape, item);
    return caml_call3(Map$5[4], item, a, t);
   }
   var
    Map$6 =
      [0,
       empty$1,
       add$1,
       add_value,
       add_value_proj,
       add_type,
       add_type_proj,
       add_module,
       add_module_proj,
       add_module_type,
       add_module_type_proj,
       add_extcons,
       add_extcons_proj,
       add_class,
       add_class_proj,
       add_class_type,
       add_class_type_proj],
    d =
      [0,
       make$1,
       value$1,
       type$2,
       module$1,
       module_type,
       extension_constructor,
       class$2,
       class_type$1,
       Map$5],
    c =
      [0,
       reinit$0,
       mk$27,
       of_compilation_unit_id,
       of_predef_id,
       0,
       for_actual_declaration,
       T$3,
       equal$7,
       hash$7,
       compare$11,
       output$7,
       print$11,
       Set$4,
       Map$4,
       Tbl$3],
    Dynlink_compilerlibs_Shape =
      [0,
       c,
       Sig_component_kind,
       d,
       print$13,
       for_unnamed_functor_param,
       fresh_var,
       var$1,
       abs,
       app,
       str,
       proj,
       leaf,
       decompose_abs,
       for_persistent_unit,
       leaf_for_unpack,
       Map$6,
       dummy_mod,
       of_path,
       set_uid_if_none,
       function(a){return [0, Make_reduce(a)[9]];},
       local_reduce];
   caml_register_global
    (1307, Dynlink_compilerlibs_Shape, "Dynlink_compilerlibs.Shape");
   function compare$13(t1, t2){return t1[4] - t2[4] | 0;}
   function hash$8(t){return t[4];}
   function equal$8(t1, t2){return t1 === t2 ? 1 : 0;}
   function single(param){
    switch(param){
      case 0:
       return 1;
      case 1:
       return 2;
      case 2:
       return 4;
      case 3:
       return 8;
      case 4:
       return 16;
      case 5:
       return 32;
      default: return 64;
    }
   }
   function union(v1, v2){return v1 | v2;}
   function inter(v1, v2){return v1 & v2;}
   function subset(v1, v2){return (v1 & v2) === v1 ? 1 : 0;}
   function eq(v1, v2){return v1 === v2 ? 1 : 0;}
   function set$0(x, b, v){
    if(b) return v | single(x);
    var a = single(x);
    return v & Stdlib[21].call(null, a);
   }
   function mem$0(x){
    var a = single(x);
    return function(b){return subset(a, b);};
   }
   var
    unknown = 7,
    fw = single(3),
    fx = single(4),
    covariant = single(0) | fx | fw;
   function swap(f1, f2, v){
    var v$0 = set$0(f1, mem$0(f2)(v), v);
    return set$0(f2, mem$0(f1)(v), v$0);
   }
   function conjugate(v){return swap(0, 1, swap(4, 5, v));}
   function get_upper(v){var a = mem$0(1)(v); return [0, mem$0(0)(v), a];}
   function get_lower(v){
    var a = mem$0(3)(v), b = mem$0(6)(v), c = mem$0(5)(v);
    return [0, mem$0(4)(v), c, b, a];
   }
   function unknown_signature(injective, arity){
    var v = injective ? set$0(3, 1, unknown) : unknown;
    return replicate_list(v, arity);
   }
   function eq$0(m1, m2){return m1 === m2 ? 1 : 0;}
   function rank$0(param){
    switch(param){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function compare$14(m1, m2){
    var a = rank$0(m2);
    return caml_int_compare(rank$0(m1), a);
   }
   function max(m1, m2){var a = rank$0(m2); return a <= rank$0(m1) ? m1 : m2;}
   function print$14(ppf, param){
    switch(param){
      case 0:
       return Stdlib_Format[129].call(null, ppf)(fy);
      case 1:
       return Stdlib_Format[129].call(null, ppf)(fz);
      default: return Stdlib_Format[129].call(null, ppf)(fA);
    }
   }
   function print_signature(ppf, modes){
    function pp_sep(ppf, param){
     return Stdlib_Format[129].call(null, ppf)(fB);
    }
    var a = [0, pp_sep], b = Stdlib_Format[123];
    return caml_call2
            (Stdlib_Format[129].call(null, ppf)(fC),
             function(c, d){return b(a, print$14, c, d);},
             modes);
   }
   function default_signature(arity){
    var default_mode = Dynlink_compilerlibs_Config[62] ? 2 : 0;
    return replicate_list(default_mode, arity);
   }
   function equal_tag(t1, t2){
    if(typeof t1 === "number"){
     if(typeof t2 === "number") return 1;
    }
    else
     switch(t1[0]){
       case 0:
        var i1 = t1[1];
        if(typeof t2 !== "number" && 0 === t2[0]){
         var i2 = t2[1];
         return i2 === i1 ? 1 : 0;
        }
        break;
       case 1:
        var i1$0 = t1[1];
        if(typeof t2 !== "number" && 1 === t2[0]){
         var i2$0 = t2[1];
         return i2$0 === i1$0 ? 1 : 0;
        }
        break;
       default:
        var path1 = t1[1];
        if(typeof t2 !== "number" && 2 === t2[0]){
         var
          b2 = t2[2],
          path2 = t2[1],
          b1 = t1[2],
          a = same$0(path1, path2),
          b = a ? b1 === b2 ? 1 : 0 : a;
         return b;
        }
     }
    return 0;
   }
   function may_equal_constr(c1, c2){
    var a = c1[5] === c2[5] ? 1 : 0;
    if(! a) return a;
    var tag1 = c1[6], match = c2[6];
    if
     (typeof tag1 !== "number"
      && 2 === tag1[0] && typeof match !== "number" && 2 === match[0])
     return 1;
    return equal_tag(tag1, match);
   }
   function item_visibility(param){
    switch(param[0]){
      case 3:
       var vis = param[5]; break;
      case 0:
      case 4:
       var vis = param[3]; break;
      default: var vis = param[4];
    }
    return vis;
   }
   function bound_value_identifiers(param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var match = param[1];
     switch(match[0]){
       case 0:
        if(typeof match[2][2] === "number"){
         var rem = param[2], id = match[1];
         return [0, id, bound_value_identifiers(rem)];
        }
        break;
       case 3:
        if(! match[2]){
         var rem$2 = param[2], id$1 = match[1];
         return [0, id$1, bound_value_identifiers(rem$2)];
        }
        break;
       case 2:
       case 5:
        var rem$1 = param[2], id$0 = match[1];
        return [0, id$0, bound_value_identifiers(rem$1)];
     }
     var rem$0 = param[2];
     param = rem$0;
    }
   }
   function signature_item_id(param){var id = param[1]; return id;}
   var trail = s_table(function(a){return [0, a];}, 0);
   function log_change(ch){
    var r = [0, 0];
    trail[1][1] = [0, ch, r];
    trail[1] = r;
   }
   function field_kind_internal_repr(kind$0){
    var kind = kind$0;
    for(;;){
     if(typeof kind !== "number"){
      var a = kind[1];
      if(typeof a !== "number" || a){kind = a; continue;}
     }
     return kind;
    }
   }
   function field_kind_repr(fk){
    var match = field_kind_internal_repr(fk);
    return typeof match === "number" ? 2 <= match ? 2 : 1 : 0;
   }
   function field_private(param){return [0, 0];}
   function is_commu_ok(param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return param ? 0 : 1;
     var commu = param[1];
     param = commu;
    }
   }
   var commu_ok = 0;
   function commu_var(param){return [0, 1];}
   function repr_link(t$2, d$1, t$3){
    var d = d$1, t = t$3;
    for(;;){
     var d$0 = t[1];
     if(typeof d$0 !== "number")
      switch(d$0[0]){
        case 5:
         var t$0 = d$0[4], k = d$0[2];
         if(2 === field_kind_internal_repr(k)){d = d$0; t = t$0; continue;}
         break;
        case 6:
         var t$1 = d$0[1]; d = d$0; t = t$1; continue;
      }
     log_change([1, t$2, t$2[1], d]);
     t$2[1] = d;
     return t;
    }
   }
   function repr_link1(t$0, t){
    var d = t[1];
    if(typeof d !== "number")
     switch(d[0]){
       case 5:
        var t$1 = d[4], k = d[2];
        if(2 === field_kind_internal_repr(k)) return repr_link(t$0, d, t$1);
        break;
       case 6:
        var t$2 = d[1]; return repr_link(t$0, d, t$2);
     }
    return t;
   }
   function repr(t){
    var match = t[1];
    if(typeof match !== "number")
     switch(match[0]){
       case 5:
        var t$0 = match[4], k = match[2];
        if(2 === field_kind_internal_repr(k)) return repr_link1(t, t$0);
        break;
       case 6:
        var t$1 = match[1]; return repr_link1(t, t$1);
     }
    return t;
   }
   function get_desc(t){return repr(t)[1];}
   function get_level(t){return repr(t)[2];}
   function get_scope(t){return repr(t)[3];}
   function get_id(t){return repr(t)[4];}
   function create_expr(desc, level, scope, id){return [0, desc, level, scope, id];
   }
   function set_desc(ty, d){ty[1] = d; return 0;}
   function set_stub_desc(ty, d){
    if(! caml_equal(ty[1], fD))
     throw caml_maybe_attach_backtrace([0, Assert_failure, fE], 1);
    ty[1] = d;
    return 0;
   }
   function set_level(ty, lv){ty[2] = lv; return 0;}
   function set_scope(ty, sc){ty[3] = sc; return 0;}
   function coerce$1(ty){return ty;}
   function type_expr(ty){return ty;}
   function eq_type(t1, t2){
    var a = t1 === t2 ? 1 : 0;
    if(a) var b = a; else var c = repr(t2), b = repr(t1) === c ? 1 : 0;
    return b;
   }
   function compare_type(t1, t2){
    var a = get_id(t2);
    return caml_int_compare(get_id(t1), a);
   }
   function create_row(fields, more, closed, fixed, name){return [0, fields, more, closed, fixed, name];
   }
   function row_fields(row){
    var match = get_desc(row[2]);
    if(typeof match !== "number" && 8 === match[0]){
     var row$0 = match[1], a = row_fields(row$0);
     return Stdlib[37].call(null, row[1], a);
    }
    return row[1];
   }
   function row_repr_no_fields(row$1){
    var row = row$1;
    for(;;){
     var match = get_desc(row[2]);
     if(typeof match !== "number" && 8 === match[0]){var row$0 = match[1]; row = row$0; continue;}
     return row;
    }
   }
   function row_more(row){return row_repr_no_fields(row)[2];}
   function row_closed(row){return row_repr_no_fields(row)[3];}
   function row_fixed(row){return row_repr_no_fields(row)[4];}
   function row_name(row){return row_repr_no_fields(row)[5];}
   function get_row_field(tag$0, row$1){
    var row = row$1;
    for(;;){
     var param = row[1];
     for(;;){
      if(! param){
       var match$0 = get_desc(row[2]);
       if(typeof match$0 !== "number" && 8 === match$0[0]){var row$0 = match$0[1]; row = row$0; break;}
       return 0;
      }
      var fields = param[2], match = param[1], f = match[2], tag = match[1];
      if(tag$0 === tag) return f;
      param = fields;
     }
    }
   }
   function set_row_name(row, row_name){
    var row_fields$0 = row_fields(row), row$0 = row_repr_no_fields(row);
    return [0, row_fields$0, row$0[2], row$0[3], row$0[4], row_name];
   }
   function row_repr(row){
    var fields = row_fields(row), row$0 = row_repr_no_fields(row);
    return [0, fields, row$0[2], row$0[3], row$0[4], row$0[5]];
   }
   function row_field_repr(fi){
    a:
    {
     var tl = 0, rf = fi;
     for(;;){
      if(typeof rf === "number"){var match = 0; break a;}
      if(0 === rf[0]) break;
      var arg_type = rf[2], rf$0 = rf[4][1];
      if(typeof rf$0 === "number" && rf$0){
       var
        a = rf[4],
        b = rf[3],
        c = Stdlib[37].call(null, tl, rf[2]),
        match = [1, rf[1], c, b, a];
       break a;
      }
      var tl$0 = Stdlib[37].call(null, tl, arg_type);
      tl = tl$0;
      rf = rf$0;
     }
     var
      match =
        rf[1] ? 0 === tl ? rf : [0, [0, Stdlib_List[5].call(null, tl)]] : rf;
    }
    if(typeof match === "number") return 0;
    if(0 === match[0]){var t = match[1]; return [0, t];}
    var matched = match[3], arg_type$0 = match[2], no_arg = match[1];
    return [1, no_arg, arg_type$0, matched];
   }
   function row_field_ext(fi$0){
    var fi = fi$0;
    for(;;){
     if(typeof fi !== "number" && 0 !== fi[0]){
      var ext = fi[4], rf = ext[1];
      if(typeof rf !== "number"){fi = rf; continue;}
      if(rf) return ext;
      fi = rf;
      continue;
     }
     return fatal_error(cst_Types_row_field_ext);
    }
   }
   function rf_present(oty){return [0, oty];}
   var rf_absent = 0;
   function rf_either(use_ext_of, no_arg, arg_type, matched){
    if(use_ext_of)
     var rf = use_ext_of[1], ext = row_field_ext(rf);
    else
     var ext = [0, 1];
    return [1, no_arg, arg_type, matched, ext];
   }
   function rf_either_of(param){
    if(! param) return [1, 1, 0, 0, [0, 1]];
    var ty = param[1];
    return [1, 0, [0, ty, 0], 0, [0, 1]];
   }
   function eq_row_field_ext(rf1, rf2){
    var a = row_field_ext(rf2);
    return row_field_ext(rf1) === a ? 1 : 0;
   }
   function changed_row_field_exts(l, f){
    var exts = Stdlib_List[19].call(null, row_field_ext, l);
    caml_call1(f, 0);
    return Stdlib_List[33].call
            (null, function(r){return 1 !== r[1] ? 1 : 0;}, exts);
   }
   function match_row_field(present, absent, either, f){
    if(typeof f === "number") return caml_call1(absent, 0);
    if(0 === f[0]){var t = f[1]; return caml_call1(present, t);}
    var
     ext = f[4],
     matched = f[3],
     arg_type = f[2],
     no_arg = f[1],
     e = ext[1];
    a:
    {if(typeof e === "number" && e){var e$0 = 0; break a;} var e$0 = [0, e];}
    return caml_call4(either, no_arg, arg_type, matched, e$0);
   }
   var new_id = s_ref(-1);
   function newty3(level, scope, desc){
    new_id[1]++;
    var id = new_id[1];
    return [0, desc, level, scope, id];
   }
   function newty2(level, desc){return newty3(level, lowest_scope, desc);}
   function undo_change(param){
    switch(param[0]){
      case 2:
       var level = param[2], ty$0 = param[1]; return set_level(ty$0, level);
      case 3:
       var scope = param[2], ty$1 = param[1]; return set_scope(ty$1, scope);
      case 6:
       param[1][1] = 0; return 0;
      case 0:
      case 1:
       var desc = param[2], ty = param[1]; return set_desc(ty, desc);
      case 4:
      case 8:
       var v = param[2], r = param[1]; r[1] = v; return 0;
      default: var r$0 = param[1]; r$0[1] = 1; return 0;
    }
   }
   var last_snapshot = s_ref(0);
   function log_type(ty){
    var a = ty[4] <= last_snapshot[1] ? 1 : 0;
    return a ? log_change([0, ty, ty[1]]) : a;
   }
   function link_type(ty$0, ty){
    var ty$1 = repr(ty$0), ty$2 = repr(ty);
    if(ty$1 === ty$2) return 0;
    log_type(ty$1);
    var desc = ty$1[1];
    set_desc(ty$1, [6, ty$2]);
    var match = ty$2[1];
    if
     (typeof desc !== "number"
      && 0 === desc[0] && typeof match !== "number" && 0 === match[0]){
     var name = match[1], name$0 = desc[1];
     if(! name$0) return name ? 0 : 0;
     if(name){
      var a = ty$1[2] < ty$2[2] ? 1 : 0;
      return a ? (log_type(ty$2), set_desc(ty$2, [0, name$0])) : a;
     }
     log_type(ty$2);
     return set_desc(ty$2, [0, name$0]);
    }
    return 0;
   }
   function set_type_desc(ty, td){
    var ty$0 = repr(ty), a = td !== ty$0[1] ? 1 : 0;
    return a ? (log_type(ty$0), set_desc(ty$0, td)) : a;
   }
   function set_level$0(ty, level){
    var ty$0 = repr(ty), a = level !== ty$0[2] ? 1 : 0;
    if(! a) return a;
    if(ty$0[4] <= last_snapshot[1]) log_change([2, ty$0, ty$0[2]]);
    return set_level(ty$0, level);
   }
   function set_scope$0(ty, scope){
    var ty$0 = repr(ty), a = scope !== ty$0[3] ? 1 : 0;
    if(! a) return a;
    if(ty$0[4] <= last_snapshot[1]) log_change([3, ty$0, ty$0[3]]);
    return set_scope(ty$0, scope);
   }
   function set_univar(rty, ty){
    log_change([8, rty, rty[1]]);
    rty[1] = [0, ty];
    return 0;
   }
   function set_name(nm, v){log_change([4, nm, nm[1]]); nm[1] = v; return 0;}
   function link_row_field_ext(inside$0, v){
    var inside = inside$0;
    for(;;){
     if(typeof inside !== "number" && 0 !== inside[0]){
      var e = inside[4], rf = e[1];
      if(typeof rf !== "number"){inside = rf; continue;}
      if(rf){log_change([5, e]); e[1] = v; return 0;}
      inside = rf;
      continue;
     }
     return Stdlib[1].call(null, cst_Types_link_row_field_ext);
    }
   }
   function link_kind(rk$0, k$0){
    var rk = rk$0;
    for(;;){
     if(typeof rk === "number")
      return Stdlib[1].call(null, cst_Types_link_kind);
     var a = rk[1];
     if(typeof a === "number"){
      if(! a){
       var
        k = field_kind_internal_repr(k$0),
        b = k !== rk ? 1 : 0,
        c = b ? (log_change([6, rk]), rk[1] = k, 0) : b;
       return c;
      }
      rk = a;
     }
     else
      rk = a;
    }
   }
   function link_commu(rc$0, c$0){
    var rc = rc$0;
    for(;;){
     if(typeof rc === "number")
      return Stdlib[1].call(null, cst_Types_link_commu);
     var a = rc[1];
     if(typeof a === "number"){
      if(a){var c = c$0; break;}
      rc = a;
     }
     else
      rc = a;
    }
    for(;;){
     if(typeof c !== "number"){
      var b = c[1];
      if(typeof b !== "number" || ! b){c = b; continue;}
     }
     var
      d = c !== rc ? 1 : 0,
      e = d ? (log_change([7, rc]), rc[1] = c, 0) : d;
     return e;
    }
   }
   function set_commu_ok(c){return link_commu(c, 0);}
   function snapshot(param){
    var old = last_snapshot[1];
    last_snapshot[1] = new_id[1];
    return [0, trail[1], old];
   }
   function backtrack$0(cleanup_abbrev, param$0){
    var old = param$0[2], changes = param$0[1], change = changes[1];
    if(typeof change === "number")
     return change
             ? Stdlib[2].call(null, cst_Types_backtrack)
             : (last_snapshot[1] = old, 0);
    caml_call1(cleanup_abbrev, 0);
    var backlog = 0, param = change;
    for(;;){
     if(typeof param === "number"){
      if(param) throw caml_maybe_attach_backtrace([0, Assert_failure, fF], 1);
      Stdlib_List[17].call(null, undo_change, backlog);
      changes[1] = 0;
      last_snapshot[1] = old;
      trail[1] = changes;
      return 0;
     }
     var next = param[2], ch = param[1], d = next[1];
     next[1] = 1;
     var accu = [0, ch, backlog];
     backlog = accu;
     param = d;
    }
   }
   function undo_first_change_after(param){
    var changes = param[1], match = changes[1];
    if(typeof match === "number") return 0;
    var ch = match[1];
    return undo_change(ch);
   }
   function undo_compress(param){
    var changes = param[1];
    if(typeof changes[1] === "number") return 0;
    var log = 0, r = changes;
    for(;;){
     var match = r[1];
     if(typeof match === "number") break;
     if(1 === match[1][0]){
      var next$0 = match[2], log$0 = [0, r, log];
      log = log$0;
      r = next$0;
     }
     else{var next = match[2]; r = next;}
    }
    return Stdlib_List[17].call
            (null,
             function(r){
              var match = r[1];
              if(typeof match !== "number"){
               var match$0 = match[1];
               if(1 === match$0[0]){
                var
                 next = match[2],
                 d = match$0[3],
                 desc = match$0[2],
                 ty = match$0[1];
                if(ty[1] === d){set_desc(ty, desc); r[1] = next[1]; return 0;}
               }
              }
              return 0;
             },
             log);
   }
   var
    K =
      [0,
       eq$0,
       print$14,
       rank$0,
       compare$14,
       max,
       print_signature,
       default_signature],
    l =
      [0,
       0,
       127,
       covariant,
       unknown,
       union,
       inter,
       subset,
       eq,
       set$0,
       mem$0,
       conjugate,
       get_upper,
       get_lower,
       unknown_signature],
    j = a[4][69],
    g = a[4][69],
    x = a[4][68],
    y = a[4][68],
    o = [0, compare$13, equal$8, hash$8],
    e =
      [0,
       create_expr,
       set_desc,
       set_level,
       set_scope,
       repr,
       type_expr,
       coerce$1,
       set_stub_desc],
    Dynlink_compilerlibs_Types =
      [0,
       is_commu_ok,
       commu_ok,
       commu_var,
       field_kind_repr,
       1,
       2,
       field_private,
       field_kind_internal_repr,
       get_desc,
       get_level,
       get_scope,
       get_id,
       e,
       create_expr,
       newty3,
       newty2,
       o,
       eq_type,
       compare_type,
       create_row,
       row_fields,
       row_more,
       row_closed,
       row_fixed,
       row_name,
       set_row_name,
       get_row_field,
       row_repr,
       row_field_repr,
       rf_present,
       rf_absent,
       rf_either,
       rf_either_of,
       eq_row_field_ext,
       changed_row_field_exts,
       match_row_field,
       y,
       x,
       g,
       j,
       l,
       K,
       item_visibility,
       equal_tag,
       may_equal_constr,
       bound_value_identifiers,
       signature_item_id,
       snapshot,
       backtrack$0,
       undo_first_change_after,
       undo_compress,
       link_type,
       set_type_desc,
       set_level$0,
       set_scope$0,
       set_name,
       link_row_field_ext,
       set_univar,
       link_kind,
       link_commu,
       set_commu_ok];
   caml_register_global
    (1308, Dynlink_compilerlibs_Types, "Dynlink_compilerlibs.Types");
   function wrap_repr(f, ty){return caml_call1(f, caml_call1(e[5], ty));}
   function wrap_type_expr(f, tty){
    return caml_call1(f, caml_call1(e[6], tty));
   }
   var
    TransientTypeSet = Stdlib_Set[1].call(null, [0, o[1]]),
    empty$2 = TransientTypeSet[1],
    is_empty = TransientTypeSet[2],
    mem$1 = TransientTypeSet[3],
    add$2 = TransientTypeSet[4],
    singleton = TransientTypeSet[5],
    remove$0 = TransientTypeSet[6],
    union$0 = TransientTypeSet[7],
    inter$0 = TransientTypeSet[8],
    disjoint = TransientTypeSet[9],
    diff = TransientTypeSet[10],
    compare$15 = TransientTypeSet[11],
    equal$9 = TransientTypeSet[12],
    subset$0 = TransientTypeSet[13],
    iter$1 = TransientTypeSet[14],
    map$8 = TransientTypeSet[15],
    fold = TransientTypeSet[16],
    for_all$0 = TransientTypeSet[17],
    filter = TransientTypeSet[19],
    filter_map = TransientTypeSet[20],
    partition = TransientTypeSet[21],
    cardinal = TransientTypeSet[22],
    min_elt = TransientTypeSet[24],
    min_elt_opt = TransientTypeSet[25],
    max_elt = TransientTypeSet[26],
    max_elt_opt = TransientTypeSet[27],
    choose = TransientTypeSet[28],
    choose_opt = TransientTypeSet[29],
    split = TransientTypeSet[30],
    find$0 = TransientTypeSet[31],
    find_opt = TransientTypeSet[32],
    find_first = TransientTypeSet[33],
    find_first_opt = TransientTypeSet[34],
    find_last = TransientTypeSet[35],
    find_last_opt = TransientTypeSet[36],
    of_list = TransientTypeSet[37],
    to_seq_from = TransientTypeSet[38],
    to_seq$0 = TransientTypeSet[39],
    to_rev_seq = TransientTypeSet[40],
    add_seq = TransientTypeSet[41],
    of_seq$0 = TransientTypeSet[42];
   function add$3(a){return wrap_repr(add$2, a);}
   function mem$2(a){return wrap_repr(mem$1, a);}
   function singleton$0(a){return wrap_repr(singleton, a);}
   function exists$0(p){
    return caml_call1
            (TransientTypeSet[18], function(a){return wrap_type_expr(p, a);});
   }
   function elements(set){
    var a = caml_call1(TransientTypeSet[23], set);
    return Stdlib_List[19].call(null, e[6], a);
   }
   var
    TypeSet =
      [0,
       empty$2,
       is_empty,
       remove$0,
       union$0,
       inter$0,
       disjoint,
       diff,
       compare$15,
       equal$9,
       subset$0,
       iter$1,
       map$8,
       fold,
       for_all$0,
       filter,
       filter_map,
       partition,
       cardinal,
       min_elt,
       min_elt_opt,
       max_elt,
       max_elt_opt,
       choose,
       choose_opt,
       split,
       find$0,
       find_opt,
       find_first,
       find_first_opt,
       find_last,
       find_last_opt,
       of_list,
       to_seq_from,
       to_seq$0,
       to_rev_seq,
       add_seq,
       of_seq$0,
       add$3,
       mem$2,
       singleton$0,
       exists$0,
       elements],
    TransientTypeMap = Stdlib_Map[1].call(null, [0, o[1]]),
    empty$3 = TransientTypeMap[1],
    is_empty$0 = TransientTypeMap[2],
    mem$3 = TransientTypeMap[3],
    update = TransientTypeMap[5],
    remove$1 = TransientTypeMap[7],
    merge = TransientTypeMap[8],
    union$1 = TransientTypeMap[9],
    compare$16 = TransientTypeMap[10],
    equal$10 = TransientTypeMap[11],
    iter$2 = TransientTypeMap[12],
    for_all$1 = TransientTypeMap[14],
    exists$1 = TransientTypeMap[15],
    filter$0 = TransientTypeMap[16],
    filter_map$0 = TransientTypeMap[17],
    partition$0 = TransientTypeMap[18],
    cardinal$0 = TransientTypeMap[19],
    bindings = TransientTypeMap[20],
    min_binding = TransientTypeMap[21],
    min_binding_opt = TransientTypeMap[22],
    max_binding = TransientTypeMap[23],
    max_binding_opt = TransientTypeMap[24],
    choose$0 = TransientTypeMap[25],
    choose_opt$0 = TransientTypeMap[26],
    split$0 = TransientTypeMap[27],
    find_opt$0 = TransientTypeMap[29],
    find_first$0 = TransientTypeMap[30],
    find_first_opt$0 = TransientTypeMap[31],
    find_last$0 = TransientTypeMap[32],
    find_last_opt$0 = TransientTypeMap[33],
    map$9 = TransientTypeMap[34],
    mapi$0 = TransientTypeMap[35],
    to_seq$1 = TransientTypeMap[36],
    to_rev_seq$0 = TransientTypeMap[37],
    to_seq_from$0 = TransientTypeMap[38],
    add_seq$0 = TransientTypeMap[39],
    of_seq$1 = TransientTypeMap[40],
    fG = TransientTypeMap[4],
    fH = TransientTypeMap[6],
    fI = TransientTypeMap[28];
   function add$4(ty){return wrap_repr(fG, ty);}
   function find$1(ty){return wrap_repr(fI, ty);}
   function singleton$1(ty){return wrap_repr(fH, ty);}
   function fold$0(f){
    return caml_call1
            (TransientTypeMap[13], function(a){return wrap_type_expr(f, a);});
   }
   var
    TypeMap =
      [0,
       empty$3,
       is_empty$0,
       mem$3,
       update,
       remove$1,
       merge,
       union$1,
       compare$16,
       equal$10,
       iter$2,
       for_all$1,
       exists$1,
       filter$0,
       filter_map$0,
       partition$0,
       cardinal$0,
       bindings,
       min_binding,
       min_binding_opt,
       max_binding,
       max_binding_opt,
       choose$0,
       choose_opt$0,
       split$0,
       find_opt$0,
       find_first$0,
       find_first_opt$0,
       find_last$0,
       find_last_opt$0,
       map$9,
       mapi$0,
       to_seq$1,
       to_rev_seq$0,
       to_seq_from$0,
       add_seq$0,
       of_seq$1,
       add$4,
       find$1,
       singleton$1,
       fold$0],
    TransientTypeHash = Stdlib_Hashtbl[26].call(null, [0, o[2], o[3]]),
    create$4 = TransientTypeHash[1],
    clear = TransientTypeHash[2],
    reset$3 = TransientTypeHash[3],
    copy$0 = TransientTypeHash[4],
    remove$2 = TransientTypeHash[6],
    find_opt$1 = TransientTypeHash[8],
    find_all$0 = TransientTypeHash[9],
    replace = TransientTypeHash[10],
    mem$4 = TransientTypeHash[11],
    filter_map_inplace = TransientTypeHash[13],
    fold$1 = TransientTypeHash[14],
    length$0 = TransientTypeHash[15],
    stats = TransientTypeHash[16],
    to_seq$2 = TransientTypeHash[17],
    to_seq_keys = TransientTypeHash[18],
    to_seq_values = TransientTypeHash[19],
    add_seq$1 = TransientTypeHash[20],
    replace_seq = TransientTypeHash[21],
    of_seq$2 = TransientTypeHash[22],
    fJ = TransientTypeHash[5],
    fK = TransientTypeHash[7];
   function add$5(hash){
    var a = caml_call1(fJ, hash);
    return function(b){return wrap_repr(a, b);};
   }
   function find$2(hash){
    var a = caml_call1(fK, hash);
    return function(b){return wrap_repr(a, b);};
   }
   function iter$3(f){
    return caml_call1
            (TransientTypeHash[12], function(a){return wrap_type_expr(f, a);});
   }
   var
    TypeHash =
      [0,
       create$4,
       clear,
       reset$3,
       copy$0,
       remove$2,
       find_opt$1,
       find_all$0,
       replace,
       mem$4,
       filter_map_inplace,
       fold$1,
       length$0,
       stats,
       to_seq$2,
       to_seq_keys,
       to_seq_values,
       add_seq$1,
       replace_seq,
       of_seq$2,
       add$5,
       find$2,
       iter$3];
   function equal$11(param, b){
    var
     t2 = b[2],
     t2$0 = b[1],
     t1 = param[2],
     t1$0 = param[1],
     a = t1$0 === t2$0 ? 1 : 0,
     c = a ? t1 === t2 ? 1 : 0 : a;
    return c;
   }
   function hash$9(param){
    var t = param[2], t$0 = param[1];
    return t$0[4] + (93 * t[4] | 0) | 0;
   }
   var
    TransientTypePairs = Stdlib_Hashtbl[26].call(null, [0, equal$11, hash$9]);
   function create$5(n){return [0, caml_call1(TransientTypePairs[1], n), 0];}
   function clear$0(t){
    t[2] = 0;
    return caml_call1(TransientTypePairs[2], t[1]);
   }
   function repr2(param){
    var t2 = param[2], t1 = param[1], a = caml_call1(e[5], t2);
    return [0, caml_call1(e[5], t1), a];
   }
   function add$6(t, p){
    var p$0 = repr2(p);
    return caml_call2(TransientTypePairs[11], t[1], p$0)
            ? 0
            : (caml_call3
               (TransientTypePairs[5], t[1], p$0, 0),
              t[2] = [0, p$0, t[2]],
              0);
   }
   function mem$5(t, p){
    var a = repr2(p);
    return caml_call2(TransientTypePairs[11], t[1], a);
   }
   function iter$4(f, t){
    var a = Stdlib_List[9].call(null, t[2]);
    return Stdlib_List[17].call
            (null,
             function(param){
              var t2 = param[2], t1 = param[1], a = caml_call1(e[6], t2);
              return caml_call1(f, [0, caml_call1(e[6], t1), a]);
             },
             a);
   }
   var
    print_raw =
      [0,
       function(param){
        throw caml_maybe_attach_backtrace([0, Assert_failure, fL], 1);
       }];
   function newgenty(desc){return newty3(highest_scope, lowest_scope, desc);}
   function newgenvar(name, param){
    var desc = [0, name];
    return newty3(highest_scope, lowest_scope, desc);
   }
   function newgenstub(scope){return newty3(highest_scope, scope, L);}
   function is_Tvar(ty){
    var match = get_desc(ty);
    if(typeof match !== "number" && 0 === match[0]) return 1;
    return 0;
   }
   function is_Tunivar(ty){
    var match = get_desc(ty);
    if(typeof match !== "number" && 9 === match[0]) return 1;
    return 0;
   }
   function is_Tconstr(ty){
    var match = get_desc(ty);
    if(typeof match !== "number" && 3 === match[0]) return 1;
    return 0;
   }
   function merge_fixed_explanation(fixed1, fixed2){
    a:
    {
     if(fixed1){
      var a = fixed1[1];
      if(typeof a !== "number" && 0 === a[0]){var x$2 = fixed1; break a;}
     }
     else if(! fixed2) return 0;
     if(fixed2){
      var b = fixed2[1];
      if(typeof b !== "number" && 0 === b[0]){var x$2 = fixed2; break a;}
     }
     b:
     {
      if(fixed1){
       var c = fixed1[1];
       if(typeof c === "number" && ! c){var x$1 = fixed1; break b;}
      }
      if(fixed2){
       var d = fixed2[1];
       if(typeof d === "number" && ! d){var x$1 = fixed2; break b;}
      }
      c:
      {
       if(fixed1 && typeof fixed1[1] !== "number"){var x$0 = fixed1; break c;}
       if(fixed2 && typeof fixed2[1] !== "number"){var x$0 = fixed2; break c;}
       var x = fixed1 || fixed2;
       return x;
      }
      return x$0;
     }
     return x$1;
    }
    return x$2;
   }
   function fixed_explanation(row){
    var x = row_fixed(row);
    if(x) return x;
    var ty = row_more(row), match = get_desc(ty);
    if(typeof match !== "number")
     switch(match[0]){
       case 3:
        var p = match[1]; return [0, [1, p]];
       case 9:
        return [0, [0, ty]];
       case 0: break;
       default: throw caml_maybe_attach_backtrace([0, Assert_failure, fM], 1);
     }
    return 0;
   }
   function is_fixed(row){return row_fixed(row) ? 1 : 0;}
   function has_fixed_explanation(row){
    return 0 !== fixed_explanation(row) ? 1 : 0;
   }
   function static_row(row){
    var a = row_closed(row);
    if(! a) return a;
    var b = row_fields(row);
    return Stdlib_List[32].call
            (null,
             function(param){
              var f = param[2], match = row_field_repr(f);
              if(typeof match !== "number" && 0 !== match[0]) return 0;
              return 1;
             },
             b);
   }
   function hash_variant(s){
    var accu = [0, 0], a = caml_ml_string_length(s) - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var c = caml_string_get(s, i);
      accu[1] = (223 * accu[1] | 0) + c | 0;
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    accu[1] = accu[1] & 2147483647;
    return 1073741823 < accu[1] ? accu[1] + 2147483648 | 0 : accu[1];
   }
   function proxy(ty){
    var match = get_desc(ty);
    if(typeof match !== "number")
     switch(match[0]){
       case 4:
        var ty$0 = match[1], ty$1 = ty$0;
        for(;;){
         var match$0 = get_desc(ty$1);
         if(typeof match$0 === "number") return ty$1;
         switch(match$0[0]){
           case 5:
            var ty$2 = match$0[4]; ty$1 = ty$2; break;
           case 0:
           case 3:
           case 9:
            return ty$1;
           default:
            throw caml_maybe_attach_backtrace([0, Assert_failure, fN], 1);
         }
        }
        break;
       case 8:
        var row = match[1]; if(! static_row(row)) return row_more(row); break;
     }
    return ty;
   }
   function row_of_type(t){
    var match = get_desc(t);
    if(typeof match !== "number")
     switch(match[0]){
       case 4:
        var t$0 = match[1], t$1 = t$0;
        for(;;){
         var match$0 = get_desc(t$1);
         if(typeof match$0 !== "number" && 5 === match$0[0]){var t$2 = match$0[4]; t$1 = t$2; continue;}
         return t$1;
        }
       case 8:
        var row = match[1]; return row_more(row);
     }
    return t;
   }
   function has_constr_row(t){
    var a = 1 - is_Tconstr(t);
    return a ? is_Tconstr(row_of_type(t)) : a;
   }
   function is_row_name(s){
    var
     l = caml_ml_string_length(s),
     a = 4 < l ? 1 : 0,
     b =
       a
        ? Stdlib_String[15].call(null, s, l - 4 | 0, 4) === "#row" ? 1 : 0
        : a;
    return b;
   }
   function is_constr_row(allow_ident, t){
    var match = get_desc(t);
    if(typeof match !== "number" && 3 === match[0]){
     var match$0 = match[1];
     switch(match$0[0]){
       case 0:
        var id = match$0[1];
        if(allow_ident){var name = id[1]; return is_row_name(name);}
        break;
       case 1:
        var s = match$0[2]; return is_row_name(s);
     }
    }
    return 0;
   }
   function set_static_row_name(decl, path){
    var match = decl[5];
    if(! match) return 0;
    var ty = match[1], match$0 = get_desc(ty);
    if(typeof match$0 !== "number" && 8 === match$0[0]){
     var row = match$0[1];
     if(static_row(row)){
      var row$0 = set_row_name(row, [0, [0, path, decl[1]]]);
      return set_type_desc(ty, [8, row$0]);
     }
    }
    return 0;
   }
   function fold_row(f, init, row){
    var
     a = row_fields(row),
     result =
       Stdlib_List[25].call
        (null,
         function(init, param){
          var fi = param[2], match = row_field_repr(fi);
          if(typeof match !== "number"){
           if(0 !== match[0]){
            var tl = match[2];
            return Stdlib_List[25].call(null, f, init, tl);
           }
           var match$0 = match[1];
           if(match$0){var ty = match$0[1]; return caml_call2(f, init, ty);}
          }
          return init;
         },
         init,
         a),
     match = get_desc(row_more(row));
    if(typeof match !== "number")
     switch(match[0]){
       case 0:
       case 3:
       case 7:
       case 9: break;
       default: throw caml_maybe_attach_backtrace([0, Assert_failure, fO], 1);
     }
    var
     b = row_name(row),
     match$0 =
       Stdlib_Option[7].call
        (null,
         function(param){
          var l = param[2];
          return Stdlib_List[25].call(null, f, result, l);
         },
         b);
    if(! match$0) return result;
    var result$0 = match$0[1];
    return result$0;
   }
   function iter_row(f, row){
    return fold_row(function(param, v){return caml_call1(f, v);}, 0, row);
   }
   function fold_type_expr(f, init, ty){
    var match = get_desc(ty);
    if(typeof match === "number") return init;
    switch(match[0]){
      case 1:
       var ty2 = match[3], ty1 = match[2], result = caml_call2(f, init, ty1);
       return caml_call2(f, result, ty2);
      case 2:
       var l = match[1]; return Stdlib_List[25].call(null, f, init, l);
      case 3:
       var l$0 = match[2]; return Stdlib_List[25].call(null, f, init, l$0);
      case 4:
       var ty$0 = match[1], match$0 = match[2][1];
       if(! match$0) return caml_call2(f, init, ty$0);
       var p = match$0[1][2], result$0 = caml_call2(f, init, ty$0);
       return Stdlib_List[25].call(null, f, result$0, p);
      case 5:
       var
        ty2$0 = match[4],
        ty1$0 = match[3],
        result$1 = caml_call2(f, init, ty1$0);
       return caml_call2(f, result$1, ty2$0);
      case 8:
       var row = match[1], result$2 = fold_row(f, init, row);
       return caml_call2(f, result$2, row_more(row));
      case 10:
       var
        tyl = match[2],
        ty$1 = match[1],
        result$3 = caml_call2(f, init, ty$1);
       return Stdlib_List[25].call(null, f, result$3, tyl);
      case 11:
       var fl = match[2];
       return Stdlib_List[25].call
               (null,
                function(result, param){
                 var ty = param[2];
                 return caml_call2(f, result, ty);
                },
                init,
                fl);
      case 0:
      case 9:
       return init;
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, fP], 1);
    }
   }
   function iter_type_expr(f, ty){
    return fold_type_expr(function(param, v){return caml_call1(f, v);}, 0, ty);
   }
   function iter_abbrev(f, param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return 0;
     if(0 === param[0]){
      var rem = param[5], ty = param[4], ty$0 = param[3];
      caml_call1(f, ty$0);
      caml_call1(f, ty);
      param = rem;
     }
     else{var rem$0 = param[1]; param = rem$0[1];}
    }
   }
   function iter_type_expr_cstr_args(f, param){
    if(0 === param[0]){
     var tl = param[1];
     return Stdlib_List[17].call(null, f, tl);
    }
    var lbls = param[1];
    return Stdlib_List[17].call
            (null, function(d){return caml_call1(f, d[3]);}, lbls);
   }
   function map_type_expr_cstr_args(f, param){
    if(0 === param[0]){
     var tl = param[1];
     return [0, Stdlib_List[19].call(null, f, tl)];
    }
    var lbls = param[1];
    return [1,
            Stdlib_List[19].call
             (null,
              function(d){
               var a = d[6], b = d[5], c = d[4], e = caml_call1(f, d[3]);
               return [0, d[1], d[2], e, c, b, a];
              },
              lbls)];
   }
   function iter_type_expr_kind(f, param){
    if(typeof param === "number") return 0 === param ? 0 : 0;
    if(0 === param[0]){
     var lbls = param[1];
     return Stdlib_List[17].call
             (null, function(d){return caml_call1(f, d[3]);}, lbls);
    }
    var cstrs = param[1];
    return Stdlib_List[17].call
            (null,
             function(cd){
              iter_type_expr_cstr_args(f, cd[2]);
              return Stdlib_Option[9].call(null, f, cd[3]);
             },
             cstrs);
   }
   function it_signature(it){
    var a = caml_call1(it[2], it), b = Stdlib_List[17];
    return function(c){return b(a, c);};
   }
   function it_signature_item(it, param){
    switch(param[0]){
      case 0:
       var vd = param[2]; return caml_call2(it[3], it, vd);
      case 1:
       var td = param[2]; return caml_call2(it[4], it, td);
      case 2:
       var td$0 = param[2]; return caml_call2(it[5], it, td$0);
      case 3:
       var md = param[3]; return caml_call2(it[6], it, md);
      case 4:
       var mtd = param[2]; return caml_call2(it[7], it, mtd);
      case 5:
       var cd = param[2]; return caml_call2(it[8], it, cd);
      default: var ctd = param[2]; return caml_call2(it[9], it, ctd);
    }
   }
   function it_value_description(it, vd){
    return caml_call2(it[15], it, vd[1]);
   }
   function it_type_declaration(it, td){
    var a = td[1], b = caml_call1(it[15], it);
    Stdlib_List[17].call(null, b, a);
    var c = td[5], d = caml_call1(it[15], it);
    Stdlib_Option[9].call(null, d, c);
    return caml_call2(it[13], it, td[3]);
   }
   function it_extension_constructor(it, td){
    caml_call1(it[16], td[1]);
    var a = td[2], b = caml_call1(it[15], it);
    Stdlib_List[17].call(null, b, a);
    var c = td[3];
    iter_type_expr_cstr_args(caml_call1(it[15], it), c);
    var d = td[4], e = caml_call1(it[15], it);
    return Stdlib_Option[9].call(null, e, d);
   }
   function it_module_declaration(it, md){return caml_call2(it[11], it, md[1]);
   }
   function it_modtype_declaration(it, mtd){
    var a = mtd[1], b = caml_call1(it[11], it);
    return Stdlib_Option[9].call(null, b, a);
   }
   function it_class_declaration(it, cd){
    var a = cd[1], b = caml_call1(it[15], it);
    Stdlib_List[17].call(null, b, a);
    caml_call2(it[12], it, cd[2]);
    var c = cd[4], d = caml_call1(it[15], it);
    Stdlib_Option[9].call(null, d, c);
    return caml_call1(it[16], cd[3]);
   }
   function it_class_type_declaration(it, ctd){
    var a = ctd[1], b = caml_call1(it[15], it);
    Stdlib_List[17].call(null, b, a);
    caml_call2(it[12], it, ctd[2]);
    return caml_call1(it[16], ctd[3]);
   }
   function it_functor_param(it, param){
    if(! param) return 0;
    var mt = param[2];
    return caml_call2(it[11], it, mt);
   }
   function it_module_type(it, param){
    switch(param[0]){
      case 1:
       var sg = param[1]; return caml_call2(it[1], it, sg);
      case 2:
       var mt = param[2], p$0 = param[1];
       caml_call2(it[10], it, p$0);
       return caml_call2(it[11], it, mt);
      default: var p = param[1]; return caml_call1(it[16], p);
    }
   }
   function it_class_type(it, param){
    switch(param[0]){
      case 0:
       var cty = param[3], tyl = param[2], p = param[1];
       caml_call1(it[16], p);
       var a = caml_call1(it[15], it);
       Stdlib_List[17].call(null, a, tyl);
       return caml_call2(it[12], it, cty);
      case 1:
       var cs = param[1];
       caml_call2(it[15], it, cs[1]);
       caml_call2(it[15], it, cs[2]);
       caml_call2
        (j[12],
         function(param, a){var ty = a[3]; return caml_call2(it[15], it, ty);},
         cs[3]);
       return caml_call2
               (g[12],
                function(param, a){
                 var ty = a[3];
                 return caml_call2(it[15], it, ty);
                },
                cs[4]);
      default:
       var cty$0 = param[3], ty = param[2];
       caml_call2(it[15], it, ty);
       return caml_call2(it[12], it, cty$0);
    }
   }
   function it_type_kind(it, kind){
    return iter_type_expr_kind(caml_call1(it[15], it), kind);
   }
   function it_do_type_expr(it, ty){
    iter_type_expr(caml_call1(it[15], it), ty);
    var match = get_desc(ty);
    a:
    if(typeof match !== "number"){
     switch(match[0]){
       case 4:
        var a = match[2][1]; if(! a) break a; var p = a[1][1]; break;
       case 8:
        var row = match[1], b = row_name(row);
        return Stdlib_Option[9].call
                (null,
                 function(param){
                  var p = param[1];
                  return caml_call1(it[16], p);
                 },
                 b);
       case 3:
       case 11:
        var p = match[1]; break;
       default: break a;
     }
     return caml_call1(it[16], p);
    }
    return 0;
   }
   function it_path(p){return 0;}
   function copy_row(f, fixed, row, keep, more){
    var
     match = row_repr(row),
     orig_name = match[5],
     orig_fixed = match[4],
     closed = match[3],
     orig_fields = match[1],
     fields =
       Stdlib_List[19].call
        (null,
         function(param){
          var fi = param[2], l = param[1], match = row_field_repr(fi);
          if(typeof match === "number")
           var a = rf_absent;
          else if(0 === match[0])
           var
            oty = match[1],
            oty$0 = Stdlib_Option[7].call(null, f, oty),
            a = [0, oty$0];
          else
           var
            m = match[3],
            tl = match[2],
            c = match[1],
            use_ext_of = keep ? [0, fi] : 0,
            m$0 = is_fixed(row) ? fixed : m,
            tl$0 = Stdlib_List[19].call(null, f, tl),
            a = rf_either(use_ext_of, c, tl$0, m$0);
          return [0, l, a];
         },
         orig_fields);
    if(orig_name)
     var
      match$0 = orig_name[1],
      tl = match$0[2],
      path = match$0[1],
      name = [0, [0, path, Stdlib_List[19].call(null, f, tl)]];
    else
     var name = 0;
    var fixed$0 = fixed ? orig_fixed : 0;
    return [0, fields, more, closed, fixed$0, name];
   }
   function copy_type_desc(opt$0, f, ty$4){
    var opt = opt$0, ty = ty$4;
    a:
    for(;;){
     if(opt) var sth = opt[1], keep_names = sth; else var keep_names = 0;
     if(typeof ty === "number") return 0;
     switch(ty[0]){
       case 0:
        return keep_names ? ty : fQ;
       case 1:
        var
         c = ty[4],
         ty2 = ty[3],
         ty1 = ty[2],
         p = ty[1],
         a = is_commu_ok(c) ? commu_ok : commu_var(0),
         b = caml_call1(f, ty2);
        return [1, p, caml_call1(f, ty1), b, a];
       case 2:
        var l = ty[1]; return [2, Stdlib_List[19].call(null, f, l)];
       case 3:
        var l$0 = ty[2], p$0 = ty[1];
        return [3, p$0, Stdlib_List[19].call(null, f, l$0), [0, 0]];
       case 4:
        var ty$0 = ty[1], match = ty[2][1];
        if(! match) return [4, caml_call1(f, ty$0), [0, 0]];
        var
         match$0 = match[1],
         tl = match$0[2],
         p$1 = match$0[1],
         d = [0, [0, [0, p$1, Stdlib_List[19].call(null, f, tl)]]];
        return [4, caml_call1(f, ty$0), d];
       case 5:
        var
         ty2$0 = ty[4],
         ty1$0 = ty[3],
         k = ty[2],
         p$2 = ty[1],
         e = caml_call1(f, ty2$0),
         g = caml_call1(f, ty1$0);
        return [5, p$2, field_kind_internal_repr(k), g, e];
       case 6:
        var ty$1 = ty[1], ty$2 = get_desc(ty$1); opt = 0; ty = ty$2; break;
       case 7:
        throw caml_maybe_attach_backtrace([0, Assert_failure, fR], 1);
       case 8:
        throw caml_maybe_attach_backtrace([0, Assert_failure, fS], 1);
       case 9:
        return ty;
       case 10:
        var
         tyl = ty[2],
         ty$3 = ty[1],
         tyl$0 = Stdlib_List[19].call(null, f, tyl);
        return [10, caml_call1(f, ty$3), tyl$0];
       default: break a;
     }
    }
    var fl = ty[2], p$3 = ty[1];
    return [11,
            p$3,
            Stdlib_List[19].call
             (null,
              function(param){
               var ty = param[2], n = param[1];
               return [0, n, caml_call1(f, ty)];
              },
              fl)];
   }
   function redirect_desc(copy_scope, ty, desc){
    var ty$0 = caml_call1(e[5], ty);
    copy_scope[1] = [0, [0, ty$0, ty$0[1]], copy_scope[1]];
    return caml_call2(e[2], ty$0, desc);
   }
   function with_scope(f){
    var scope = [0, 0], res = caml_call1(f, scope), saved_desc = scope[1];
    Stdlib_List[17].call
     (null,
      function(param){
       var desc = param[2], ty = param[1];
       return caml_call2(e[2], ty, desc);
      },
      saved_desc);
    return res;
   }
   var For_copy = [0, redirect_desc, with_scope];
   function find_expans(priv$0, p1, param$0){
    var param = param$0;
    for(;;){
     if(typeof param === "number") return 0;
     if(0 === param[0]){
      var priv = param[1], ty = param[4], p2 = param[2];
      a:
      {if(priv$0 && ! priv){var a = 0; break a;} var a = 1;}
      if(a && same$0(p1, p2)) return [0, ty];
      var rem = param[5];
      param = rem;
     }
     else{var rem$0 = param[1][1]; param = rem$0;}
    }
   }
   var memo = s_ref(0);
   function cleanup_abbrev(param){
    Stdlib_List[17].call
     (null, function(abbr){abbr[1] = 0; return 0;}, memo[1]);
    memo[1] = 0;
    return 0;
   }
   function memorize_abbrev(mem, priv, path, v$0, v){
    mem[1] = [0, priv, path, v$0, v, mem[1]];
    memo[1] = [0, mem, memo[1]];
    return 0;
   }
   function forget_abbrev_rec(mem, path){
    if(typeof mem === "number") return mem;
    if(0 !== mem[0]){
     var mem$0 = mem[1];
     mem$0[1] = forget_abbrev_rec(mem$0[1], path);
     throw caml_maybe_attach_backtrace(Stdlib[3], 1);
    }
    var priv = mem[1], rem = mem[5], path$0 = mem[2];
    if(same$0(path, path$0)) return rem;
    var rem$0 = mem[5], v = mem[4], v$0 = mem[3], path$1 = mem[2];
    return [0, priv, path$1, v$0, v, forget_abbrev_rec(rem$0, path)];
   }
   function forget_abbrev(mem, path){
    try{mem[1] = forget_abbrev_rec(mem[1], path); var a = 0; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function backtrack$1(a){return backtrack$0(cleanup_abbrev, a);}
   function is_optional(param){
    if(typeof param !== "number" && 0 !== param[0]) return 1;
    return 0;
   }
   function label_name(param){
    if(typeof param === "number") return cst$84;
    var s = param[1];
    return s;
   }
   function prefixed_label_name(param){
    if(typeof param === "number") return cst$85;
    if(0 === param[0]){
     var s = param[1];
     return Stdlib[28].call(null, cst$86, s);
    }
    var s$0 = param[1];
    return Stdlib[28].call(null, cst$87, s$0);
   }
   function extract_label(l$0, ls$0){
    var hd = 0, param = ls$0;
    for(;;){
     if(! param) return 0;
     var ls = param[2], p = param[1], t = p[2], l = p[1];
     if(label_name(l) === l$0)
      return [0,
              [0, l, t, 0 !== hd ? 1 : 0, Stdlib_List[12].call(null, hd, ls)]];
     var hd$0 = [0, p, hd];
     hd = hd$0;
     param = ls;
    }
   }
   function signature_of_class_type(param$0){
    var param = param$0;
    for(;;){
     if(1 === param[0]){var sign = param[1]; return sign;}
     var cty = param[3];
     param = cty;
    }
   }
   function class_body(cty$1){
    var cty = cty$1;
    for(;;){if(2 !== cty[0]) return cty; var cty$0 = cty[3]; cty = cty$0;}
   }
   function scrape_class_type(cty$1){
    var cty = cty$1;
    for(;;){if(0 !== cty[0]) return cty; var cty$0 = cty[3]; cty = cty$0;}
   }
   function class_type_arity(param$0){
    var param = param$0;
    for(;;)
     switch(param[0]){
       case 0:
        var cty = param[3]; param = cty; break;
       case 1:
        return 0;
       default: var cty$0 = param[3]; return 1 + class_type_arity(cty$0) | 0;
     }
   }
   function abbreviate_class_type(path, params, cty){
    if(2 !== cty[0]) return [0, path, params, cty];
    var cty$0 = cty[3], ty = cty[2], l = cty[1];
    return [2, l, ty, abbreviate_class_type(path, params, cty$0)];
   }
   function self_type(cty){return signature_of_class_type(cty)[1];}
   function self_type_row(cty){return signature_of_class_type(cty)[2];}
   function methods(sign){
    return caml_call3
            (g[13],
             function(name, param, l){return [0, name, l];},
             sign[4],
             0);
   }
   function virtual_methods(sign){
    return caml_call3
            (g[13],
             function(name, param, l){
              var vr = param[2];
              return vr ? l : [0, name, l];
             },
             sign[4],
             0);
   }
   function concrete_methods(sign){
    return caml_call3
            (g[13],
             function(name, param, s){
              var vr = param[2];
              return vr ? caml_call2(y[4], name, s) : s;
             },
             sign[4],
             y[1]);
   }
   function public_methods(sign){
    return caml_call3
            (g[13],
             function(name, param, l){
              var priv = param[1];
              return priv ? l : [0, name, l];
             },
             sign[4],
             0);
   }
   function instance_vars(sign){
    return caml_call3
            (j[13],
             function(name, param, l){return [0, name, l];},
             sign[3],
             0);
   }
   function virtual_instance_vars(sign){
    return caml_call3
            (j[13],
             function(name, param, l){
              var vr = param[2];
              return vr ? l : [0, name, l];
             },
             sign[3],
             0);
   }
   function concrete_instance_vars(sign){
    return caml_call3
            (j[13],
             function(name, param, s){
              var vr = param[2];
              return vr ? caml_call2(x[4], name, s) : s;
             },
             sign[3],
             x[1]);
   }
   function method_type(label, sign){
    try{var val = caml_call2(g[28], label, sign[4]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      throw caml_maybe_attach_backtrace([0, Assert_failure, fT], 1);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    var ty = val[3];
    return ty;
   }
   function instance_variable_type(label, sign){
    try{var val = caml_call2(j[28], label, sign[3]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      throw caml_maybe_attach_backtrace([0, Assert_failure, fU], 1);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    var ty = val[3];
    return ty;
   }
   function not_marked_node(ty){return 0 <= get_level(ty) ? 1 : 0;}
   function flip_mark_node(ty){
    var ty$0 = caml_call1(e[5], ty);
    return caml_call2(e[3], ty$0, -1 - ty$0[2] | 0);
   }
   function logged_mark_node(ty){
    return set_level$0(ty, -1 - get_level(ty) | 0);
   }
   function try_mark_node(ty){
    var a = not_marked_node(ty), b = a ? (flip_mark_node(ty), 1) : a;
    return b;
   }
   function try_logged_mark_node(ty){
    var a = not_marked_node(ty), b = a ? (logged_mark_node(ty), 1) : a;
    return b;
   }
   function mark_type(ty){
    var a = not_marked_node(ty);
    return a ? (flip_mark_node(ty), iter_type_expr(mark_type, ty)) : a;
   }
   function mark_type_params(ty){return iter_type_expr(mark_type, ty);}
   function it_type_expr(it, ty){
    var a = try_mark_node(ty);
    return a ? caml_call2(it[14], it, ty) : a;
   }
   var
    type_iterators =
      [0,
       it_signature,
       it_signature_item,
       it_value_description,
       it_type_declaration,
       it_extension_constructor,
       it_module_declaration,
       it_modtype_declaration,
       it_class_declaration,
       it_class_type_declaration,
       it_functor_param,
       it_module_type,
       it_class_type,
       it_type_kind,
       it_do_type_expr,
       it_type_expr,
       it_path];
   function unmark_type(ty){
    var a = get_level(ty) < 0 ? 1 : 0;
    return a ? (flip_mark_node(ty), iter_type_expr(unmark_type, ty)) : a;
   }
   function it_type_expr$0(it, ty){return unmark_type(ty);}
   var
    unmark_iterators =
      [0,
       type_iterators[1],
       type_iterators[2],
       type_iterators[3],
       type_iterators[4],
       type_iterators[5],
       type_iterators[6],
       type_iterators[7],
       type_iterators[8],
       type_iterators[9],
       type_iterators[10],
       type_iterators[11],
       type_iterators[12],
       type_iterators[13],
       type_iterators[14],
       it_type_expr$0,
       type_iterators[16]];
   function unmark_type_decl(decl){
    return caml_call2(unmark_iterators[4], unmark_iterators, decl);
   }
   function unmark_extension_constructor(ext){
    Stdlib_List[17].call(null, unmark_type, ext[2]);
    iter_type_expr_cstr_args(unmark_type, ext[3]);
    return Stdlib_Option[9].call(null, unmark_type, ext[4]);
   }
   function unmark_class_signature(sign){
    unmark_type(sign[1]);
    unmark_type(sign[2]);
    caml_call2
     (j[12],
      function(l, param){var t = param[3]; return unmark_type(t);},
      sign[3]);
    return caml_call2
            (g[12],
             function(l, param){var t = param[3]; return unmark_type(t);},
             sign[4]);
   }
   function unmark_class_type(cty){
    return caml_call2(unmark_iterators[12], unmark_iterators, cty);
   }
   function cstr_type_path(cstr){
    var match = get_desc(cstr[2]);
    if(typeof match !== "number" && 3 === match[0]){var p = match[1]; return p;}
    throw caml_maybe_attach_backtrace([0, Assert_failure, fV], 1);
   }
   var
    Dynlink_compilerlibs_Btype =
      [0,
       TypeSet,
       TransientTypeMap,
       TypeMap,
       TypeHash,
       [0, create$5, clear$0, add$6, mem$5, iter$4],
       highest_scope,
       newgenty,
       newgenvar,
       newgenstub,
       is_Tvar,
       is_Tunivar,
       is_Tconstr,
       dummy_method,
       is_fixed,
       has_fixed_explanation,
       fixed_explanation,
       merge_fixed_explanation,
       static_row,
       hash_variant,
       proxy,
       row_of_type,
       has_constr_row,
       is_row_name,
       is_constr_row,
       set_static_row_name,
       iter_type_expr,
       fold_type_expr,
       iter_row,
       fold_row,
       iter_abbrev,
       iter_type_expr_kind,
       iter_type_expr_cstr_args,
       map_type_expr_cstr_args,
       type_iterators,
       unmark_iterators,
       copy_type_desc,
       copy_row,
       For_copy,
       lowest_scope,
       not_marked_node,
       logged_mark_node,
       try_logged_mark_node,
       flip_mark_node,
       try_mark_node,
       mark_type,
       mark_type_params,
       unmark_type,
       unmark_type_decl,
       unmark_extension_constructor,
       unmark_class_type,
       unmark_class_signature,
       find_expans,
       cleanup_abbrev,
       memorize_abbrev,
       forget_abbrev,
       snapshot,
       backtrack$1,
       is_optional,
       label_name,
       prefixed_label_name,
       extract_label,
       signature_of_class_type,
       class_body,
       scrape_class_type,
       class_type_arity,
       abbreviate_class_type,
       self_type,
       self_type_row,
       methods,
       virtual_methods,
       concrete_methods,
       public_methods,
       instance_vars,
       virtual_instance_vars,
       concrete_instance_vars,
       method_type,
       instance_variable_type,
       print_raw,
       cstr_type_path];
   caml_register_global
    (1309, Dynlink_compilerlibs_Btype, "Dynlink_compilerlibs.Btype");
   var identity = [0, Map$3[1], Map$3[1], Map$3[1], 0, 0];
   function add_type_path(id, p, s){
    var a = s[5], b = s[4], c = s[3], d = s[2];
    return [0, caml_call3(Map$3[4], id, [0, p], s[1]), d, c, b, a];
   }
   function add_type$0(id, p, s){return add_type_path([0, id], p, s);}
   function add_type_function(id, params, body, s){
    var a = s[5], b = s[4], c = s[3], d = s[2];
    return [0, caml_call3(Map$3[4], id, [1, params, body], s[1]), d, c, b, a];
   }
   function add_module_path(id, p, s){
    var a = s[5], b = s[4], c = s[3], d = caml_call3(Map$3[4], id, p, s[2]);
    return [0, s[1], d, c, b, a];
   }
   function add_module$0(id, p, s){return add_module_path([0, id], p, s);}
   function add_modtype_path(p, ty, s){
    var a = s[5], b = s[4], c = caml_call3(Map$3[4], p, ty, s[3]);
    return [0, s[1], s[2], c, b, a];
   }
   function add_modtype(id, ty, s){return add_modtype_path([0, id], ty, s);}
   function for_saving(s){return [0, s[1], s[2], s[3], 1, s[5]];}
   function change_locs(s, loc){return [0, s[1], s[2], s[3], s[4], [0, loc]];}
   function loc(s, x){
    var match = s[5];
    if(match){var l = match[1]; return l;}
    if(s[4] && ! keep_locs[1]) return none;
    return x;
   }
   var
    remove_loc =
      [0,
       default_mapper[1],
       default_mapper[2],
       default_mapper[3],
       default_mapper[4],
       default_mapper[5],
       default_mapper[6],
       default_mapper[7],
       default_mapper[8],
       default_mapper[9],
       default_mapper[10],
       default_mapper[11],
       default_mapper[12],
       default_mapper[13],
       default_mapper[14],
       default_mapper[15],
       default_mapper[16],
       default_mapper[17],
       default_mapper[18],
       default_mapper[19],
       default_mapper[20],
       default_mapper[21],
       default_mapper[22],
       function(this$, loc){return none;},
       default_mapper[24],
       default_mapper[25],
       default_mapper[26],
       default_mapper[27],
       default_mapper[28],
       default_mapper[29],
       default_mapper[30],
       default_mapper[31],
       default_mapper[32],
       default_mapper[33],
       default_mapper[34],
       default_mapper[35],
       default_mapper[36],
       default_mapper[37],
       default_mapper[38],
       default_mapper[39],
       default_mapper[40],
       default_mapper[41],
       default_mapper[42],
       default_mapper[43],
       default_mapper[44],
       default_mapper[45]];
   function is_not_doc(param){
    var match = param[1][1];
    return match !== "doc"
            ? match
              !== cst_ocaml_doc$0
              ? match !== cst_ocaml_text$0 ? match !== "text" ? 1 : 0 : 0
              : 0
            : 0;
   }
   function attrs(s, x){
    var
     x$0 =
       s[4] ? keep_docs[1] ? x : Stdlib_List[41].call(null, is_not_doc)(x) : x;
    if(s[4] && ! keep_locs[1])
     return caml_call2(remove_loc[2], remove_loc, x$0);
    return x$0;
   }
   function module_path(s, path){
    try{var b = caml_call2(Map$3[28], path, s[2]); return b;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      switch(path[0]){
        case 0:
         return path;
        case 1:
         var n = path[2], p = path[1]; return [1, module_path(s, p), n];
        default:
         var p2 = path[2], p1 = path[1], a = module_path(s, p2);
         return [2, module_path(s, p1), a];
      }
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function modtype_path(s, path){
    try{var val = caml_call2(Map$3[28], path, s[3]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      switch(path[0]){
        case 0:
         return path;
        case 1:
         var n = path[2], p = path[1]; return [1, module_path(s, p), n];
        default: return fatal_error(cst_Subst_modtype_path);
      }
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    if(0 !== val[0]) return fatal_error(cst_Subst_modtype_path$0);
    var p$0 = val[1];
    return p$0;
   }
   function z(s, path){
    try{var val = caml_call2(Map$3[28], path, s[1]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      switch(path[0]){
        case 0:
         return path;
        case 1:
         var n = path[2], p = path[1]; return [1, module_path(s, p), n];
        default: return fatal_error(cst_Subst_type_path);
      }
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    if(0 !== val[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, fW], 1);
    var p$0 = val[1];
    return p$0;
   }
   function type_path(s, p){
    var match = constructor_typath(p);
    switch(match[0]){
      case 0:
       var p$0 = match[1]; return z(s, p$0);
      case 1:
       var cstr = match[2], p$1 = match[1];
       return [1, module_path(s, p$1), cstr];
      case 2:
       return z(s, p);
      default:
       var cstr$0 = match[2], ty_path = match[1];
       return [1, z(s, ty_path), cstr$0];
    }
   }
   function to_subst_by_type_function(s, p){
    try{var val = caml_call2(Map$3[28], p, s[1]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return 0 === val[0] ? 0 : 1;
   }
   var new_id$0 = s_ref(-1);
   function reset_for_saving(param){new_id$0[1] = -1; return 0;}
   function newpersty(desc){
    new_id$0[1]--;
    var id = new_id$0[1];
    return [0, desc, highest_scope, lowest_scope, id];
   }
   function norm(d){
    if(typeof d !== "number")
     switch(d[0]){
       case 0:
        if(! d[1]) return tvar_none; break;
       case 9:
        if(! d[1]) return tunivar_none; break;
     }
    return d;
   }
   var
    ctype_apply_env_empty =
      [0,
       function(param){
        throw caml_maybe_attach_backtrace([0, Assert_failure, fX], 1);
       }];
   function typexp(copy_scope, s, ty){
    var desc = get_desc(ty);
    if(typeof desc !== "number")
     switch(desc[0]){
       case 5:
        var k = desc[2], m$0 = desc[1];
        if
         (!
          s[4]
          &&
           m$0 === cst_dummy_method
           && 2 !== field_kind_repr(k) && get_level(ty) < 100000000)
         return ty;
        break;
       case 7:
        var ty$3 = desc[1]; return ty$3;
       case 0:
       case 9:
        if(! s[4] && 0 <= get_id(ty)) return ty;
        if(s[4])
         var ty$2 = newpersty(norm(desc));
        else
         var level = get_level(ty), ty$2 = newty3(level, lowest_scope, desc);
        redirect_desc(copy_scope, ty, [7, ty$2, 0]);
        return ty$2;
     }
    var
     tm = row_of_type(ty),
     a = 1 - is_Tconstr(ty),
     has_fixed_row = a ? is_constr_row(0, tm) : a;
    if(s[4])
     var ty$0 = newpersty(fY);
    else
     var scope = get_scope(ty), ty$0 = newty3(highest_scope, scope, L);
    redirect_desc(copy_scope, ty, [7, ty$0, 0]);
    a:
    {
     if(has_fixed_row){
      var match = get_desc(tm);
      if(typeof match !== "number" && 3 === match[0]){
       var match$0 = match[1];
       if(1 === match$0[0]){
        var
         tl = match[2],
         i = match$0[2],
         m = match$0[1],
         i$0 =
           Stdlib_String[15].call
            (null, i, 0, caml_ml_string_length(i) - 4 | 0),
         desc$0 = [3, type_path(s, [1, m, i$0]), tl, [0, 0]];
        break a;
       }
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, fZ], 1);
     }
     if(typeof desc !== "number")
      switch(desc[0]){
        case 3:
         var
          args = desc[2],
          p = desc[1],
          args$0 =
            Stdlib_List[19].call
             (null, function(a){return typexp(copy_scope, s, a);}, args);
         try{var val = caml_call2(Map$3[28], p, s[1]);}
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
          var desc$0 = [3, type_path(s, p), args$0, [0, 0]];
          break a;
         }
         if(0 === val[0]){
          var desc$0 = [3, type_path(s, p), args$0, [0, 0]];
          break a;
         }
         var
          body = val[2],
          params = val[1],
          desc$0 =
            [6, caml_call3(ctype_apply_env_empty[1], params, body, args$0)];
         break a;
        case 4:
         var
          name = desc[2],
          t1 = desc[1],
          t1$0 = typexp(copy_scope, s, t1),
          match$1 = name[1];
         if(match$1){
          var match$2 = match$1[1], tl$0 = match$2[2], p$0 = match$2[1];
          if(to_subst_by_type_function(s, p$0))
           var name$0 = 0;
          else
           var
            d =
              Stdlib_List[19].call
               (null, function(a){return typexp(copy_scope, s, a);}, tl$0),
            name$0 = [0, [0, type_path(s, p$0), d]];
         }
         else
          var name$0 = 0;
         var desc$0 = [4, t1$0, [0, name$0]];
         break a;
        case 5:
         var t2 = desc[4], kind = desc[2];
         if(2 === field_kind_repr(kind)){
          var desc$0 = [6, typexp(copy_scope, s, t2)];
          break a;
         }
         break;
        case 8:
         var row = desc[1], more = row_more(row), mored = get_desc(more);
         if(typeof mored !== "number" && 7 === mored[0]){
          var match$5 = mored[2];
          if(match$5){
           var ty2 = match$5[1];
           redirect_desc(copy_scope, ty, [7, ty2, 0]);
           var desc$0 = [6, ty2];
           break a;
          }
         }
         var b = s[4];
         if(b)
          var dup = b;
         else{
          var c = get_level(more) === 100000000 ? 1 : 0;
          if(c)
           var dup = c;
          else
           var f = static_row(row), dup = f || is_Tconstr(more);
         }
         b:
         {
          c:
          if(typeof mored !== "number"){
           switch(mored[0]){
             case 7:
              if(! mored[2]){var ty$1 = mored[1], more$0 = ty$1; break b;}
              break;
             case 3:
              break c;
             case 0:
             case 9:
              if(s[4]){var more$0 = newpersty(norm(mored)); break b;}
              if(! dup){var more$0 = more; break b;}
              if(is_Tvar(more)){
               var more$0 = newty3(highest_scope, lowest_scope, mored);
               break b;
              }
              var more$0 = more;
              break b;
           }
           throw caml_maybe_attach_backtrace([0, Assert_failure, f0], 1);
          }
          var more$0 = typexp(copy_scope, s, more);
         }
         redirect_desc(copy_scope, more, [7, more$0, [0, ty$0]]);
         var
          row$0 =
            copy_row
             (function(a){return typexp(copy_scope, s, a);},
              1,
              row,
              1 - dup,
              more$0),
          match$3 = row_name(row$0);
         if(match$3){
          var
           match$4 = match$3[1],
           tl$1 = match$4[2],
           p$1 = match$4[1],
           name$1 =
             to_subst_by_type_function(s, p$1)
              ? 0
              : [0, [0, type_path(s, p$1), tl$1]],
           desc$0 = [8, set_row_name(row$0, name$1)];
          break a;
         }
         var desc$0 = [8, row$0];
         break a;
        case 11:
         var
          fl = desc[2],
          p$2 = desc[1],
          g =
            Stdlib_List[19].call
             (null,
              function(param){
               var ty = param[2], n = param[1];
               return [0, n, typexp(copy_scope, s, ty)];
              },
              fl),
          desc$0 = [11, modtype_path(s, p$2), g];
         break a;
      }
     var
      desc$0 =
        copy_type_desc(0, function(a){return typexp(copy_scope, s, a);}, desc);
    }
    caml_call2(e[8], ty$0, desc$0);
    return ty$0;
   }
   function type_expr$0(s, ty){
    return with_scope(function(copy_scope){return typexp(copy_scope, s, ty);});
   }
   function label_declaration(copy_scope, s, l){
    var
     a = l[6],
     b = attrs(s, l[5]),
     c = loc(s, l[4]),
     d = typexp(copy_scope, s, l[3]);
    return [0, l[1], l[2], d, c, b, a];
   }
   function constructor_arguments(copy_scope, s, param){
    if(0 === param[0]){
     var l = param[1];
     return [0,
             Stdlib_List[19].call
              (null, function(a){return typexp(copy_scope, s, a);}, l)];
    }
    var l$0 = param[1];
    return [1,
            Stdlib_List[19].call
             (null,
              function(a){return label_declaration(copy_scope, s, a);},
              l$0)];
   }
   function constructor_declaration(copy_scope, s, c){
    var
     a = c[6],
     b = attrs(s, c[5]),
     d = loc(s, c[4]),
     e =
       Stdlib_Option[7].call
        (null, function(a){return typexp(copy_scope, s, a);}, c[3]),
     f = constructor_arguments(copy_scope, s, c[2]);
    return [0, c[1], f, e, d, b, a];
   }
   function type_declaration(copy_scope, s, decl){
    var
     c = decl[14],
     d = decl[13],
     e = decl[12],
     f = attrs(s, decl[11]),
     g = loc(s, decl[10]),
     match = decl[5],
     h = 0,
     i = decl[7],
     j = decl[6];
    if(match)
     var ty = match[1], b = [0, typexp(copy_scope, s, ty)];
    else
     var b = 0;
    var match$0 = decl[3], k = decl[4];
    if(typeof match$0 === "number")
     var a = 0 === match$0 ? 0 : 1;
    else if(0 === match$0[0])
     var
      rep = match$0[2],
      lbls = match$0[1],
      a =
        [0,
         Stdlib_List[19].call
          (null,
           function(a){return label_declaration(copy_scope, s, a);},
           lbls),
         rep];
    else
     var
      rep$0 = match$0[2],
      cstrs = match$0[1],
      a =
        [1,
         Stdlib_List[19].call
          (null,
           function(a){return constructor_declaration(copy_scope, s, a);},
           cstrs),
         rep$0];
    var l = decl[2];
    return [0,
            Stdlib_List[19].call
             (null, function(a){return typexp(copy_scope, s, a);}, decl[1]),
            l,
            a,
            k,
            b,
            j,
            i,
            h,
            lowest_scope,
            g,
            f,
            e,
            d,
            c];
   }
   function type_declaration$0(s, decl){
    return with_scope
            (function(copy_scope){
              return type_declaration(copy_scope, s, decl);
             });
   }
   function q(copy_scope, s, param){
    switch(param[0]){
      case 0:
       var
        cty = param[3],
        tyl = param[2],
        p = param[1],
        p$0 = type_path(s, p),
        tyl$0 =
          Stdlib_List[19].call
           (null, function(a){return typexp(copy_scope, s, a);}, tyl),
        cty$0 = q(copy_scope, s, cty);
       return [0, p$0, tyl$0, cty$0];
      case 1:
       var
        sign = param[1],
        a =
          caml_call2
           (g[34],
            function(param){
             var t = param[3], v = param[2], p = param[1];
             return [0, p, v, typexp(copy_scope, s, t)];
            },
            sign[4]),
        b =
          caml_call2
           (j[34],
            function(param){
             var t = param[3], v = param[2], m = param[1];
             return [0, m, v, typexp(copy_scope, s, t)];
            },
            sign[3]),
        c = typexp(copy_scope, s, sign[2]);
       return [1, [0, typexp(copy_scope, s, sign[1]), c, b, a]];
      default:
       var
        cty$1 = param[3],
        ty = param[2],
        l = param[1],
        d = q(copy_scope, s, cty$1);
       return [2, l, typexp(copy_scope, s, ty), d];
    }
   }
   function class_declaration(copy_scope, s, decl){
    var
     b = decl[8],
     c = attrs(s, decl[7]),
     d = loc(s, decl[6]),
     match = decl[4],
     e = decl[5];
    if(match)
     var ty = match[1], a = [0, typexp(copy_scope, s, ty)];
    else
     var a = 0;
    var f = type_path(s, decl[3]), g = q(copy_scope, s, decl[2]);
    return [0,
            Stdlib_List[19].call
             (null, function(a){return typexp(copy_scope, s, a);}, decl[1]),
            g,
            f,
            a,
            e,
            d,
            c,
            b];
   }
   function class_declaration$0(s, decl){
    return with_scope
            (function(copy_scope){
              return class_declaration(copy_scope, s, decl);
             });
   }
   function cltype_declaration(copy_scope, s, decl){
    var
     a = decl[7],
     b = attrs(s, decl[6]),
     c = loc(s, decl[5]),
     d = decl[4],
     e = type_path(s, decl[3]),
     f = q(copy_scope, s, decl[2]);
    return [0,
            Stdlib_List[19].call
             (null, function(a){return typexp(copy_scope, s, a);}, decl[1]),
            f,
            e,
            d,
            c,
            b,
            a];
   }
   function cltype_declaration$0(s, decl){
    return with_scope
            (function(copy_scope){
              return cltype_declaration(copy_scope, s, decl);
             });
   }
   function class_type$2(s, cty){
    return with_scope(function(copy_scope){return q(copy_scope, s, cty);});
   }
   function value_description(copy_scope, s, descr){
    var
     a = descr[5],
     b = attrs(s, descr[4]),
     c = loc(s, descr[3]),
     d = descr[2];
    return [0, typexp(copy_scope, s, descr[1]), d, c, b, a];
   }
   function value_description$0(s, descr){
    return with_scope
            (function(copy_scope){
              return value_description(copy_scope, s, descr);
             });
   }
   function extension_constructor$0(copy_scope, s, ext){
    var
     a = ext[8],
     b = attrs(s, ext[7]),
     c = s[4] ? none : ext[6],
     d = ext[5],
     e =
       Stdlib_Option[7].call
        (null, function(a){return typexp(copy_scope, s, a);}, ext[4]),
     f = constructor_arguments(copy_scope, s, ext[3]),
     g =
       Stdlib_List[19].call
        (null, function(a){return typexp(copy_scope, s, a);}, ext[2]);
    return [0, type_path(s, ext[1]), g, f, e, d, c, b, a];
   }
   function extension_constructor$1(s, ext){
    return with_scope
            (function(copy_scope){
              return extension_constructor$0(copy_scope, s, ext);
             });
   }
   function merge_path_maps(f, m1, m2){
    return caml_call3
            (Map$3[13],
             function(k, d, accu){
              var a = caml_call1(f, d);
              return caml_call3(Map$3[4], k, a, accu);
             },
             m1,
             m2);
   }
   function type_replacement(s, param){
    if(0 === param[0]){var p = param[1]; return [0, type_path(s, p)];}
    var body = param[2], params = param[1];
    return with_scope
            (function(copy_scope){
              var
               params$0 =
                 Stdlib_List[19].call
                  (null,
                   function(a){return typexp(copy_scope, s, a);},
                   params),
               body$0 = typexp(copy_scope, s, body);
              return [1, params$0, body$0];
             });
   }
   function lazy_module_decl(md){
    var a = md[4], b = md[3], c = md[2];
    return [0, lazy_modtype(md[1]), c, b, a];
   }
   function subst_lazy_module_decl(scoping, s, md){
    var
     mdl_type = subst_lazy_modtype(scoping, s, md[1]),
     a = md[4],
     b = loc(s, md[3]);
    return [0, mdl_type, attrs(s, md[2]), b, a];
   }
   function force_module_decl(md){
    var md_type = force_modtype(md[1]);
    return [0, md_type, md[2], md[3], md[4]];
   }
   function lazy_modtype(param){
    switch(param[0]){
      case 0:
       var p = param[1]; return [0, p];
      case 1:
       var sg = param[1]; return [1, create_forced([0, sg])];
      case 2:
       var match = param[1];
       if(match){
        var
         res = param[2],
         arg = match[2],
         id = match[1],
         a = lazy_modtype(res);
        return [2, [0, id, lazy_modtype(arg)], a];
       }
       var mty = param[2];
       return [2, 0, lazy_modtype(mty)];
      default: var p$0 = param[1]; return [3, p$0];
    }
   }
   function subst_lazy_modtype(scoping, s, param){
    switch(param[0]){
      case 0:
       var p = param[1];
       try{var mty = caml_call2(Map$3[28], p, s[3]);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn === Stdlib[8])
         switch(p[0]){
           case 0:
            return [0, p];
           case 1:
            var n = p[2], p$0 = p[1]; return [0, [1, module_path(s, p$0), n]];
           default: return fatal_error(cst_Subst_modtype);
         }
        throw caml_maybe_attach_backtrace(exn, 0);
       }
       return lazy_modtype(mty);
      case 1:
       var sg = param[1]; return [1, subst_lazy_signature(scoping, s, sg)];
      case 2:
       var match = param[1];
       if(! match){
        var res$1 = param[2];
        return [2, 0, subst_lazy_modtype(scoping, s, res$1)];
       }
       var match$0 = match[1];
       if(match$0){
        var
         res = param[2],
         arg = match[2],
         id = match$0[1],
         id$0 = rename(id),
         a = subst_lazy_modtype(scoping, add_module$0(id, [0, id$0], s), res);
        return [2, [0, [0, id$0], subst_lazy_modtype(scoping, s, arg)], a];
       }
       var
        res$0 = param[2],
        arg$0 = match[2],
        b = subst_lazy_modtype(scoping, s, res$0);
       return [2, [0, 0, subst_lazy_modtype(scoping, s, arg$0)], b];
      default: var p$1 = param[1]; return [3, module_path(s, p$1)];
    }
   }
   function force_modtype(param){
    switch(param[0]){
      case 0:
       var p = param[1]; return [0, p];
      case 1:
       var sg = param[1]; return [1, force_signature(sg)];
      case 2:
       var res = param[2], param$0 = param[1];
       if(param$0)
        var
         mty = param$0[2],
         id = param$0[1],
         param$1 = [0, id, force_modtype(mty)];
       else
        var param$1 = 0;
       return [2, param$1, force_modtype(res)];
      default: var p$0 = param[1]; return [3, p$0];
    }
   }
   function lazy_modtype_decl(mtd){
    var mtdl_type = Stdlib_Option[7].call(null, lazy_modtype, mtd[1]);
    return [0, mtdl_type, mtd[2], mtd[3], mtd[4]];
   }
   function subst_lazy_modtype_decl(scoping, s, mtd){
    var a = mtd[4], b = loc(s, mtd[3]), c = attrs(s, mtd[2]);
    return [0,
            Stdlib_Option[7].call
             (null,
              function(a){return subst_lazy_modtype(scoping, s, a);},
              mtd[1]),
            c,
            b,
            a];
   }
   function force_modtype_decl(mtd){
    var mtd_type = Stdlib_Option[7].call(null, force_modtype, mtd[1]);
    return [0, mtd_type, mtd[2], mtd[3], mtd[4]];
   }
   function subst_lazy_signature(scoping, s, sg){
    var match = get_contents(sg);
    if(0 === match[0]){
     var
      match$0 = match[1],
      sg$0 = match$0[3],
      s$0 = match$0[2],
      scoping$0 = match$0[1],
      scoping$1 = typeof scoping === "number" ? scoping || scoping$0 : scoping,
      s$1 = compose(s$0, s);
     return create$3([0, scoping$1, s$1, sg$0]);
    }
    var sg$1 = match[1];
    return create$3([0, scoping, s, sg$1]);
   }
   function force_signature(sg){
    var a = force_signature_once(sg);
    return Stdlib_List[19].call(null, force_signature_item, a);
   }
   function force_signature_once(sg){
    return lazy_signature(force(force_signature_once$0, sg));
   }
   function lazy_signature(param){
    if(0 === param[0]){
     var sg = param[1];
     return Stdlib_List[19].call(null, lazy_signature_item, sg);
    }
    var sg$0 = param[1];
    return sg$0;
   }
   function force_signature_once$0(param$0){
    var
     sg$7 = param$0[3],
     s$5 = param$0[2],
     scoping = param$0[1],
     sg$8 = lazy_signature(sg$7);
    if(typeof scoping === "number")
     var
      rename$0 =
        scoping
         ? rename
         : function
          (id){
           var name = id[1];
           return create_scoped(scope(id), name);
          };
    else
     var
      scope$0 = scoping[1],
      rename$0 =
        function(id){var name = id[1]; return create_scoped(scope$0, name);};
    var s = s$5, sg = 0, param = sg$8;
    for(;;){
     if(! param) break;
     var match = param[1];
     switch(match[0]){
       case 0:
        var
         rest = param[2],
         vis = match[3],
         vd = match[2],
         id = match[1],
         id$0 = rename(id),
         sg$0 = [0, [0, id$0, vd, vis], sg];
        sg = sg$0;
        param = rest;
        break;
       case 1:
        var
         rest$0 = param[2],
         vis$0 = match[4],
         rs = match[3],
         td = match[2],
         id$1 = match[1],
         id$2 = rename$0(id$1),
         sg$1 = [0, [1, id$2, td, rs, vis$0], sg],
         s$0 = add_type$0(id$1, [0, id$2], s);
        s = s$0;
        sg = sg$1;
        param = rest$0;
        break;
       case 2:
        var
         rest$1 = param[2],
         vis$1 = match[4],
         es = match[3],
         ec = match[2],
         id$3 = match[1],
         id$4 = rename$0(id$3),
         sg$2 = [0, [2, id$4, ec, es, vis$1], sg];
        sg = sg$2;
        param = rest$1;
        break;
       case 3:
        var
         rest$2 = param[2],
         vis$2 = match[5],
         rs$0 = match[4],
         md = match[3],
         pres = match[2],
         id$5 = match[1],
         id$6 = rename$0(id$5),
         sg$3 = [0, [3, id$6, pres, md, rs$0, vis$2], sg],
         s$1 = add_module$0(id$5, [0, id$6], s);
        s = s$1;
        sg = sg$3;
        param = rest$2;
        break;
       case 4:
        var
         rest$3 = param[2],
         vis$3 = match[3],
         mtd = match[2],
         id$7 = match[1],
         id$8 = rename$0(id$7),
         sg$4 = [0, [4, id$8, mtd, vis$3], sg],
         s$2 = add_modtype(id$7, [0, [0, id$8]], s);
        s = s$2;
        sg = sg$4;
        param = rest$3;
        break;
       case 5:
        var
         rest$4 = param[2],
         vis$4 = match[4],
         rs$1 = match[3],
         cd = match[2],
         id$9 = match[1],
         id$10 = rename$0(id$9),
         sg$5 = [0, [5, id$10, cd, rs$1, vis$4], sg],
         s$3 = add_type$0(id$9, [0, id$10], s);
        s = s$3;
        sg = sg$5;
        param = rest$4;
        break;
       default:
        var
         rest$5 = param[2],
         vis$5 = match[4],
         rs$2 = match[3],
         ctd = match[2],
         id$11 = match[1],
         id$12 = rename$0(id$11),
         sg$6 = [0, [6, id$12, ctd, rs$2, vis$5], sg],
         s$4 = add_type$0(id$11, [0, id$12], s);
        s = s$4;
        sg = sg$6;
        param = rest$5;
     }
    }
    return with_scope
            (function(copy_scope){
              return [1,
                      Stdlib_List[21].call
                       (null,
                        function(a){
                         return subst_lazy_signature_item(copy_scope, scoping, s, a);
                        },
                        sg)];
             });
   }
   function lazy_signature_item(param){
    switch(param[0]){
      case 0:
       var vis = param[3], d = param[2], id = param[1];
       return [0, id, d, vis];
      case 1:
       var vis$0 = param[4], rs = param[3], d$0 = param[2], id$0 = param[1];
       return [1, id$0, d$0, rs, vis$0];
      case 2:
       var vis$1 = param[4], es = param[3], ext = param[2], id$1 = param[1];
       return [2, id$1, ext, es, vis$1];
      case 3:
       var
        vis$2 = param[5],
        rs$0 = param[4],
        d$1 = param[3],
        res = param[2],
        id$2 = param[1];
       return [3, id$2, res, lazy_module_decl(d$1), rs$0, vis$2];
      case 4:
       var vis$3 = param[3], d$2 = param[2], id$3 = param[1];
       return [4, id$3, lazy_modtype_decl(d$2), vis$3];
      case 5:
       var vis$4 = param[4], rs$1 = param[3], d$3 = param[2], id$4 = param[1];
       return [5, id$4, d$3, rs$1, vis$4];
      default:
       var vis$5 = param[4], rs$2 = param[3], d$4 = param[2], id$5 = param[1];
       return [6, id$5, d$4, rs$2, vis$5];
    }
   }
   function subst_lazy_signature_item(copy_scope, scoping, s, comp){
    switch(comp[0]){
      case 0:
       var vis = comp[3], d = comp[2], id = comp[1];
       return [0, id, value_description(copy_scope, s, d), vis];
      case 1:
       var vis$0 = comp[4], rs = comp[3], d$0 = comp[2], id$0 = comp[1];
       return [1, id$0, type_declaration(copy_scope, s, d$0), rs, vis$0];
      case 2:
       var vis$1 = comp[4], es = comp[3], ext = comp[2], id$1 = comp[1];
       return [2,
               id$1,
               extension_constructor$0(copy_scope, s, ext),
               es,
               vis$1];
      case 3:
       var
        vis$2 = comp[5],
        rs$0 = comp[4],
        d$1 = comp[3],
        pres = comp[2],
        id$2 = comp[1];
       return [3,
               id$2,
               pres,
               subst_lazy_module_decl(scoping, s, d$1),
               rs$0,
               vis$2];
      case 4:
       var vis$3 = comp[3], d$2 = comp[2], id$3 = comp[1];
       return [4, id$3, subst_lazy_modtype_decl(scoping, s, d$2), vis$3];
      case 5:
       var vis$4 = comp[4], rs$1 = comp[3], d$3 = comp[2], id$4 = comp[1];
       return [5, id$4, class_declaration(copy_scope, s, d$3), rs$1, vis$4];
      default:
       var vis$5 = comp[4], rs$2 = comp[3], d$4 = comp[2], id$5 = comp[1];
       return [6, id$5, cltype_declaration(copy_scope, s, d$4), rs$2, vis$5];
    }
   }
   function force_signature_item(param){
    switch(param[0]){
      case 0:
       var vis = param[3], vd = param[2], id = param[1];
       return [0, id, vd, vis];
      case 1:
       var vis$0 = param[4], rs = param[3], d = param[2], id$0 = param[1];
       return [1, id$0, d, rs, vis$0];
      case 2:
       var vis$1 = param[4], es = param[3], ext = param[2], id$1 = param[1];
       return [2, id$1, ext, es, vis$1];
      case 3:
       var
        vis$2 = param[5],
        rs$0 = param[4],
        d$0 = param[3],
        pres = param[2],
        id$2 = param[1];
       return [3, id$2, pres, force_module_decl(d$0), rs$0, vis$2];
      case 4:
       var vis$3 = param[3], d$1 = param[2], id$3 = param[1];
       return [4, id$3, force_modtype_decl(d$1), vis$3];
      case 5:
       var vis$4 = param[4], rs$1 = param[3], d$2 = param[2], id$4 = param[1];
       return [5, id$4, d$2, rs$1, vis$4];
      default:
       var vis$5 = param[4], rs$2 = param[3], d$3 = param[2], id$5 = param[1];
       return [6, id$5, d$3, rs$2, vis$5];
    }
   }
   function modtype$1(scoping, s, t){
    return force_modtype(subst_lazy_modtype(scoping, s, lazy_modtype(t)));
   }
   function compose(s1, s2){
    if(s1 === identity) return s2;
    if(s2 === identity) return s1;
    var
     l2 = s2[5],
     l1 = s1[5],
     a = l2 || l1,
     b = s1[4],
     c = b || s2[4],
     d = 0,
     e =
       merge_path_maps(function(a){return modtype$1(d, s2, a);}, s1[3], s2[3]),
     f =
       merge_path_maps(function(a){return module_path(s2, a);}, s1[2], s2[2]);
    return [0,
            merge_path_maps
             (function(a){return type_replacement(s2, a);}, s1[1], s2[1]),
            f,
            e,
            c,
            a];
   }
   function subst_lazy_signature_item$0(scoping, s, comp){
    return with_scope
            (function(copy_scope){
              return subst_lazy_signature_item(copy_scope, scoping, s, comp);
             });
   }
   function of_signature(sg){return create_forced([0, sg]);}
   function of_signature_items(sg){return create_forced([1, sg]);}
   var
    Lazy =
      [0,
       lazy_module_decl,
       lazy_modtype,
       lazy_modtype_decl,
       of_signature,
       of_signature_items,
       lazy_signature_item,
       subst_lazy_module_decl,
       subst_lazy_modtype,
       subst_lazy_modtype_decl,
       subst_lazy_signature,
       subst_lazy_signature_item$0,
       force_module_decl,
       force_modtype,
       force_modtype_decl,
       force_signature,
       force_signature_once,
       force_signature_item];
   function signature$1(sc, s, sg){
    return force_signature(subst_lazy_signature(sc, s, of_signature(sg)));
   }
   function signature_item(sc, s, comp){
    return force_signature_item
            (subst_lazy_signature_item$0(sc, s, lazy_signature_item(comp)));
   }
   function modtype_declaration(sc, s, decl){
    return force_modtype_decl
            (subst_lazy_modtype_decl(sc, s, lazy_modtype_decl(decl)));
   }
   function module_declaration(scoping, s, decl){
    return force_module_decl
            (subst_lazy_module_decl(scoping, s, lazy_module_decl(decl)));
   }
   var
    Dynlink_compilerlibs_Subst =
      [0,
       identity,
       add_type$0,
       add_type_path,
       add_type_function,
       add_module$0,
       add_module_path,
       add_modtype,
       add_modtype_path,
       for_saving,
       reset_for_saving,
       change_locs,
       module_path,
       type_path,
       modtype_path,
       type_expr$0,
       class_type$2,
       value_description$0,
       type_declaration$0,
       extension_constructor$1,
       class_declaration$0,
       cltype_declaration$0,
       modtype$1,
       signature$1,
       signature_item,
       modtype_declaration,
       module_declaration,
       compose,
       ctype_apply_env_empty,
       Lazy];
   caml_register_global
    (1310, Dynlink_compilerlibs_Subst, "Dynlink_compilerlibs.Subst");
   var builtin_idents = [0, 0];
   function ident_create(s){
    var id = create_predef(s);
    builtin_idents[1] = [0, [0, s, id], builtin_idents[1]];
    return id;
   }
   var
    ident_int = ident_create(cst_int),
    ident_char = ident_create(cst_char),
    ident_bytes = ident_create(cst_bytes),
    ident_float = ident_create(cst_float),
    ident_bool = ident_create(cst_bool),
    ident_unit = ident_create(cst_unit),
    ident_exn = ident_create(cst_exn),
    ident_array = ident_create(cst_array),
    ident_list = ident_create(cst_list),
    ident_option = ident_create(cst_option),
    ident_nativeint = ident_create(cst_nativeint),
    ident_int32 = ident_create(cst_int32),
    ident_int64 = ident_create(cst_int64),
    ident_lazy_t = ident_create(cst_lazy_t),
    ident_string = ident_create(cst_string),
    ident_extension_constructor = ident_create(cst_extension_constructor$1),
    ident_floatarray = ident_create(cst_floatarray),
    path_int = [0, ident_int],
    path_char = [0, ident_char],
    path_bytes = [0, ident_bytes],
    path_float = [0, ident_float],
    path_bool = [0, ident_bool],
    path_unit = [0, ident_unit],
    path_exn = [0, ident_exn],
    path_array = [0, ident_array],
    path_list = [0, ident_list],
    path_option = [0, ident_option],
    path_nativeint = [0, ident_nativeint],
    path_int32 = [0, ident_int32],
    path_int64 = [0, ident_int64],
    path_lazy_t = [0, ident_lazy_t],
    path_string = [0, ident_string],
    path_extension_constructor = [0, ident_extension_constructor],
    path_floatarray = [0, ident_floatarray],
    desc = [3, path_int, 0, [0, 0]],
    type_int = newty3(highest_scope, lowest_scope, desc),
    desc$0 = [3, path_char, 0, [0, 0]],
    type_char = newty3(highest_scope, lowest_scope, desc$0),
    desc$1 = [3, path_bytes, 0, [0, 0]],
    type_bytes = newty3(highest_scope, lowest_scope, desc$1),
    desc$2 = [3, path_float, 0, [0, 0]],
    type_float = newty3(highest_scope, lowest_scope, desc$2),
    desc$3 = [3, path_bool, 0, [0, 0]],
    type_bool = newty3(highest_scope, lowest_scope, desc$3),
    desc$4 = [3, path_unit, 0, [0, 0]],
    type_unit = newty3(highest_scope, lowest_scope, desc$4),
    desc$5 = [3, path_exn, 0, [0, 0]],
    type_exn = newty3(highest_scope, lowest_scope, desc$5);
   function type_array(t){
    var desc = [3, path_array, [0, t, 0], [0, 0]];
    return newty3(highest_scope, lowest_scope, desc);
   }
   function type_list(t){
    var desc = [3, path_list, [0, t, 0], [0, 0]];
    return newty3(highest_scope, lowest_scope, desc);
   }
   function type_option(t){
    var desc = [3, path_option, [0, t, 0], [0, 0]];
    return newty3(highest_scope, lowest_scope, desc);
   }
   var
    desc$6 = [3, path_nativeint, 0, [0, 0]],
    type_nativeint = newty3(highest_scope, lowest_scope, desc$6),
    desc$7 = [3, path_int32, 0, [0, 0]],
    type_int32 = newty3(highest_scope, lowest_scope, desc$7),
    desc$8 = [3, path_int64, 0, [0, 0]],
    type_int64 = newty3(highest_scope, lowest_scope, desc$8);
   function type_lazy_t(t){
    var desc = [3, path_lazy_t, [0, t, 0], [0, 0]];
    return newty3(highest_scope, lowest_scope, desc);
   }
   var
    desc$9 = [3, path_string, 0, [0, 0]],
    type_string = newty3(highest_scope, lowest_scope, desc$9),
    desc$10 = [3, path_extension_constructor, 0, [0, 0]],
    type_extension_constructor = newty3(highest_scope, lowest_scope, desc$10),
    desc$11 = [3, path_floatarray, 0, [0, 0]],
    type_floatarray = newty3(highest_scope, lowest_scope, desc$11),
    ident_match_failure = ident_create(cst_Match_failure),
    ident_out_of_memory = ident_create(cst_Out_of_memory),
    ident_invalid_argument = ident_create(cst_Invalid_argument),
    ident_failure = ident_create(cst_Failure),
    ident_not_found = ident_create(cst_Not_found),
    ident_sys_error = ident_create(cst_Sys_error),
    ident_end_of_file = ident_create(cst_End_of_file),
    ident_division_by_zero = ident_create(cst_Division_by_zero),
    ident_stack_overflow = ident_create(cst_Stack_overflow),
    ident_sys_blocked_io = ident_create(cst_Sys_blocked_io),
    ident_assert_failure = ident_create(cst_Assert_failure),
    ident_undefined_recursive_modu =
      ident_create(cst_Undefined_recursive_module),
    all_predef_exns =
      [0,
       ident_match_failure,
       [0,
        ident_out_of_memory,
        [0,
         ident_invalid_argument,
         [0,
          ident_failure,
          [0,
           ident_not_found,
           [0,
            ident_sys_error,
            [0,
             ident_end_of_file,
             [0,
              ident_division_by_zero,
              [0,
               ident_stack_overflow,
               [0,
                ident_sys_blocked_io,
                [0,
                 ident_assert_failure,
                 [0, ident_undefined_recursive_modu, 0]]]]]]]]]]]],
    path_match_failure = [0, ident_match_failure],
    path_assert_failure = [0, ident_assert_failure],
    path_undefined_recursive_modul = [0, ident_undefined_recursive_modu];
   function cstr(id, args){
    return [0, id, [0, args], 0, none, 0, caml_call1(c[4], id)];
   }
   var
    ident_false = ident_create(cst_false$0),
    ident_true = ident_create(cst_true$0),
    ident_void = ident_create(cst$88),
    ident_nil = ident_create(cst$89),
    ident_cons = ident_create(cst$90),
    ident_none = ident_create(cst_None$1),
    ident_some = ident_create(cst_Some$0);
   function mk_add_type(add_type, type_ident, manifest, opt, a, env){
    if(opt) var sth = opt[1], immediate = sth; else var immediate = 0;
    if(a) var sth$0 = a[1], kind = sth$0; else var kind = 0;
    var
     decl =
       [0,
        0,
        0,
        kind,
        1,
        manifest,
        0,
        0,
        0,
        lowest_scope,
        none,
        0,
        immediate,
        0,
        caml_call1(c[4], type_ident)];
    return caml_call3(add_type, type_ident, decl, env);
   }
   function build_initial_env(add_type, add_exception, empty_env){
    function add_type1(type_ident, variance, separability, opt, env){
     if(opt)
      var sth = opt[1], kind = sth;
     else
      var kind = function(param){return 0;};
     var
      param = newgenvar(0, 0),
      a = caml_call1(c[4], type_ident),
      decl =
        [0,
         [0, param, 0],
         1,
         caml_call1(kind, param),
         1,
         0,
         [0, variance, 0],
         [0, separability, 0],
         0,
         lowest_scope,
         none,
         0,
         0,
         0,
         a];
     return caml_call3(add_type, type_ident, decl, env);
    }
    function add_extension(id, l){
     var a = caml_call1(c[4], id);
     return caml_call2
             (add_exception,
              id,
              [0,
               path_exn,
               0,
               [0, l],
               0,
               1,
               none,
               [0, mk(0, [0, txt, none], f1), 0],
               a]);
    }
    function variant(constrs){return [1, constrs, 0];}
    var
     p = add_type1(ident_array, l[2], 0, 0, empty_env),
     a = [0, cstr(ident_true, 0), 0],
     r =
       mk_add_type
        (add_type,
         ident_int64,
         0,
         0,
         0,
         mk_add_type
          (add_type,
           ident_int32,
           0,
           0,
           0,
           mk_add_type
            (add_type,
             ident_int,
             0,
             f5,
             0,
             mk_add_type
              (add_type,
               ident_floatarray,
               0,
               0,
               0,
               mk_add_type
                (add_type,
                 ident_float,
                 0,
                 0,
                 0,
                 mk_add_type
                  (add_type,
                   ident_extension_constructor,
                   0,
                   0,
                   0,
                   mk_add_type
                    (add_type,
                     ident_exn,
                     0,
                     0,
                     f4,
                     mk_add_type
                      (add_type,
                       ident_char,
                       0,
                       f3,
                       0,
                       mk_add_type
                        (add_type,
                         ident_bool,
                         0,
                         f2,
                         [0, variant([0, cstr(ident_false, 0), a])],
                         p))))))))),
     q = add_type1(ident_lazy_t, l[3], 0, 0, r),
     s =
       mk_add_type
        (add_type,
         ident_nativeint,
         0,
         0,
         0,
         add_type1
          (ident_list,
           l[3],
           0,
           [0,
            function(tvar){
             var
              a = [0, cstr(ident_cons, [0, tvar, [0, type_list(tvar), 0]]), 0];
             return variant([0, cstr(ident_nil, 0), a]);
            }],
           q)),
     t =
       mk_add_type
        (add_type,
         ident_string,
         0,
         0,
         0,
         add_type1
          (ident_option,
           l[3],
           0,
           [0,
            function(tvar){
             var a = [0, cstr(ident_some, [0, tvar, 0]), 0];
             return variant([0, cstr(ident_none, 0), a]);
            }],
           s)),
     desc = [2, [0, type_string, [0, type_int, [0, type_int, 0]]]],
     o =
       mk_add_type
        (add_type,
         ident_unit,
         0,
         f6,
         [0, variant([0, cstr(ident_void, 0), 0])],
         t),
     b =
       caml_call1
        (add_extension
          (ident_assert_failure,
           [0, newty3(highest_scope, lowest_scope, desc), 0]),
         o),
     d = caml_call1(add_extension(ident_division_by_zero, 0), b),
     e = caml_call1(add_extension(ident_end_of_file, 0), d),
     f = caml_call1(add_extension(ident_failure, [0, type_string, 0]), e),
     desc$0 = [2, [0, type_string, [0, type_int, [0, type_int, 0]]]],
     g =
       caml_call1
        (add_extension(ident_invalid_argument, [0, type_string, 0]), f),
     h =
       caml_call1
        (add_extension
          (ident_match_failure,
           [0, newty3(highest_scope, lowest_scope, desc$0), 0]),
         g),
     i = caml_call1(add_extension(ident_not_found, 0), h),
     j = caml_call1(add_extension(ident_out_of_memory, 0), i),
     k = caml_call1(add_extension(ident_stack_overflow, 0), j),
     m = caml_call1(add_extension(ident_sys_blocked_io, 0), k),
     desc$1 = [2, [0, type_string, [0, type_int, [0, type_int, 0]]]],
     n = caml_call1(add_extension(ident_sys_error, [0, type_string, 0]), m),
     common =
       caml_call1
        (add_extension
          (ident_undefined_recursive_modu,
           [0, newty3(highest_scope, lowest_scope, desc$1), 0]),
         n),
     safe_string = mk_add_type(add_type, ident_bytes, 0, 0, 0, common),
     unsafe_string =
       mk_add_type(add_type, ident_bytes, [0, type_string], 0, 0, common);
    return [0, safe_string, unsafe_string];
   }
   var
    builtin_values =
      Stdlib_List[19].call
       (null,
        function(id){var name = id[1]; return [0, name, id];},
        all_predef_exns),
    builtin_idents$0 = Stdlib_List[9].call(null, builtin_idents[1]),
    Dynlink_compilerlibs_Predef =
      [0,
       type_int,
       type_char,
       type_string,
       type_bytes,
       type_float,
       type_bool,
       type_unit,
       type_exn,
       type_array,
       type_list,
       type_option,
       type_nativeint,
       type_int32,
       type_int64,
       type_lazy_t,
       type_extension_constructor,
       type_floatarray,
       path_int,
       path_char,
       path_string,
       path_bytes,
       path_float,
       path_bool,
       path_unit,
       path_exn,
       path_array,
       path_list,
       path_option,
       path_nativeint,
       path_int32,
       path_int64,
       path_lazy_t,
       path_extension_constructor,
       path_floatarray,
       path_match_failure,
       path_assert_failure,
       path_undefined_recursive_modul,
       ident_false,
       ident_true,
       ident_void,
       ident_nil,
       ident_cons,
       ident_none,
       ident_some,
       build_initial_env,
       builtin_values,
       builtin_idents$0,
       ident_division_by_zero,
       all_predef_exns];
   caml_register_global
    (1311, Dynlink_compilerlibs_Predef, "Dynlink_compilerlibs.Predef");
   function free_vars(opt, ty){
    if(opt) var sth = opt[1], param = sth; else var param = 0;
    var ret = [0, empty$2];
    function loop(ty$1){
     var ty = ty$1;
     for(;;){
      var a = try_mark_node(ty);
      if(! a) return a;
      var match = get_desc(ty);
      if(typeof match !== "number")
       switch(match[0]){
         case 0:
          var c = ret[1];
          ret[1] = caml_call1(wrap_repr(add$2, ty), c);
          return 0;
         case 8:
          var row = match[1];
          iter_row(loop, row);
          var b = 1 - static_row(row);
          if(! b) return b;
          var match$0 = get_desc(row_more(row));
          if(typeof match$0 !== "number" && 0 === match$0[0] && param){
           var d = ret[1];
           ret[1] = caml_call1(wrap_repr(add$2, ty), d);
           return 0;
          }
          var ty$0 = row_more(row);
          ty = ty$0;
          continue;
       }
      return iter_type_expr(loop, ty);
     }
    }
    loop(ty);
    unmark_type(ty);
    return ret[1];
   }
   function newgenconstr(path, tyl){
    var desc = [3, path, tyl, [0, 0]];
    return newty3(highest_scope, lowest_scope, desc);
   }
   function constructor_existentials(cd_args, cd_res){
    if(0 === cd_args[0])
     var l = cd_args[1], tyl = l;
    else
     var
      l$0 = cd_args[1],
      tyl = Stdlib_List[19].call(null, function(l){return l[3];}, l$0);
    if(cd_res)
     var
      type_ret = cd_res[1],
      desc = [2, tyl],
      arg_vars_set = free_vars(0, newty3(highest_scope, lowest_scope, desc)),
      res_vars = free_vars(0, type_ret),
      existentials = elements(caml_call2(diff, arg_vars_set, res_vars));
    else
     var existentials = 0;
    return [0, tyl, existentials];
   }
   function constructor_args(current_unit, priv, cd_args, cd_res, path, rep){
    var
     match = constructor_existentials(cd_args, cd_res),
     existentials = match[2],
     tyl = match[1];
    if(0 === cd_args[0]){
     var l$0 = cd_args[1];
     return [0, existentials, l$0, 0];
    }
    var
     lbls = cd_args[1],
     desc = [2, tyl],
     arg_vars_set = free_vars(f7, newty3(highest_scope, lowest_scope, desc)),
     type_params = elements(arg_vars_set),
     arity = Stdlib_List[1].call(null, type_params),
     a = caml_call1(c[2], current_unit),
     b = caml_call1(K[7], arity),
     tdecl =
       [0,
        type_params,
        arity,
        [0, lbls, rep],
        priv,
        0,
        caml_call2(l[14], 1, arity),
        b,
        0,
        lowest_scope,
        none,
        0,
        0,
        0,
        a];
    return [0,
            existentials,
            [0, newgenconstr(path, type_params), 0],
            [0, tdecl]];
   }
   function extension_descr(current_unit, path_ext, ext){
    var match = ext[4];
    if(match)
     var type_ret = match[1], ty_res = type_ret;
    else
     var ty_res = newgenconstr(ext[1], ext[2]);
    var
     match$0 =
       constructor_args
        (current_unit, ext[5], ext[3], ext[4], path_ext, [2, path_ext]),
     cstr_inlined = match$0[3],
     cstr_args = match$0[2],
     existentials = match$0[1],
     a = ext[8],
     b = ext[7],
     c = ext[6],
     d = ext[5],
     e = 0 !== ext[4] ? 1 : 0,
     f = Stdlib_List[1].call(null, cstr_args);
    return [0,
            last$0(path_ext),
            ty_res,
            existentials,
            cstr_args,
            f,
            [2, path_ext, 0 === cstr_args ? 1 : 0],
            -1,
            -1,
            e,
            d,
            c,
            b,
            cstr_inlined,
            a];
   }
   var
    none$0 = [0, desc$12, -1, highest_scope, -1],
    dummy_label = [0, cst$91, none$0, none$0, 0, -1, [0], 0, 1, none, 0, c[5]],
    Constr_not_found =
      [248, cst_Dynlink_compilerlibs_Datar, caml_fresh_oo_id(0)];
   function find_constr_by_tag(tag, cstrlist){
    var num_const = 0, num_nonconst = 0, param = cstrlist;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Constr_not_found, 1);
     var c = param[1], a = c[2];
     if(0 === a[0] && ! a[1]){
      var rem$0 = param[2];
      if(caml_equal(tag, [0, num_const])) return c;
      var num_const$0 = num_const + 1 | 0;
      num_const = num_const$0;
      param = rem$0;
      continue;
     }
     var rem = param[2];
     if(! caml_equal(tag, [1, num_nonconst]) && 0 !== tag){
      var num_nonconst$0 = num_nonconst + 1 | 0;
      num_nonconst = num_nonconst$0;
      param = rem;
      continue;
     }
     return c;
    }
   }
   function constructors_of_type(current_unit, ty_path, decl){
    var match = decl[3];
    if(typeof match !== "number" && 0 !== match[0]){
     var
      rep = match[2],
      cstrs = match[1],
      ty_res = newgenconstr(ty_path, decl[1]),
      num_consts = [0, 0],
      num_nonconsts = [0, 0];
     Stdlib_List[17].call
      (null,
       function(param){
        var cd_args = param[2];
        return caml_equal(cd_args, f8)
                ? (num_consts[1]++, 0)
                : (num_nonconsts[1]++, 0);
       },
       cstrs);
     var
      describe_constructors =
        function(idx_const, idx_nonconst, param){
         if(! param) return 0;
         var
          rem = param[2],
          match = param[1],
          cd_uid = match[6],
          cd_attributes = match[5],
          cd_loc = match[4],
          cd_res = match[3],
          cd_args = match[2],
          cd_id = match[1];
         if(cd_res)
          var ty_res$0 = cd_res[1], ty_res$1 = ty_res$0;
         else
          var ty_res$1 = ty_res;
         a:
         if(rep){
          if(0 !== rem)
           throw caml_maybe_attach_backtrace([0, Assert_failure, f_], 1);
          var descr_rem = 0, tag = 0;
         }
         else{
          if(0 === cd_args[0] && ! cd_args[1]){
           var
            descr_rem =
              describe_constructors(idx_const + 1 | 0, idx_nonconst, rem),
            tag = [0, idx_const];
           break a;
          }
          var
           descr_rem$0 =
             describe_constructors(idx_const, idx_nonconst + 1 | 0, rem),
           tag$0 = [1, idx_nonconst],
           descr_rem = descr_rem$0,
           tag = tag$0;
         }
         var
          cstr_name = cd_id[1],
          representation = rep ? f9 : [1, idx_nonconst],
          match$0 =
            constructor_args
             (current_unit,
              decl[4],
              cd_args,
              cd_res,
              [1, ty_path, cstr_name],
              representation),
          cstr_inlined = match$0[3],
          cstr_args = match$0[2],
          existentials = match$0[1],
          a = decl[4],
          b = num_nonconsts[1],
          c = num_consts[1],
          cstr =
            [0,
             cstr_name,
             ty_res$1,
             existentials,
             cstr_args,
             Stdlib_List[1].call(null, cstr_args),
             tag,
             c,
             b,
             0 !== cd_res ? 1 : 0,
             a,
             cd_loc,
             cd_attributes,
             cstr_inlined,
             cd_uid];
         return [0, [0, cd_id, cstr], descr_rem];
        };
     return describe_constructors(0, 0, cstrs);
    }
    return 0;
   }
   function labels_of_type(ty_path, decl){
    var match = decl[3];
    if(typeof match !== "number" && 0 === match[0]){
     var
      repres = match[2],
      labels = match[1],
      priv = decl[4],
      ty_res = newgenconstr(ty_path, decl[1]),
      all_labels =
        caml_make_vect(Stdlib_List[1].call(null, labels), dummy_label),
      describe_labels =
        function(num, param){
         if(! param) return 0;
         var
          rest = param[2],
          l = param[1],
          name = l[1][1],
          lbl =
            [0,
             name,
             ty_res,
             l[3],
             l[2],
             num,
             all_labels,
             repres,
             priv,
             l[4],
             l[5],
             l[6]];
         caml_check_bound(all_labels, num)[num + 1] = lbl;
         var a = describe_labels(num + 1 | 0, rest);
         return [0, [0, l[1], lbl], a];
        };
     return describe_labels(0, labels);
    }
    return 0;
   }
   var
    Dynlink_compilerlibs_Datarepr =
      [0,
       extension_descr,
       labels_of_type,
       constructors_of_type,
       Constr_not_found,
       find_constr_by_tag,
       constructor_existentials];
   caml_register_global
    (1312, Dynlink_compilerlibs_Datarepr, "Dynlink_compilerlibs.Datarepr");
   var Error$4 = [248, cst_Dynlink_compilerlibs_Cmi_f, caml_fresh_oo_id(0)];
   function input_cmi(ic){
    var
     match = Stdlib[89].call(null, ic),
     sign = match[2],
     name = match[1],
     crcs = Stdlib[89].call(null, ic),
     flags = Stdlib[89].call(null, ic);
    return [0, name, sign, crcs, flags];
   }
   function read_cmi(filename){
    var ic = Stdlib[80].call(null, filename);
    try{
     var
      buffer =
        Stdlib[86].call
         (null, ic, caml_ml_string_length(Dynlink_compilerlibs_Config[24]));
     if(buffer === Dynlink_compilerlibs_Config[24]){
      var cmi = input_cmi(ic);
      Stdlib[93].call(null, ic);
      return cmi;
     }
     Stdlib[93].call(null, ic);
     var
      pre_len = caml_ml_string_length(Dynlink_compilerlibs_Config[24]) - 3 | 0,
      a =
        Stdlib_String[15].call
         (null, Dynlink_compilerlibs_Config[24], 0, pre_len);
     if(Stdlib_String[15].call(null, buffer, 0, pre_len) !== a)
      throw caml_maybe_attach_backtrace([0, Error$4, [0, filename]], 1);
     var
      msg =
        runtime.caml_string_lessthan(buffer, Dynlink_compilerlibs_Config[24])
         ? cst_an_older$0
         : cst_a_newer$0;
     throw caml_maybe_attach_backtrace([0, Error$4, [1, filename, msg]], 1);
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[12] && exn[1] !== Stdlib[7]){
      var tag = exn[1];
      if(tag !== Error$4) throw caml_maybe_attach_backtrace(exn, 0);
      var e = exn[2];
      Stdlib[93].call(null, ic);
      throw caml_maybe_attach_backtrace([0, Error$4, e], 1);
     }
     Stdlib[93].call(null, ic);
     throw caml_maybe_attach_backtrace([0, Error$4, [2, filename]], 1);
    }
   }
   function output_cmi(filename, oc, cmi){
    Stdlib[66].call(null, oc, Dynlink_compilerlibs_Config[24]);
    Stdlib[72].call(null, oc, [0, cmi[1], cmi[2]]);
    Stdlib[63].call(null, oc);
    var
     crc = Stdlib_Digest[7].call(null, filename),
     crcs = [0, [0, cmi[1], [0, crc]], cmi[3]];
    Stdlib[72].call(null, oc, crcs);
    Stdlib[72].call(null, oc, cmi[4]);
    return crc;
   }
   function report_error$1(ppf, param){
    switch(param[0]){
      case 0:
       var filename = param[1];
       return caml_call2
               (Stdlib_Format[129].call(null, ppf)(f$),
                print_filename,
                filename);
      case 1:
       var older_newer = param[2], filename$0 = param[1];
       return caml_call3
               (Stdlib_Format[129].call(null, ppf)(ga),
                print_filename,
                filename$0,
                older_newer);
      default:
       var filename$1 = param[1];
       return caml_call2
               (Stdlib_Format[129].call(null, ppf)(gb),
                print_filename,
                filename$1);
    }
   }
   register_error_of_exn
    (function(param){
      var tag = param[1];
      if(tag !== Error$4) return 0;
      var err = param[2];
      return [0, error_of_printer_file(report_error$1, err)];
     });
   var
    Dynlink_compilerlibs_Cmi_forma =
      [0, output_cmi, input_cmi, read_cmi, Error$4, report_error$1];
   caml_register_global
    (1314, Dynlink_compilerlibs_Cmi_forma, "Dynlink_compilerlibs.Cmi_format");
   var
    s = a[4],
    Consistbl = D([0, s[68], s[69], s[70], s[9]]),
    add_delayed_check_forward =
      [0,
       function(param){
        throw caml_maybe_attach_backtrace([0, Assert_failure, gc], 1);
       }],
    Error$5 = [248, cst_Dynlink_compilerlibs_Persi, caml_fresh_oo_id(0)];
   function error$0(err){
    throw caml_maybe_attach_backtrace([0, Error$5, err], 1);
   }
   var
    load =
      [0,
       function(unit_name){
        try{
         var
          filename = find_uncap(Stdlib[28].call(null, unit_name, cst_cmi$0));
        }
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn === Stdlib[8]) return 0;
         throw caml_maybe_attach_backtrace(exn, 0);
        }
        return [0, [0, filename, read_cmi(filename)]];
       }],
    Persistent_signature = [0, load];
   function empty$4(param){
    var
     b = caml_call1(Consistbl[1], 0),
     c = [0, a[4][68][1]],
     d = [0, a[4][68][1]];
    return [0, Stdlib_Hashtbl[1].call(null, 0, 17), d, c, b, [0, 0]];
   }
   function clear$1(penv){
    var
     can_load_cmis = penv[5],
     crc_units = penv[4],
     imported_opaque_units = penv[3],
     imported_units = penv[2],
     persistent_structures = penv[1];
    Stdlib_Hashtbl[2].call(null, persistent_structures);
    imported_units[1] = a[4][68][1];
    imported_opaque_units[1] = a[4][68][1];
    caml_call1(Consistbl[2], crc_units);
    can_load_cmis[1] = 0;
    return 0;
   }
   function clear_missing(param){
    var
     persistent_structures = param[1],
     missing_entries =
       Stdlib_Hashtbl[14].call
        (null,
         function(name, r, acc){return 0 === r ? [0, name, acc] : acc;},
         persistent_structures,
         0),
     a = Stdlib_Hashtbl[10];
    return Stdlib_List[17].call
            (null,
             function(b){return a(persistent_structures, b);},
             missing_entries);
   }
   function add_import(param, s){
    var imported_units = param[2];
    imported_units[1] = caml_call2(a[4][68][4], s, imported_units[1]);
    return 0;
   }
   function register_import_as_opaque(param, s){
    var imported_opaque_units = param[3];
    imported_opaque_units[1] =
     caml_call2(a[4][68][4], s, imported_opaque_units[1]);
    return 0;
   }
   function find_in_cache(param, s){
    var persistent_structures = param[1];
    try{var val = Stdlib_Hashtbl[6].call(null, persistent_structures, s);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    if(! val) return 0;
    var pm = val[2];
    return [0, pm];
   }
   function import_crcs(penv, source, crcs){
    var crc_units = penv[4];
    function import_crc(param){
     var crco = param[2], name = param[1];
     if(! crco) return 0;
     var crc = crco[1];
     add_import(penv, name);
     return caml_call4(Consistbl[3], crc_units, name, crc, source);
    }
    return Stdlib_List[17].call(null, import_crc, crcs);
   }
   function can_load_cmis(penv){return penv[5][1];}
   function set_can_load_cmis(penv, setting){penv[5][1] = setting; return 0;}
   function without_cmis(penv, f, x){
    var
     log$0 = log(0),
     res =
       protect_refs
        ([0, [0, penv[5], [0, log$0]], 0],
         function(param){return caml_call1(f, x);});
    backtrack(log$0);
    return res;
   }
   function fold$2(param, f, x){
    var persistent_structures = param[1];
    return Stdlib_Hashtbl[14].call
            (null,
             function(modname, pso, x){
              if(! pso) return x;
              var pm = pso[2];
              return caml_call3(f, modname, pm, x);
             },
             persistent_structures,
             x);
   }
   function save_pers_struct(penv, crc, ps, pm){
    var crc_units = penv[4], persistent_structures = penv[1], modname = ps[1];
    Stdlib_Hashtbl[5].call(null, persistent_structures, modname, [0, ps, pm]);
    Stdlib_List[17].call
     (null,
      function(param){
       return typeof param === "number"
               ? 1 === param ? register_import_as_opaque(penv, modname) : 0
               : 0;
      },
      ps[4]);
    caml_call4(Consistbl[5], crc_units, modname, crc, ps[3]);
    return add_import(penv, modname);
   }
   function acknowledge_pers_struct(penv, check, modname, pers_sig, pm){
    var
     cmi = pers_sig[2],
     filename = pers_sig[1],
     name$0 = cmi[1],
     crcs = cmi[3],
     flags = cmi[4],
     ps = [0, name$0, crcs, filename, flags];
    if(ps[1] !== modname) error$0([0, modname, ps[1], filename]);
    Stdlib_List[17].call
     (null,
      function(param){
       if(typeof param === "number")
        switch(param){
          case 0:
           var a = 1 - recursive_types[1]; return a ? error$0([2, ps[1]]) : a;
          case 1:
           return register_import_as_opaque(penv, modname);
          default:
           var b = Dynlink_compilerlibs_Config[60];
           return b ? error$0([3, ps[1]]) : b;
        }
       return 0;
      },
      ps[4]);
    if(check)
     try{import_crcs(penv, ps[3], ps[2]);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0), tag = exn[1];
      if(tag !== Consistbl[10]) throw caml_maybe_attach_backtrace(exn, 0);
      var auth = exn[4], source = exn[3], name = exn[2];
      error$0([1, name, auth, source]);
     }
    var persistent_structures = penv[1];
    Stdlib_Hashtbl[5].call(null, persistent_structures, modname, [0, ps, pm]);
    return ps;
   }
   function find_pers_struct(penv, val_of_pers_sig, check, name){
    var persistent_structures = penv[1];
    if(name === cst_predef) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    try{var val = Stdlib_Hashtbl[6].call(null, persistent_structures, name);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     if(can_load_cmis(penv)) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var match = caml_call1(load[1], name);
     if(match){
      var psig = match[1];
      add_import(penv, name);
      var
       pm = caml_call1(val_of_pers_sig, psig),
       ps = acknowledge_pers_struct(penv, check, name, psig, pm);
      return [0, ps, pm];
     }
     Stdlib_Hashtbl[5].call(null, persistent_structures, name, 0);
     throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    }
    if(! val) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var pm$0 = val[2], ps$0 = val[1];
    return [0, ps$0, pm$0];
   }
   function read$0(penv, val_of_pers_sig, modname, filename){
    add_import(penv, modname);
    var
     cmi = read_cmi(filename),
     pers_sig = [0, filename, cmi],
     pm = caml_call1(val_of_pers_sig, pers_sig);
    acknowledge_pers_struct(penv, 1, modname, pers_sig, pm);
    return pm;
   }
   function find$3(penv, f, name){
    return find_pers_struct(penv, f, 1, name)[2];
   }
   function check$0(penv, f, loc, name){
    var
     persistent_structures = penv[1],
     a = 1 - Stdlib_Hashtbl[9].call(null, persistent_structures, name);
    if(a){
     add_import(penv, name);
     var b = is_active(gi);
     if(b)
      return caml_call1
              (add_delayed_check_forward[1],
               function(param){
                try{find_pers_struct(penv, f, 0, name); var a = 0; return a;}
                catch(exn$0){
                 var exn = caml_wrap_exception(exn$0);
                 if(exn === Stdlib[8]){
                  var warn = [32, name, 0];
                  return prerr_warning(loc, warn);
                 }
                 var tag = exn[1];
                 if(tag === Error$4){
                  var
                   err = exn[2],
                   msg =
                     caml_call2
                      (Stdlib_Format[133].call(null, gd), report_error$1, err),
                   warn$0 = [32, name, [0, msg]];
                  return prerr_warning(loc, warn$0);
                 }
                 var tag$0 = exn[1];
                 if(tag$0 !== Error$5)
                  throw caml_maybe_attach_backtrace(exn, 0);
                 var err$0 = exn[2];
                 switch(err$0[0]){
                   case 0:
                    var
                     filename = err$0[3],
                     ps_name = err$0[2],
                     name$0 = err$0[1],
                     msg$0 =
                       caml_call4
                        (Stdlib_Format[133].call(null, ge),
                         print_filename,
                         filename,
                         ps_name,
                         name$0);
                    break;
                   case 1:
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, gf], 1);
                   case 2:
                    var
                     name$1 = err$0[1],
                     msg$0 =
                       caml_call1(Stdlib_Format[132].call(null, gg), name$1);
                    break;
                   default:
                    var
                     name$2 = err$0[1],
                     msg$0 = caml_call1(Stdlib_Printf[4].call(null, gh), name$2);
                 }
                 var warn$1 = [32, name, [0, msg$0]];
                 return prerr_warning(loc, warn$1);
                }
               });
     var c = b;
    }
    else
     var c = a;
    return c;
   }
   function crc_of_unit(penv, f, name){
    var ps = find_pers_struct(penv, f, 1, name)[1];
    try{var crco = Stdlib_List[46].call(null, name, ps[2]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      throw caml_maybe_attach_backtrace([0, Assert_failure, gj], 1);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    if(! crco) throw caml_maybe_attach_backtrace([0, Assert_failure, gk], 1);
    var crc = crco[1];
    return crc;
   }
   function imports(param){
    var
     crc_units = param[4],
     imported_units = param[2],
     b = caml_call1(a[4][68][23], imported_units[1]);
    return caml_call2(Consistbl[7], b, crc_units);
   }
   function looked_up(param, modname){
    var persistent_structures = param[1];
    return Stdlib_Hashtbl[9].call(null, persistent_structures, modname);
   }
   function is_imported(param, s){
    var imported_units = param[2];
    return caml_call2(a[4][68][3], s, imported_units[1]);
   }
   function is_imported_opaque(param, s){
    var imported_opaque_units = param[3];
    return caml_call2(a[4][68][3], s, imported_opaque_units[1]);
   }
   function make_cmi(penv, modname, sign, alerts){
    var
     a = [0, [0, [0, alerts], 0], 0],
     b = unsafe_string[1] ? gl : 0,
     c = [0, b, a],
     d = opaque[1] ? gm : 0,
     e = [0, d, c],
     f = recursive_types[1] ? gn : 0,
     flags = Stdlib_List[13].call(null, [0, f, e]),
     crcs = imports(penv);
    return [0, modname, sign, crcs, flags];
   }
   function save_cmi(penv, psig, pm){
    var cmi = psig[2], filename = psig[1];
    return try_finally
            (0,
             [0, function(param){return remove_file(filename);}],
             function(param){
              var
               flags = cmi[4],
               imports = cmi[3],
               modname = cmi[1],
               crc =
                 output_to_file_via_temporary
                  (go,
                   filename,
                   function(temp_filename, oc){
                    return output_cmi(temp_filename, oc, cmi);
                   }),
               ps =
                 [0,
                  modname,
                  [0, [0, cmi[1], [0, crc]], imports],
                  filename,
                  flags];
              return save_pers_struct(penv, crc, ps, pm);
             });
   }
   function report_error$2(ppf){
    return function(param){
     switch(param[0]){
       case 0:
        var filename = param[3], ps_name = param[2], modname = param[1];
        return caml_call4
                (Stdlib_Format[129].call(null, ppf)(gp),
                 print_filename,
                 filename,
                 ps_name,
                 modname);
       case 1:
        var source2 = param[3], source1 = param[2], name = param[1];
        return caml_call5
                (Stdlib_Format[129].call(null, ppf)(gq),
                 print_filename,
                 source1,
                 print_filename,
                 source2,
                 name);
       case 2:
        var import$ = param[1];
        return caml_call2
                (Stdlib_Format[129].call(null, ppf)(gr),
                 import$,
                 cst_The_compilation_flag_recty);
       default:
        var import$0 = param[1];
        return caml_call2
                (Stdlib_Format[129].call(null, ppf)(gs),
                 import$0,
                 cst_This_compiler_has_been_con);
     }};
   }
   register_error_of_exn
    (function(param){
      var tag = param[1];
      if(tag !== Error$5) return 0;
      var err = param[2];
      return [0, error_of_printer_file(report_error$2, err)];
     });
   var
    Dynlink_compilerlibs_Persisten =
      [0,
       Consistbl,
       Error$5,
       report_error$2,
       Persistent_signature,
       empty$4,
       clear$1,
       clear_missing,
       fold$2,
       read$0,
       find$3,
       find_in_cache,
       check$0,
       looked_up,
       is_imported,
       is_imported_opaque,
       register_import_as_opaque,
       make_cmi,
       save_cmi,
       can_load_cmis,
       set_can_load_cmis,
       without_cmis,
       import_crcs,
       imports,
       crc_of_unit,
       add_delayed_check_forward];
   caml_register_global
    (1315,
     Dynlink_compilerlibs_Persisten,
     "Dynlink_compilerlibs.Persistent_env");
   var
    add_delayed_check_forward$0 =
      [0,
       function(param){
        throw caml_maybe_attach_backtrace([0, Assert_failure, gt], 1);
       }],
    value_declarations = s_table(c[15][1], 16),
    type_declarations = s_table(c[15][1], 16),
    module_declarations = s_table(c[15][1], 16),
    uid_to_loc = s_table(c[15][1], 16);
   function register_uid(uid, loc){
    return caml_call3(c[15][5], uid_to_loc[1], uid, loc);
   }
   function get_uid_to_loc_tbl(param){return uid_to_loc[1];}
   function add_constructor_usage(cu, usage){
    switch(usage){
      case 0:
       cu[1] = 1; return 0;
      case 1:
       cu[2] = 1; return 0;
      case 2:
       cu[3] = 1; return 0;
      default: cu[1] = 1; cu[2] = 1; cu[3] = 1; return 0;
    }
   }
   function constructor_usages(param){return [0, 0, 0, 0];}
   function constructor_usage_complaint(rebind, priv, cu){
    if(priv && ! rebind){
     var a = cu[2], match = cu[3];
     return cu[1] ? 0 : a ? gv : match ? gw : gx;
    }
    if(! cu[1] && ! cu[2] && ! cu[3]) return gu;
    return 0;
   }
   var
    used_constructors = s_table(c[15][1], 16),
    used_labels = s_table(c[15][1], 16);
   function map_summary(f, param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var d = param[3], id = param[2], s = param[1];
       return [0, caml_call1(f, s), id, d];
      case 1:
       var d$0 = param[3], id$0 = param[2], s$0 = param[1];
       return [1, caml_call1(f, s$0), id$0, d$0];
      case 2:
       var d$1 = param[3], id$1 = param[2], s$1 = param[1];
       return [2, caml_call1(f, s$1), id$1, d$1];
      case 3:
       var d$2 = param[4], p = param[3], id$2 = param[2], s$2 = param[1];
       return [3, caml_call1(f, s$2), id$2, p, d$2];
      case 4:
       var d$3 = param[3], id$3 = param[2], s$3 = param[1];
       return [4, caml_call1(f, s$3), id$3, d$3];
      case 5:
       var d$4 = param[3], id$4 = param[2], s$4 = param[1];
       return [5, caml_call1(f, s$4), id$4, d$4];
      case 6:
       var d$5 = param[3], id$5 = param[2], s$5 = param[1];
       return [6, caml_call1(f, s$5), id$5, d$5];
      case 7:
       var p$0 = param[2], s$6 = param[1];
       return [7, caml_call1(f, s$6), p$0];
      case 8:
       var id$6 = param[2], s$7 = param[1];
       return [8, caml_call1(f, s$7), id$6];
      case 9:
       var m = param[2], s$8 = param[1]; return [9, caml_call1(f, s$8), m];
      case 10:
       var s$9 = param[1]; return [10, caml_call1(f, s$9)];
      case 11:
       var id$7 = param[2], s$10 = param[1];
       return [11, caml_call1(f, s$10), id$7];
      case 12:
       var r = param[3], u = param[2], s$11 = param[1];
       return [12, caml_call1(f, s$11), u, r];
      default:
       var r$0 = param[3], u$0 = param[2], s$12 = param[1];
       return [13, caml_call1(f, s$12), u$0, r$0];
    }
   }
   var empty$5 = [0, empty$0, 0];
   function add$7(id, x, tbl){
    var a = tbl[2];
    return [0, add$0(id, x, tbl[1]), a];
   }
   function add_open(slot, wrap, root, components, next){
    if(slot)
     var
      f = slot[1],
      using =
        [0, function(s, x){return caml_call2(f, s, caml_call1(wrap, x));}];
    else
     var using = 0;
    return [0, empty$0, [0, [0, components, root, using, next]]];
   }
   function find_same$0(id, tbl$0){
    var tbl = tbl$0;
    for(;;)
     try{var a = find_same(id, tbl[1]); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var match = tbl[2];
      if(! match) throw caml_maybe_attach_backtrace(exn, 0);
      var next = match[1][4];
      tbl = next;
     }
   }
   function nothing(param){return 0;}
   function mk_callback(rest, name, desc, using){
    if(! using) return nothing;
    var f = using[1];
    return function(param){
     if(! rest) return caml_call2(f, name, 0);
     var hidden = rest[1][1];
     return caml_call2(f, name, [0, [0, desc, hidden]]);};
   }
   function find_all$1(mark, name, tbl){
    var match = tbl[2];
    a:
    if(match){
     var
      match$0 = match[1],
      next = match$0[4],
      using = match$0[3],
      components = match$0[1],
      rest = find_all$1(mark, name, next),
      using$0 = mark ? using : 0;
     try{var opened = caml_call2(a[4][69][28], name, components);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var rest$0 = rest;
      break a;
     }
     var
      d =
        Stdlib_List[19].call
         (null,
          function(desc){
           return [0, desc, mk_callback(rest, name, desc, using$0)];
          },
          opened),
      rest$0 = Stdlib[37].call(null, d, rest);
    }
    else
     var rest$0 = 0;
    var
     b = find_all(name, tbl[1]),
     c =
       Stdlib_List[19].call
        (null,
         function(param){var desc = param[2]; return [0, desc, nothing];},
         b);
    return Stdlib[37].call(null, c, rest$0);
   }
   var empty$6 = [0, empty$0, 0];
   function add$8(id, x, tbl){
    var a = tbl[2];
    return [0, add$0(id, x, tbl[1]), a];
   }
   function add_open$0(slot, wrap, root, components, next){
    if(slot)
     var
      f = slot[1],
      using =
        [0, function(s, x){return caml_call2(f, s, caml_call1(wrap, x));}];
    else
     var using = 0;
    return [0, empty$0, [0, root, components, using, next]];
   }
   function find_same$1(id, tbl$0){
    var tbl = tbl$0;
    for(;;)
     try{var a = find_same(id, tbl[1]); return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var match = tbl[2];
      if(typeof match === "number") throw caml_maybe_attach_backtrace(exn, 0);
      if(0 !== match[0]){
       var next$0 = match[2], f = match[1];
       return caml_call1(f, find_same$1(id, next$0));
      }
      var next = match[4];
      tbl = next;
     }
   }
   function find_name$0(wrap, mark, name, tbl$0){
    var tbl = tbl$0;
    for(;;)
     try{
      var
       match$1 = find_name(name, tbl[1]),
       desc$0 = match$1[2],
       id = match$1[1],
       b = [0, [0, id], desc$0];
      return b;
     }
     catch(exn$2){
      var exn = caml_wrap_exception(exn$2);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var match = tbl[2];
      if(typeof match === "number") throw caml_maybe_attach_backtrace(exn, 0);
      if(0 !== match[0]){
       var
        next$0 = match[2],
        f$0 = match[1],
        match$0 = find_name$0(wrap, mark, name, next$0),
        desc = match$0[2],
        p = match$0[1];
       return [0, p, caml_call1(f$0, desc)];
      }
      var
       next = match[4],
       using = match[3],
       components = match[2],
       root = match[1];
      try{
       var
        descr = caml_call1(wrap, caml_call2(a[4][69][28], name, components)),
        res = [0, [1, root, name], descr];
       a:
       if(mark && using){
        var f = using[1];
        try{var val = find_name$0(wrap, 0, name, next);}
        catch(exn){
         var exn$1 = caml_wrap_exception(exn);
         if(exn$1 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$1, 0);
         caml_call2(f, name, 0);
         break a;
        }
        var descr$0 = val[2];
        caml_call2(f, name, [0, [0, descr$0, descr]]);
       }
       return res;
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(exn$0 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$0, 0);
       tbl = next;
      }
     }
   }
   function find_all$2(wrap, name, tbl){
    var match = tbl[2];
    if(typeof match === "number")
     var b = 0;
    else if(0 === match[0]){
     var next = match[4], components = match[2], root = match[1];
     try{
      var
       desc = caml_call1(wrap, caml_call2(a[4][69][28], name, components)),
       e = [0, [0, [1, root, name], desc], find_all$2(wrap, name, next)],
       b = e;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var b = find_all$2(wrap, name, next);
     }
    }
    else
     var
      next$0 = match[2],
      f = match[1],
      g = find_all$2(wrap, name, next$0),
      b =
        Stdlib_List[19].call
         (null,
          function(param){
           var desc = param[2], p = param[1];
           return [0, p, caml_call1(f, desc)];
          },
          g);
    var
     c = find_all(name, tbl[1]),
     d =
       Stdlib_List[19].call
        (null,
         function(param){
          var desc = param[2], id = param[1];
          return [0, [0, id], desc];
         },
         c);
    return Stdlib[37].call(null, d, b);
   }
   function fold_name$0(wrap, f$1, tbl$0, acc$2){
    var f = f$1, tbl = tbl$0, acc = acc$2;
    for(;;){
     let f$1 = f;
     var
      acc$0 =
        fold_name
         (function(id, d){
           var name = id[1];
           return caml_call2(f$1, name, [0, [0, id], d]);
          },
          tbl[1],
          acc),
      match = tbl[2];
     if(typeof match === "number") return acc$0;
     if(0 === match[0]){
      var next = match[4], components = match[2], root = match[1];
      let f$0 = f, root$0 = root;
      var
       acc$1 =
         caml_call1
          (caml_call2
            (a[4][69][13],
             function(name, desc){
              return caml_call2
                      (f$0, name, [0, [1, root$0, name], caml_call1(wrap, desc)]);
             },
             components),
           acc$0);
      tbl = next;
      acc = acc$1;
     }
     else{
      var next$0 = match[2], g = match[1];
      let f$1 = f, g$0 = g;
      var
       f$0 =
         function(name, param){
          var desc = param[2], path = param[1];
          return caml_call2(f$1, name, [0, path, caml_call1(g$0, desc)]);
         };
      f = f$0;
      tbl = next$0;
      acc = acc$0;
     }
    }
   }
   function iter$5(wrap, f$1, tbl$0){
    var f = f$1, tbl = tbl$0;
    for(;;){
     let f$1 = f;
     iter$0
      (function(id, desc){return caml_call2(f$1, id, [0, [0, id], desc]);},
       tbl[1]);
     var match = tbl[2];
     if(typeof match === "number") return 0;
     if(0 === match[0]){
      var next = match[4], components = match[2], root = match[1];
      let f$0 = f, root$0 = root;
      caml_call2
       (a[4][69][12],
        function(s, x){
         var
          root_scope = scope$0(root$0),
          a = [0, [1, root$0, s], caml_call1(wrap, x)];
         return caml_call2(f$0, create_scoped(root_scope, s), a);
        },
        components);
      tbl = next;
     }
     else{
      var next$0 = match[2], g = match[1];
      let f$1 = f, g$0 = g;
      var
       f$0 =
         function(id, param){
          var desc = param[2], path = param[1];
          return caml_call2(f$1, id, [0, path, caml_call1(g$0, desc)]);
         };
      f = f$0;
      tbl = next$0;
     }
    }
   }
   function diff_keys(tbl1, tbl2){
    var tbl = tbl2, acc = 0;
    for(;;){
     var
      keys2 =
        fold_all(function(k, param, accu){return [0, k, accu];}, tbl[1], acc),
      match = tbl[2];
     if(typeof match === "number") break;
     if(0 === match[0]){
      tbl = match[4];
      acc = keys2;
     }
     else{tbl = match[2]; acc = keys2;}
    }
    return Stdlib_List[41].call
             (null,
              function(id){
               try{find_same$1(id, tbl1); var a = 0; return a;}
               catch(exn$0){
                var exn = caml_wrap_exception(exn$0);
                if(exn === Stdlib[8]) return 1;
                throw caml_maybe_attach_backtrace(exn, 0);
               }
              })
            (keys2);
   }
   var
    empty_structure =
      [0,
       [0,
        a[4][69][1],
        a[4][69][1],
        a[4][69][1],
        a[4][69][1],
        a[4][69][1],
        a[4][69][1],
        a[4][69][1],
        a[4][69][1]]],
    Error$6 = [248, cst_Dynlink_compilerlibs_Env_E, caml_fresh_oo_id(0)];
   function error$1(err){
    throw caml_maybe_attach_backtrace([0, Error$6, err], 1);
   }
   function lookup_error(loc, env, err){return error$1([2, loc, env, err]);}
   var
    same_constr =
      [0,
       function(param, b, a){
        throw caml_maybe_attach_backtrace([0, Assert_failure, gF], 1);
       }],
    check_well_formed_module =
      [0,
       function(param){
        throw caml_maybe_attach_backtrace([0, Assert_failure, gG], 1);
       }],
    empty$7 =
      [0,
       empty$6,
       empty$5,
       empty$5,
       empty$6,
       empty$6,
       empty$6,
       empty$6,
       empty$6,
       empty$0,
       0,
       Map$3[1],
       0],
    in_signature_flag = 1;
   function in_signature(b, env){
    if(b)
     var flags = env[12] | 1;
    else
     var a = Stdlib[21].call(null, in_signature_flag), flags = env[12] & a;
    return [0,
            env[1],
            env[2],
            env[3],
            env[4],
            env[5],
            env[6],
            env[7],
            env[8],
            env[9],
            env[10],
            env[11],
            flags];
   }
   function is_in_signature(env){return 0 !== (env[12] & 1) ? 1 : 0;}
   function has_local_constraints(env){
    return 1 - caml_call1(Map$3[2], env[11]);
   }
   function is_ext(cda){
    var match = cda[1][6];
    if(typeof match !== "number" && 2 === match[0]) return 1;
    return 0;
   }
   function diff$0(env1, env2){
    var
     b = diff_keys(env1[7], env2[7]),
     c = diff_keys(env1[5], env2[5]),
     d = Stdlib[37].call(null, c, b),
     tbl2 = env2[2],
     tbl1 = env1[2],
     tbl = tbl2,
     acc = 0;
    for(;;){
     var
      keys2 =
        fold_all(function(k, param, accu){return [0, k, accu];}, tbl[1], acc),
      match = tbl[2];
     if(! match) break;
     var o = match[1], tbl$0 = o[4];
     tbl = tbl$0;
     acc = keys2;
    }
    var
     a =
       Stdlib_List[41].call
         (null,
          function(id){
           var cda = find_same$0(id, tbl2), match = cda[1][6];
           a:
           {
            if(typeof match !== "number" && 2 === match[0]){
             var p = match[1];
             if(0 === p[0]){var a = 1; break a;}
             var a = 0;
             break a;
            }
            var a = 0;
           }
           if(! a) return a;
           try{find_same$0(id, tbl1); var b = 0; return b;}
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0);
            if(exn === Stdlib[8]) return 1;
            throw caml_maybe_attach_backtrace(exn, 0);
           }
          })
        (keys2),
     e = Stdlib[37].call(null, a, d),
     f = diff_keys(env1[1], env2[1]);
    return Stdlib[37].call(null, f, e);
   }
   function wrap_identity(x){return x;}
   function wrap_value(vda){return [0, vda];}
   function wrap_module(mda){return [0, mda];}
   var
    components_of_module_maker =
      [0,
       function(param){
        throw caml_maybe_attach_backtrace([0, Assert_failure, gP], 1);
       }],
    components_of_functor_appl =
      [0,
       function(param, c, b, a, env){
        throw caml_maybe_attach_backtrace([0, Assert_failure, gQ], 1);
       }],
    check_functor_application =
      [0,
       function(param, g, f, e, d, c, b, a, env){
        throw caml_maybe_attach_backtrace([0, Assert_failure, gR], 1);
       }],
    strengthen =
      [0,
       function(param, env, mty, path){
        throw caml_maybe_attach_backtrace([0, Assert_failure, gS], 1);
       }];
   function md(md_type){return [0, md_type, 0, none, c[5]];}
   function print_address(ppf, param){
    if(0 === param[0]){
     var id = param[1], name = id[1];
     return caml_call1(Stdlib_Format[129].call(null, ppf)(gT), name);
    }
    var pos = param[2], a = param[1];
    return caml_call3
            (Stdlib_Format[129].call(null, ppf)(gU), print_address, a, pos);
   }
   var current_unit = [0, cst$92];
   function get_unit_name(param){return current_unit[1];}
   function set_unit_name(name){current_unit[1] = name; return 0;}
   function is(name){return current_unit[1] === name ? 1 : 0;}
   function is_ident(id){
    var a = persistent(id);
    if(! a) return a;
    var name = id[1];
    return is(name);
   }
   function add_persistent_structure(id, env){
    if(1 - persistent(id))
     Stdlib[1].call(null, cst_Env_add_persistent_structu);
    if(is_ident(id)) return env;
    a:
    {
     b:
     {
      try{var name = id[1], val = find_name$0(wrap_module, 0, name, env[5]);}
      catch(b){
       var a = caml_wrap_exception(b);
       if(a === Stdlib[8]) break b;
       throw caml_maybe_attach_backtrace(a, 0);
      }
      if(typeof val[2] !== "number"){var material = 1; break a;}
     }
     var material = 0;
    }
    var summary = material ? [11, env[10], id] : env[10];
    a:
    {
     if(! material && transparent_modules[1]){var modules = env[5]; break a;}
     var modules = add$8(id, 0, env[5]);
    }
    return [0,
            env[1],
            env[2],
            env[3],
            env[4],
            modules,
            env[6],
            env[7],
            env[8],
            env[9],
            summary,
            env[11],
            env[12]];
   }
   function components_of_module(alerts, uid, env, ps, path, addr, mty, shape){return [0, alerts, uid, create$3([0, env, ps, path, addr, mty, shape])];
   }
   function sign_of_cmi(freshen, param){
    var
     cmi = param[2],
     name = cmi[1],
     sign = cmi[2],
     flags = cmi[4],
     id = [2, name],
     path = [0, id],
     alerts =
       Stdlib_List[25].call
        (null,
         function(acc, param){
          if(typeof param === "number") return acc;
          var s = param[1];
          return s;
         },
         a[4][69][1],
         flags),
     md = [0, [1, sign], 0, none, caml_call1(c[3], id)],
     mda_address = create_forced([0, id]),
     mda_declaration =
       subst_lazy_module_decl(1, identity, lazy_module_decl(md)),
     mda_shape = for_persistent_unit(name),
     mty = lazy_modtype([1, sign]),
     mty$0 =
       freshen ? subst_lazy_modtype([0, scope$0(path)], identity, mty) : mty,
     mda_components =
       components_of_module
        (alerts,
         md[4],
         empty$7,
         identity,
         path,
         mda_address,
         mty$0,
         mda_shape);
    return [0, mda_declaration, mda_components, mda_address, mda_shape];
   }
   var N = 1;
   function read_sign_of_cmi(a){return sign_of_cmi(N, a);}
   var O = 0, persistent_env = s_table(empty$4, 0);
   function without_cmis$0(f, x){
    return without_cmis(persistent_env[1], f, x);
   }
   function imports$0(param){return imports(persistent_env[1]);}
   function import_crcs$0(source, crcs){
    return import_crcs(persistent_env[1], source, crcs);
   }
   function find_pers_mod(name){
    return find$3(persistent_env[1], read_sign_of_cmi, name);
   }
   function crc_of_unit$0(name){
    return crc_of_unit(persistent_env[1], read_sign_of_cmi, name);
   }
   function is_imported_opaque$0(modname){
    return is_imported_opaque(persistent_env[1], modname);
   }
   function register_import_as_opaque$0(modname){
    return register_import_as_opaque(persistent_env[1], modname);
   }
   function reset_declaration_caches(param){
    caml_call1(c[15][2], value_declarations[1]);
    caml_call1(c[15][2], type_declarations[1]);
    caml_call1(c[15][2], module_declarations[1]);
    caml_call1(c[15][2], used_constructors[1]);
    caml_call1(c[15][2], used_labels[1]);
    caml_call1(c[15][2], uid_to_loc[1]);
   }
   function reset_cache(param){
    set_unit_name(cst$93);
    clear$1(persistent_env[1]);
    reset_declaration_caches(0);
    return 0;
   }
   function reset_cache_toplevel(param){
    clear_missing(persistent_env[1]);
    reset_declaration_caches(0);
    return 0;
   }
   function get_components_res(c){
    var match = can_load_cmis(persistent_env[1]);
    if(! match) return force(components_of_module_maker[1], c[3]);
    var log = match[1];
    return force_logged(log, components_of_module_maker[1], c[3]);
   }
   function get_components(c){
    var match = get_components_res(c);
    if(0 !== match[0]) return empty_structure;
    var c$0 = match[1];
    return c$0;
   }
   function modtype_of_functor_appl(fcomp, p1, p2){
    var mty = fcomp[2];
    if(3 === mty[0]) return mty;
    try{var b = Stdlib_Hashtbl[6].call(null, fcomp[5], p2); return b;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var scope = scope$0([2, p1, p2]), a = fcomp[1];
     if(a)
      var
       match = a[1],
       subst = match ? add_module$0(match[1], p2, identity) : identity;
     else
      var subst = identity;
     var mty$0 = modtype$1([0, scope], subst, mty);
     Stdlib_Hashtbl[5].call(null, fcomp[5], p2, mty$0);
     return mty$0;
    }
   }
   function find_ident_module(id, env){
    var tbl = env[5];
    a:
    try{var x = find_same$1(id, tbl), match = x;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8] && persistent(id) && ! is_ident(id)){var match = 0; break a;}
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    if(typeof match === "number"){
     var name = id[1];
     return find_pers_mod(name);
    }
    if(0 !== match[0]) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var data = match[1];
    return data;
   }
   function find_module_components(path, env){
    switch(path[0]){
      case 0:
       var id = path[1]; return find_ident_module(id, env)[2];
      case 1:
       var s = path[2], p = path[1], sc = find_structure_components(p, env);
       return caml_call2(a[4][69][28], s, sc[5])[2];
      default:
       var
        arg = path[2],
        f_path = path[1],
        f_comp = find_functor_components(f_path, env),
        loc = in_file(input_name[1]);
       return caml_call5
               (components_of_functor_appl[1], loc, f_path, f_comp, arg, env);
    }
   }
   function find_structure_components(path, env){
    var match = get_components(find_module_components(path, env));
    if(0 !== match[0]) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var c = match[1];
    return c;
   }
   function find_functor_components(path, env){
    var match = get_components(find_module_components(path, env));
    if(0 === match[0]) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var f = match[1];
    return f;
   }
   function find_module_lazy(alias, path, env){
    switch(path[0]){
      case 0:
       var id = path[1], data = find_ident_module(id, env); return data[1];
      case 1:
       var
        s = path[2],
        p = path[1],
        sc = find_structure_components(p, env),
        data$0 = caml_call2(a[4][69][28], s, sc[5]);
       return data$0[1];
      default:
       var
        p2 = path[2],
        p1 = path[1],
        fc = find_functor_components(p1, env),
        md$0 = alias ? md(fc[2]) : md(modtype_of_functor_appl(fc, p1, p2));
       return lazy_module_decl(md$0);
    }
   }
   function find_strengthened_module(aliasable, path, env){
    var
     md = find_module_lazy(1, path, env),
     mty = caml_call4(strengthen[1], aliasable, env, md[1], path);
    return force_modtype(mty);
   }
   function find_value_full(path, env){
    switch(path[0]){
      case 0:
       var id = path[1], match = find_same$1(id, env[1]);
       if(0 !== match[0]) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
       var data = match[1];
       return data;
      case 1:
       var s = path[2], p = path[1], sc = find_structure_components(p, env);
       return caml_call2(a[4][69][28], s, sc[1]);
      default: throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    }
   }
   function find_type_full(path, env){
    switch(path[0]){
      case 0:
       var id = path[1]; return find_same$1(id, env[4]);
      case 1:
       var s = path[2], p = path[1], sc = find_structure_components(p, env);
       return caml_call2(a[4][69][28], s, sc[4]);
      default: throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    }
   }
   function find_modtype_lazy(path, env){
    switch(path[0]){
      case 0:
       var id = path[1]; return find_same$1(id, env[6])[1];
      case 1:
       var s = path[2], p = path[1], sc = find_structure_components(p, env);
       return caml_call2(a[4][69][28], s, sc[6])[1];
      default: throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    }
   }
   function find_modtype(path, env){
    return force_modtype_decl(find_modtype_lazy(path, env));
   }
   function find_class_full(path, env){
    switch(path[0]){
      case 0:
       var id = path[1]; return find_same$1(id, env[7]);
      case 1:
       var s = path[2], p = path[1], sc = find_structure_components(p, env);
       return caml_call2(a[4][69][28], s, sc[7]);
      default: throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    }
   }
   function find_cltype(path, env){
    switch(path[0]){
      case 0:
       var id = path[1]; return find_same$1(id, env[8])[1];
      case 1:
       var s = path[2], p = path[1], sc = find_structure_components(p, env);
       return caml_call2(a[4][69][28], s, sc[8])[1];
      default: throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    }
   }
   function find_value(path, env){return find_value_full(path, env)[1];}
   function find_class(path, env){return find_class_full(path, env)[1];}
   function find_ident_constructor(id, env){return find_same$0(id, env[2])[1];
   }
   function find_ident_label(id, env){return find_same$0(id, env[3]);}
   function type_of_cstr(path, param){
    var match = param[13];
    if(! match) throw caml_maybe_attach_backtrace([0, Assert_failure, gW], 1);
    var
     decl = match[1],
     a = labels_of_type(path, decl),
     labels = Stdlib_List[19].call(null, function(a){return a[2];}, a),
     match$0 = decl[3];
    if(typeof match$0 !== "number" && 0 === match$0[0]){
     var repr = match$0[2];
     return [0, decl, [0, labels, repr]];
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, gV], 1);
   }
   function find_type_data(path, env){
    var match = constructor_typath(path);
    switch(match[0]){
      case 0:
       var p = match[1];
       try{var decl = caml_call2(Map$3[28], p, env[11]);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn === Stdlib[8]) return find_type_full(p, env);
        throw caml_maybe_attach_backtrace(exn, 0);
       }
       return [0, decl, 0];
      case 1:
       var s = match[2], mod_path = match[1];
       try{var comps = find_structure_components(mod_path, env);}
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        if(exn$0 === Stdlib[8])
         throw caml_maybe_attach_backtrace([0, Assert_failure, gX], 1);
        throw caml_maybe_attach_backtrace(exn$0, 0);
       }
       try{var cstrs = caml_call2(a[4][69][28], s, comps[2]);}
       catch(exn){
        var exn$1 = caml_wrap_exception(exn);
        if(exn$1 === Stdlib[8])
         throw caml_maybe_attach_backtrace([0, Assert_failure, gY], 1);
        throw caml_maybe_attach_backtrace(exn$1, 0);
       }
       var exts = Stdlib_List[41].call(null, is_ext)(cstrs);
       if(exts && ! exts[2]){
        var cda = exts[1];
        return type_of_cstr(path, cda[1]);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, gZ], 1);
      case 2:
       var id = match[1];
       try{var cstr = find_same$0(id, env[2])[1];}
       catch(exn){
        var exn$2 = caml_wrap_exception(exn);
        if(exn$2 === Stdlib[8])
         throw caml_maybe_attach_backtrace([0, Assert_failure, g0], 1);
        throw caml_maybe_attach_backtrace(exn$2, 0);
       }
       return type_of_cstr(path, cstr);
      default:
       var s$0 = match[2], ty_path = match[1];
       try{var tda = find_type_full(ty_path, env);}
       catch(exn){
        var exn$3 = caml_wrap_exception(exn);
        if(exn$3 === Stdlib[8])
         throw caml_maybe_attach_backtrace([0, Assert_failure, g1], 1);
        throw caml_maybe_attach_backtrace(exn$3, 0);
       }
       var match$0 = tda[2];
       if(typeof match$0 !== "number" && 0 !== match$0[0]){
        var cstrs$0 = match$0[1];
        try{
         var
          cstr$0 =
            Stdlib_List[38].call
             (null, function(cstr){return cstr[1] === s$0 ? 1 : 0;}, cstrs$0);
        }
        catch(exn){
         var exn$4 = caml_wrap_exception(exn);
         if(exn$4 === Stdlib[8])
          throw caml_maybe_attach_backtrace([0, Assert_failure, g3], 1);
         throw caml_maybe_attach_backtrace(exn$4, 0);
        }
        return type_of_cstr(path, cstr$0);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, g2], 1);
    }
   }
   function find_type(p, env){return find_type_data(p, env)[1];}
   function find_type_descrs(p, env){return find_type_data(p, env)[2];}
   function find_module_address(path, env){
    switch(path[0]){
      case 0:
       var id = path[1]; return get_address(find_ident_module(id, env)[3]);
      case 1:
       var s = path[2], p = path[1], c = find_structure_components(p, env);
       return get_address(caml_call2(a[4][69][28], s, c[5])[3]);
      default: throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    }
   }
   function force_address(param){
    if(0 === param[0]){
     var pos = param[2], parent = param[1];
     return [1, get_address(parent), pos];
    }
    var path = param[2], env = param[1];
    return find_module_address(path, env);
   }
   function get_address(a){return force(force_address, a);}
   function find_value_address(path, env){
    return get_address(find_value_full(path, env)[2]);
   }
   function find_class_address(path, env){
    return get_address(find_class_full(path, env)[2]);
   }
   function find_constructor_address(path, env){
    switch(path[0]){
      case 0:
       var id = path[1], cda$0 = find_same$0(id, env[2]), match$0 = cda$0[2];
       if(! match$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
       var addr = match$0[1];
       return get_address(addr);
      case 1:
       var
        s = path[2],
        p = path[1],
        c = find_structure_components(p, env),
        param = caml_call2(a[4][69][28], s, c[2]);
       for(;;){
        if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
        var rest = param[2], cda = param[1], match = cda[2];
        if(match){var a$0 = match[1]; return get_address(a$0);}
        param = rest;
       }
       break;
      default: throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    }
   }
   function find_hash_type(path, env){
    switch(path[0]){
      case 0:
       var
        id = path[1],
        name$1 = id[1],
        name = Stdlib[28].call(null, cst$94, name$1),
        tda = find_name$0(wrap_identity, 0, name, env[4])[2];
       return tda[1];
      case 1:
       var
        s = path[2],
        p = path[1],
        c = find_structure_components(p, env),
        name$0 = Stdlib[28].call(null, cst$95, s),
        tda$0 = caml_call2(a[4][69][28], name$0, c[4]);
       return tda$0[1];
      default: throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    }
   }
   function shape_of_path(namespace, env){
    return of_path
            (function(ns, id){
              switch(ns){
                case 0:
                 var match = find_same$1(id, env[1]);
                 if(0 !== match[0])
                  throw caml_maybe_attach_backtrace(Stdlib[8], 1);
                 var x = match[1];
                 return x[3];
                case 1:
                 return find_same$1(id, env[4])[3];
                case 2:
                 try{var val = find_same$1(id, env[5]);}
                 catch(exn$0){
                  var exn = caml_wrap_exception(exn$0);
                  if(exn === Stdlib[8] && persistent(id) && ! is_ident(id)){var name$0 = id[1]; return for_persistent_unit(name$0);}
                  throw caml_maybe_attach_backtrace(exn, 0);
                 }
                 if(typeof val === "number"){
                  var name = id[1];
                  return for_persistent_unit(name);
                 }
                 if(0 !== val[0])
                  throw caml_maybe_attach_backtrace
                         ([0, Assert_failure, g4], 1);
                 var mda_shape = val[1][4];
                 return mda_shape;
                case 3:
                 return find_same$1(id, env[6])[2];
                case 4:
                 return find_same$0(id, env[2])[3];
                case 5:
                 return find_same$1(id, env[7])[3];
                default: return find_same$1(id, env[8])[2];
              }
             },
             namespace);
   }
   function shape_or_leaf(uid, param){
    if(! param) return leaf(uid);
    var shape = param[1];
    return shape;
   }
   var required_globals = s_ref(0);
   function reset_required_globals(param){required_globals[1] = 0; return 0;}
   function get_required_globals(param){return required_globals[1];}
   function add_required_global(id){
    var b = global(id);
    if(b)
     var
      c = 1 - transparent_modules[1],
      a =
        c
         ? 1
          -
           Stdlib_List[33].call
            (null, function(a){return same(id, a);}, required_globals[1])
         : c;
    else
     var a = b;
    var d = a ? (required_globals[1] = [0, id, required_globals[1]], 0) : a;
    return d;
   }
   function m(lax, env, path){
    switch(path[0]){
      case 0:
       var id = path[1];
       if(lax && persistent(id)) return path;
       return expand_module_path(lax, env, path);
      case 1:
       var s = path[2], p = path[1], p$0 = m(lax, env, p);
       return p === p$0
               ? expand_module_path(lax, env, path)
               : expand_module_path(lax, env, [1, p$0, s]);
      default:
       var
        p2 = path[2],
        p1 = path[1],
        p1$0 = m(lax, env, p1),
        p2$0 = m(1, env, p2);
       if(p1 === p1$0 && p2 === p2$0)
        return expand_module_path(lax, env, path);
       return expand_module_path(lax, env, [2, p1$0, p2$0]);
    }
   }
   function expand_module_path(lax, env, path){
    try{
     var match = find_module_lazy(1, path, env)[1];
     if(3 === match[0]){
      var path1 = match[1], path$1 = m(lax, env, path1);
      if(lax || transparent_modules[1])
       var path$0 = path$1;
      else
       var
        id$0 = head(path),
        b = global(id$0),
        c = b ? 1 - same(id$0, head(path$1)) : b,
        path$0 = c ? (add_required_global(id$0), path$1) : path$1;
     }
     else
      var path$0 = path;
     return path$0;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     a:
     if(exn === Stdlib[8]){
      if(! lax){
       if(0 === path[0])
        var id = path[1], a = 1 - persistent(id);
       else
        var a = 1;
       if(! a) break a;
      }
      return path;
     }
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function normalize_module_path(oloc, env, path){
    try{var a = m(0 === oloc ? 1 : 0, env, path); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     if(! oloc) throw caml_maybe_attach_backtrace([0, Assert_failure, g5], 1);
     var loc = oloc[1];
     return error$1([0, loc, path, m(1, env, path)]);
    }
   }
   function normalize_path_prefix(oloc, env, path){
    switch(path[0]){
      case 0:
       return path;
      case 1:
       var s = path[2], p = path[1], p2 = normalize_module_path(oloc, env, p);
       return p === p2 ? path : [1, p2, s];
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, g6], 1);
    }
   }
   function normalize_type_path(oloc, env, path){
    switch(path[0]){
      case 0:
       return path;
      case 1:
       var s = path[2], p = path[1];
       a:
       {
        if(is_uident(s) && ! is_uident(last$0(p))){
         var p2 = normalize_path_prefix(oloc, env, p);
         break a;
        }
        var p2 = normalize_module_path(oloc, env, p);
       }
       return p === p2 ? path : [1, p2, s];
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, g7], 1);
    }
   }
   function normalize_modtype_path(env, path$2){
    var path = path$2;
    for(;;){
     var path$0 = normalize_path_prefix(0, env, path);
     a:
     {
      try{var val = find_modtype_lazy(path$0, env)[1];}
      catch(b){
       var a = caml_wrap_exception(b);
       if(a === Stdlib[8]) break a;
       throw caml_maybe_attach_backtrace(a, 0);
      }
      if(val){
       var match = val[1];
       if(0 === match[0]){var path$1 = match[1]; path = path$1; continue;}
      }
     }
     return path$0;
    }
   }
   function find_module(path, env){
    switch(path[0]){
      case 0:
       var id = path[1], data = find_ident_module(id, env);
       return force_module_decl(data[1]);
      case 1:
       var
        s = path[2],
        p = path[1],
        sc = find_structure_components(p, env),
        data$0 = caml_call2(a[4][69][28], s, sc[5]);
       return force_module_decl(data$0[1]);
      default:
       var p2 = path[2], p1 = path[1], fc = find_functor_components(p1, env);
       return md(modtype_of_functor_appl(fc, p1, p2));
    }
   }
   function find_module_lazy$0(path, env){
    return find_module_lazy(0, path, env);
   }
   function find_type_expansion(path, env){
    var decl = find_type(path, env), match = decl[5];
    a:
    if(match){
     var body = match[1];
     if(1 !== decl[4] && 0 === decl[3] && ! has_constr_row(body)) break a;
     return [0, decl[1], body, decl[9]];
    }
    throw caml_maybe_attach_backtrace(Stdlib[8], 1);
   }
   function find_type_expansion_opt(path, env){
    var decl = find_type(path, env), match = decl[5];
    if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var body = match[1];
    return [0, decl[1], body, decl[9]];
   }
   function find_modtype_expansion_lazy(path, env){
    var match = find_modtype_lazy(path, env)[1];
    if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var mty = match[1];
    return mty;
   }
   function find_modtype_expansion(path, env){
    return force_modtype(find_modtype_expansion_lazy(path, env));
   }
   function is_functor_arg(path$1, env){
    var path = path$1;
    for(;;)
     switch(path[0]){
       case 0:
        var id = path[1];
        try{find_same(id, env[9]); var a = 1; return a;}
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn === Stdlib[8]) return 0;
         throw caml_maybe_attach_backtrace(exn, 0);
        }
       case 1:
        var path$0 = path[1]; path = path$0; break;
       default: return 1;
     }
   }
   function make_copy_of_types(env0){
    var memo = Stdlib_Hashtbl[1].call(null, 0, 16);
    function f(entry){
     if(0 !== entry[0]) return entry;
     var
      vda = entry[1],
      desc = vda[1],
      t = desc[1],
      e = desc[5],
      f = desc[4],
      g = desc[3],
      h = desc[2];
     try{var c = get_id(t), d = Stdlib_Hashtbl[6].call(null, memo, c), a = d;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var t2 = type_expr$0(identity, t), b = get_id(t);
      Stdlib_Hashtbl[5].call(null, memo, b, t2);
      var a = t2;
     }
     var desc$0 = [0, a, h, g, f, e];
     return [0, [0, desc$0, vda[2], vda[3]]];
    }
    var next = env0[1], values = [0, empty$0, [1, f, next]];
    return function(env){
     return [0,
             values,
             env[2],
             env[3],
             env[4],
             env[5],
             env[6],
             env[7],
             env[8],
             env[9],
             [10, env[10]],
             env[11],
             env[12]];};
   }
   var iter_env_cont = [0, 0];
   function scrape_alias_for_visit(env, mty){
    if(3 !== mty[0]) return 1;
    var path = mty[1];
    if(0 === path[0]){
     var id = path[1];
     if(persistent(id)){
      var name = id[1];
      if(! looked_up(persistent_env[1], name)) return 0;
     }
    }
    try{
     var a = scrape_alias_for_visit(env, find_module_lazy$0(path, env)[1]);
     return a;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function iter_env(wrap, proj1, proj2, f, env, param){
    iter$5
     (wrap,
      function(id, x){return caml_call2(f, [0, id], x);},
      caml_call1(proj1, env));
    function iter_components(path$0, path, mcomps){
     function cont(param){
      var match = get_arg(mcomps[3]);
      if(match)
       var cm_mty = match[1][5], visit = scrape_alias_for_visit(env, cm_mty);
      else
       var visit = 1;
      if(! visit) return 0;
      var match$0 = get_components(mcomps);
      if(0 !== match$0[0]) return 0;
      var comps = match$0[1], b = caml_call1(proj2, comps);
      caml_call2
       (a[4][69][12],
        function(s, d){
         return caml_call2(f, [1, path$0, s], [0, [1, path, s], d]);
        },
        b);
      return caml_call2
              (a[4][69][12],
               function(s, mda){
                return iter_components([1, path$0, s], [1, path, s], mda[2]);
               },
               comps[5]);
     }
     iter_env_cont[1] = [0, [0, path$0, cont], iter_env_cont[1]];
     return 0;
    }
    return iter$5
            (wrap_module,
             function(id, param){
              var entry = param[2], path = param[1];
              if(typeof entry === "number"){
               var
                modname = id[1],
                match = find_in_cache(persistent_env[1], modname);
               if(! match) return 0;
               var data = match[1];
               return iter_components([0, id], path, data[2]);
              }
              if(0 !== entry[0]) return 0;
              var data$0 = entry[1];
              return iter_components([0, id], path, data$0[2]);
             },
             env[5]);
   }
   function run_iter_cont(l){
    iter_env_cont[1] = 0;
    Stdlib_List[17].call(null, function(c){return caml_call1(c, 0);}, l);
    var cont = Stdlib_List[9].call(null, iter_env_cont[1]);
    iter_env_cont[1] = 0;
    return cont;
   }
   function iter_types(f){
    function a(p1, param){
     var tda = param[2], p2 = param[1];
     return caml_call2(f, p1, [0, p2, tda[1]]);
    }
    function b(sc){return sc[4];}
    function c(env){return env[4];}
    return function(d, e){return iter_env(wrap_identity, c, b, a, d, e);};
   }
   function same_types(env1, env2){
    var
     a = env1[4] === env2[4] ? 1 : 0,
     b = a ? env1[5] === env2[5] ? 1 : 0 : a;
    return b;
   }
   function used_persistent(param){
    return fold$2
            (persistent_env[1],
             function(s, m, r){return caml_call2(a[4][68][4], s, r);},
             a[4][68][1]);
   }
   function find_all_comps(wrap, proj, s, param){
    var mda = param[2], p = param[1], match = get_components(mda[2]);
    if(0 !== match[0]) return 0;
    var comps = match[1];
    try{
     var
      b = caml_call1(proj, comps),
      c = caml_call2(a[4][69][28], s, b),
      d = [0, [0, [1, p, s], caml_call1(wrap, c)], 0];
     return d;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function find_shadowed_comps(path, env){
    switch(path[0]){
      case 0:
       var
        id = path[1],
        name = id[1],
        a = find_all$2(wrap_module, name, env[5]);
       return Stdlib_List[22].call
                (null,
                 function(param){
                  var data = param[2], p = param[1];
                  if(typeof data !== "number" && 0 === data[0]){var x = data[1]; return [0, [0, p, x]];}
                  return 0;
                 })
               (a);
      case 1:
       var
        s = path[2],
        p = path[1],
        l = find_shadowed_comps(p, env),
        b = function(comps){return comps[5];},
        l$0 =
          Stdlib_List[19].call
           (null,
            function(a){return find_all_comps(wrap_identity, b, s, a);},
            l);
       return Stdlib_List[14].call(null, l$0);
      default: return 0;
    }
   }
   function find_shadowed_types(path, env){
    function proj2(comps){return comps[4];}
    switch(path[0]){
      case 0:
       var
        id = path[1],
        name = id[1],
        a = find_all$2(wrap_identity, name, env[4]);
       break;
      case 1:
       var
        s = path[2],
        p = path[1],
        l = find_shadowed_comps(p, env),
        l$0 =
          Stdlib_List[19].call
           (null,
            function(a){return find_all_comps(wrap_identity, proj2, s, a);},
            l),
        a = Stdlib_List[14].call(null, l$0);
       break;
      default: var a = 0;
    }
    return Stdlib_List[19].call(null, function(a){return a[1];}, a);
   }
   function t(env, path, mty){
    switch(mty[0]){
      case 0:
       var p = mty[1];
       try{
        var a = t(env, path, find_modtype_expansion_lazy(p, env));
        return a;
       }
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn === Stdlib[8]) return mty;
        throw caml_maybe_attach_backtrace(exn, 0);
       }
      case 3:
       var path$1 = mty[1];
       try{
        var b = t(env, [0, path$1], find_module_lazy$0(path$1, env)[1]);
        return b;
       }
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        if(exn$0 === Stdlib[8]) return mty;
        throw caml_maybe_attach_backtrace(exn$0, 0);
       }
      default:
       if(! path) return mty;
       var path$0 = path[1];
       return caml_call4(strengthen[1], 1, env, mty, path$0);
    }
   }
   function add_to_tbl(id, decl, tbl){
    try{var b = caml_call2(a[4][69][28], id, tbl), decls = b;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var decls = 0;
    }
    return caml_call3(a[4][69][4], id, [0, decl, decls], tbl);
   }
   function value_declaration_address(param, id, decl){
    var match = decl[2];
    if(typeof match !== "number" && 0 === match[0])
     return create_failed(Stdlib[8]);
    return create_forced([0, id]);
   }
   function extension_declaration_address(param, id, a){return create_forced([0, id]);
   }
   function class_declaration_address(param, id, a){return create_forced([0, id]);
   }
   function module_declaration_address(env, id, presence, md){
    if(! presence) return create_forced([0, id]);
    var match = md[1];
    if(3 !== match[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, g8], 1);
    var path = match[1];
    return create$3([1, env, path]);
   }
   function components_of_module_maker$0(param$0){
    var
     cm_shape = param$0[6],
     cm_mty = param$0[5],
     cm_addr = param$0[4],
     cm_path = param$0[3],
     cm_prefixing_subst = param$0[2],
     cm_env = param$0[1],
     match = t(cm_env, 0, cm_mty);
    switch(match[0]){
      case 0:
       return g9;
      case 1:
       var
        sg$0 = match[1],
        c =
          [0,
           a[4][69][1],
           a[4][69][1],
           a[4][69][1],
           a[4][69][1],
           a[4][69][1],
           a[4][69][1],
           a[4][69][1],
           a[4][69][1]],
        sg = force_signature_once(sg$0),
        items_and_paths = 0,
        prefixing_sub = cm_prefixing_subst,
        param = sg;
       for(;;){
        if(! param) break;
        var item = param[1];
        switch(item[0]){
          case 0:
           var
            rem = param[2],
            id = item[1],
            name$5 = id[1],
            p = [1, cm_path, name$5],
            items_and_paths$0 = [0, [0, item, p], items_and_paths];
           items_and_paths = items_and_paths$0;
           param = rem;
           break;
          case 1:
           var
            rem$0 = param[2],
            vis = item[4],
            rs = item[3],
            td = item[2],
            id$0 = item[1],
            name$4 = id$0[1],
            p$0 = [1, cm_path, name$4],
            prefixing_sub$0 = add_type$0(id$0, p$0, prefixing_sub),
            items_and_paths$1 =
              [0, [0, [1, id$0, td, rs, vis], p$0], items_and_paths];
           items_and_paths = items_and_paths$1;
           prefixing_sub = prefixing_sub$0;
           param = rem$0;
           break;
          case 2:
           var
            rem$1 = param[2],
            vis$0 = item[4],
            es = item[3],
            ec = item[2],
            id$1 = item[1],
            name$3 = id$1[1],
            p$1 = [1, cm_path, name$3],
            prefixing_sub$1 = add_type$0(id$1, p$1, prefixing_sub),
            items_and_paths$2 =
              [0, [0, [2, id$1, ec, es, vis$0], p$1], items_and_paths];
           items_and_paths = items_and_paths$2;
           prefixing_sub = prefixing_sub$1;
           param = rem$1;
           break;
          case 3:
           var
            rem$2 = param[2],
            vis$1 = item[5],
            rs$0 = item[4],
            md = item[3],
            pres = item[2],
            id$2 = item[1],
            name$2 = id$2[1],
            p$2 = [1, cm_path, name$2],
            prefixing_sub$2 = add_module$0(id$2, p$2, prefixing_sub),
            items_and_paths$3 =
              [0, [0, [3, id$2, pres, md, rs$0, vis$1], p$2], items_and_paths];
           items_and_paths = items_and_paths$3;
           prefixing_sub = prefixing_sub$2;
           param = rem$2;
           break;
          case 4:
           var
            rem$3 = param[2],
            vis$2 = item[3],
            mtd = item[2],
            id$3 = item[1],
            name$1 = id$3[1],
            p$3 = [1, cm_path, name$1],
            prefixing_sub$3 = add_modtype(id$3, [0, p$3], prefixing_sub),
            items_and_paths$4 =
              [0, [0, [4, id$3, mtd, vis$2], p$3], items_and_paths];
           items_and_paths = items_and_paths$4;
           prefixing_sub = prefixing_sub$3;
           param = rem$3;
           break;
          case 5:
           var
            rem$4 = param[2],
            vis$3 = item[4],
            rs$1 = item[3],
            cd = item[2],
            id$4 = item[1],
            name$0 = id$4[1],
            p$4 = [1, cm_path, name$0],
            prefixing_sub$4 = add_type$0(id$4, p$4, prefixing_sub),
            items_and_paths$5 =
              [0, [0, [5, id$4, cd, rs$1, vis$3], p$4], items_and_paths];
           items_and_paths = items_and_paths$5;
           prefixing_sub = prefixing_sub$4;
           param = rem$4;
           break;
          default:
           var
            rem$5 = param[2],
            vis$4 = item[4],
            rs$2 = item[3],
            ctd = item[2],
            id$5 = item[1],
            name = id$5[1],
            p$5 = [1, cm_path, name],
            prefixing_sub$5 = add_type$0(id$5, p$5, prefixing_sub),
            items_and_paths$6 =
              [0, [0, [6, id$5, ctd, rs$2, vis$4], p$5], items_and_paths];
           items_and_paths = items_and_paths$6;
           prefixing_sub = prefixing_sub$5;
           param = rem$5;
        }
       }
       var
        items_and_paths$7 = Stdlib_List[9].call(null, items_and_paths),
        env = [0, cm_env],
        pos = [0, 0],
        next_address =
          function(param){
           var addr = [0, cm_addr, pos[1]];
           pos[1]++;
           return create$3(addr);
          };
       Stdlib_List[17].call
        (null,
         function(param){
          var path = param[2], item = param[1];
          switch(item[0]){
            case 0:
             var
              decl = item[2],
              id = item[1],
              decl$0 = value_description$0(prefixing_sub, decl),
              match = decl[2];
             a:
             {
              if(typeof match !== "number" && 0 === match[0]){var addr = create_failed(Stdlib[8]); break a;}
              var addr = next_address(0);
             }
             var
              vda_shape = proj(0, cm_shape, caml_call1(d[2], id)),
              vda = [0, decl$0, addr, vda_shape],
              name$5 = id[1];
             c[1] = caml_call3(a[4][69][4], name$5, vda, c[1]);
             return 0;
            case 1:
             var
              decl$1 = item[2],
              id$0 = item[1],
              final_decl = type_declaration$0(prefixing_sub, decl$1);
             set_static_row_name
              (final_decl, type_path(prefixing_sub, [0, id$0]));
             var match$0 = decl$1[3];
             if(typeof match$0 === "number")
              var descrs = 0 === match$0 ? 0 : 1;
             else if(0 === match$0[0]){
              var
               repr = match$0[2],
               b = labels_of_type(path, final_decl),
               lbls = Stdlib_List[19].call(null, function(a){return a[2];}, b);
              Stdlib_List[17].call
               (null,
                function(descr){
                 c[3] = add_to_tbl(descr[1], descr, c[3]);
                 return 0;
                },
                lbls);
              var descrs = [0, lbls, repr];
             }
             else{
              var
               repr$0 = match$0[2],
               e = constructors_of_type(current_unit[1], path, final_decl),
               cstrs =
                 Stdlib_List[19].call(null, function(a){return a[2];}, e);
              Stdlib_List[17].call
               (null,
                function(descr){
                 var
                  cda_shape = leaf(descr[14]),
                  cda = [0, descr, 0, cda_shape];
                 c[2] = add_to_tbl(descr[1], cda, c[2]);
                 return 0;
                },
                cstrs);
              var descrs = [1, cstrs, repr$0];
             }
             var
              tda_shape = proj(0, cm_shape, caml_call1(d[3], id$0)),
              tda = [0, final_decl, descrs, tda_shape],
              name$4 = id$0[1];
             c[4] = caml_call3(a[4][69][4], name$4, tda, c[4]);
             var
              env$0 = env[1],
              tda$0 = [0, decl$1, 0, tda_shape],
              f = env$0[12],
              g = env$0[11],
              h = [1, env$0[10], id$0, decl$1],
              i = env$0[9],
              j = env$0[8],
              k = env$0[7],
              l = env$0[6],
              m = env$0[5],
              n = add$8(id$0, tda$0, env$0[4]);
             env[1] =
              [0, env$0[1], env$0[2], env$0[3], n, m, l, k, j, i, h, g, f];
             return 0;
            case 2:
             var
              ext = item[2],
              id$1 = item[1],
              ext$0 = extension_constructor$1(prefixing_sub, ext),
              descr = extension_descr(current_unit[1], path, ext$0),
              addr$0 = next_address(0),
              cda_shape = proj(0, cm_shape, caml_call1(d[6], id$1)),
              cda = [0, descr, [0, addr$0], cda_shape],
              name$3 = id$1[1];
             c[2] = add_to_tbl(name$3, cda, c[2]);
             return 0;
            case 3:
             var
              md = item[3],
              pres = item[2],
              id$2 = item[1],
              md$0 =
                subst_lazy_module_decl
                 ([0, scope$0(cm_path)], prefixing_sub, md);
             if(pres){
              var match$1 = md[1];
              if(3 !== match$1[0])
               throw caml_maybe_attach_backtrace([0, Assert_failure, g_], 1);
              var path$0 = match$1[1], addr$1 = create$3([1, env[1], path$0]);
             }
             else
              var addr$1 = next_address(0);
             var
              alerts = alerts_of_attrs(md[2]),
              shape = proj(0, cm_shape, caml_call1(d[4], id$2)),
              comps =
                components_of_module
                 (alerts,
                  md[4],
                  env[1],
                  prefixing_sub,
                  path,
                  addr$1,
                  md[1],
                  shape),
              mda = [0, md$0, comps, addr$1, shape],
              name$2 = id$2[1];
             c[5] = caml_call3(a[4][69][4], name$2, mda, c[5]);
             env[1] =
              store_module(g$, 0, id$2, addr$1, pres, md, shape, env[1]);
             return 0;
            case 4:
             var
              decl$2 = item[2],
              id$3 = item[1],
              final_decl$0 =
                subst_lazy_modtype_decl
                 ([0, scope$0(cm_path)], prefixing_sub, decl$2),
              shape$0 = proj(0, cm_shape, caml_call1(d[5], id$3)),
              mtda = [0, final_decl$0, shape$0],
              name$1 = id$3[1];
             c[6] = caml_call3(a[4][69][4], name$1, mtda, c[6]);
             env[1] = store_modtype(ha, id$3, decl$2, shape$0, env[1]);
             return 0;
            case 5:
             var
              decl$3 = item[2],
              id$4 = item[1],
              decl$4 = class_declaration$0(prefixing_sub, decl$3),
              addr$2 = next_address(0),
              shape$1 = proj(0, cm_shape, caml_call1(d[7], id$4)),
              clda = [0, decl$4, addr$2, shape$1],
              name$0 = id$4[1];
             c[7] = caml_call3(a[4][69][4], name$0, clda, c[7]);
             return 0;
            default:
             var
              decl$5 = item[2],
              id$5 = item[1],
              decl$6 = cltype_declaration$0(prefixing_sub, decl$5),
              shape$2 = proj(0, cm_shape, caml_call1(d[8], id$5)),
              cltda = [0, decl$6, shape$2],
              name = id$5[1];
             c[8] = caml_call3(a[4][69][4], name, cltda, c[8]);
             return 0;
          }
         },
         items_and_paths$7);
       return [0, [0, c]];
      case 2:
       var
        ty_res = match[2],
        arg = match[1],
        scoping = [0, scope$0(cm_path)],
        e = Stdlib_Hashtbl[1].call(null, 0, 17),
        f = Stdlib_Hashtbl[1].call(null, 0, 17),
        g =
          force_modtype
           (subst_lazy_modtype(scoping, cm_prefixing_subst, ty_res));
       if(arg)
        var
         ty_arg = arg[2],
         param$1 = arg[1],
         b =
           [0,
            param$1,
            force_modtype
             (subst_lazy_modtype(scoping, cm_prefixing_subst, ty_arg))];
       else
        var b = 0;
       return [0, [1, [0, b, g, cm_shape, f, e]]];
      default: var p$6 = match[1]; return [1, [0, p$6]];
    }
   }
   function check_usage(loc, id, uid, warn, tbl){
    var b = 1 - loc[3];
    if(b)
     var
      d = caml_call1(c[6], uid),
      a = d ? is_active(caml_call1(warn, cst$96)) : d;
    else
     var a = b;
    if(a){
     var name = id[1];
     if(caml_call2(c[15][11], tbl, uid)) return 0;
     var used = [0, 0];
     caml_call3(c[15][5], tbl, uid, function(param){used[1] = 1; return 0;});
     var e = name === cst$115 ? 1 : 0;
     if(e)
      var f = e;
     else
      var
       i = 95 === caml_string_get(name, 0) ? 1 : 0,
       f = i || (35 === caml_string_get(name, 0) ? 1 : 0);
     var g = 1 - f;
     if(g)
      return caml_call1
              (add_delayed_check_forward$0[1],
               function(param){
                var a = 1 - used[1];
                return a ? prerr_warning(loc, caml_call1(warn, name)) : a;
               });
     var h = g;
    }
    else
     var h = a;
    return h;
   }
   function check_value_name(name, loc){
    var b = 0 < caml_ml_string_length(name) ? 1 : 0;
    if(b){
     var c = caml_string_get(name, 0);
     a:
     {
      b:
      {
       if(96 <= c){
        if(215 <= c){
         if(247 === c || 216 > c) break b;
        }
        else
         if(123 <= c){if(192 > c) break b;} else if(97 > c) break b;
       }
       else
        if(58 <= c){
         if(91 <= c){if(95 > c) break b;} else if(65 > c) break b;
        }
        else if(39 !== c && 48 > c) break b;
       var d = 1;
       break a;
      }
      var d = 0;
     }
     var a = 1 - d;
    }
    else
     var a = b;
    if(a){
     var e = caml_ml_string_length(name) - 1 | 0, g = 1;
     if(e >= 1){
      var i = g;
      for(;;){
       if(35 === caml_string_get(name, i)) error$1([1, loc, name]);
       var h = i + 1 | 0;
       if(e === i) break;
       i = h;
      }
     }
     var f = 0;
    }
    else
     var f = a;
    return f;
   }
   function store_value(check, id, addr, decl, shape, env){
    var name = id[1];
    check_value_name(name, decl[3]);
    Stdlib_Option[9].call
     (null,
      function(f){
       return check_usage(decl[3], id, decl[5], f, value_declarations[1]);
      },
      check);
    var
     vda = [0, decl, addr, shape],
     a = env[12],
     b = env[11],
     c = [0, env[10], id, decl],
     d = env[9],
     e = env[8],
     f = env[7],
     g = env[6],
     h = env[5],
     i = env[4],
     j = env[3],
     k = env[2];
    return [0, add$8(id, [0, vda], env[1]), k, j, i, h, g, f, e, d, c, b, a];
   }
   function store_constructor(check, type_decl, type_id, cstr_id, cstr, env){
    if(check)
     var a = 1 - type_decl[10][3], b = a ? is_active(hb) : a;
    else
     var b = check;
    if(b){
     var
      ty_name = type_id[1],
      name = cstr[1],
      loc = cstr[11],
      k = cstr[14],
      priv = type_decl[4];
     if(1 - caml_call2(c[15][11], used_constructors[1], k)){
      var used = constructor_usages(0);
      caml_call3
       (c[15][5],
        used_constructors[1],
        k,
        function(a){return add_constructor_usage(used, a);});
      var
       d = ty_name === cst$115 ? 1 : 0,
       e = d || (95 === caml_string_get(ty_name, 0) ? 1 : 0);
      if(1 - e)
       caml_call1
        (add_delayed_check_forward$0[1],
         function(param){
          var a = constructor_usage_complaint(0, priv, used);
          return Stdlib_Option[9].call
                  (null,
                   function(complaint){
                    var a = 1 - is_in_signature(env);
                    return a ? prerr_warning(loc, [21, name, complaint]) : a;
                   },
                   a);
         });
     }
    }
    var
     cda_shape = leaf(cstr[14]),
     f = env[12],
     g = env[11],
     h = env[10],
     i = env[9],
     j = env[8],
     l = env[7],
     m = env[6],
     n = env[5],
     o = env[4],
     p = env[3],
     q = add$7(cstr_id, [0, cstr, 0, cda_shape], env[2]);
    return [0, env[1], q, p, o, n, m, l, j, i, h, g, f];
   }
   function store_label(check, type_decl, type_id, lbl_id, lbl, env){
    if(check)
     var a = 1 - type_decl[10][3], b = a ? is_active(hc) : a;
    else
     var b = check;
    if(b){
     var
      ty_name = type_id[1],
      priv = type_decl[4],
      name = lbl[1],
      loc = lbl[9],
      mut = lbl[4],
      k = lbl[11];
     if(1 - caml_call2(c[15][11], used_labels[1], k)){
      var used = [0, 0, 0, 0];
      caml_call3
       (c[15][5],
        used_labels[1],
        k,
        function(usage){
         switch(usage){
           case 1:
            used[2] = 1; return 0;
           case 2:
            used[3] = 1; return 0;
           case 4:
            used[1] = 1; used[2] = 1; used[3] = 1; return 0;
           default: used[1] = 1; return 0;
         }
        });
      var d = ty_name === cst$115 ? 1 : 0;
      if(d)
       var e = d;
      else
       var
        q = 95 === caml_string_get(ty_name, 0) ? 1 : 0,
        e = q || (95 === caml_string_get(name, 0) ? 1 : 0);
      if(1 - e)
       caml_call1
        (add_delayed_check_forward$0[1],
         function(param){
          if(priv)
           if(mut)
            var
             b = used[2],
             match = used[3],
             a = used[1] ? b ? 0 : gy : b ? M : match ? M : gz;
           else
            var match$0 = used[3], a = used[1] ? 0 : match$0 ? gA : gB;
          else
           var a = used[1] ? 0 : gC;
          return Stdlib_Option[9].call
                  (null,
                   function(complaint){
                    var a = 1 - is_in_signature(env);
                    return a ? prerr_warning(loc, [46, name, complaint]) : a;
                   },
                   a);
         });
     }
    }
    var
     f = env[12],
     g = env[11],
     h = env[10],
     i = env[9],
     j = env[8],
     l = env[7],
     m = env[6],
     n = env[5],
     o = env[4],
     p = add$7(lbl_id, lbl, env[3]);
    return [0, env[1], env[2], p, o, n, m, l, j, i, h, g, f];
   }
   function store_type(check, id, info, shape, env){
    var loc = info[10];
    if(check)
     check_usage
      (loc, id, info[14], function(s){return [18, s];}, type_declarations[1]);
    var path = [0, id], match = info[3];
    if(typeof match === "number")
     if(0 === match)
      var env$0 = env, descrs = 0;
     else
      var env$0 = env, descrs = 1;
    else if(0 === match[0])
     var
      repr = match[2],
      labels = labels_of_type(path, info),
      env$1 =
        Stdlib_List[25].call
         (null,
          function(env, param){
           var lbl = param[2], lbl_id = param[1];
           return store_label(check, info, id, lbl_id, lbl, env);
          },
          env,
          labels),
      env$0 = env$1,
      descrs =
        [0,
         Stdlib_List[19].call(null, function(a){return a[2];}, labels),
         repr];
    else
     var
      repr$0 = match[2],
      constructors = constructors_of_type(current_unit[1], path, info),
      env$2 =
        Stdlib_List[25].call
         (null,
          function(env, param){
           var cstr = param[2], cstr_id = param[1];
           return store_constructor(check, info, id, cstr_id, cstr, env);
          },
          env,
          constructors),
      descrs$0 =
        [1,
         Stdlib_List[19].call(null, function(a){return a[2];}, constructors),
         repr$0],
      env$0 = env$2,
      descrs = descrs$0;
    var
     tda = [0, info, descrs, shape],
     a = env$0[12],
     b = env$0[11],
     c = [1, env$0[10], id, info],
     d = env$0[9],
     e = env$0[8],
     f = env$0[7],
     g = env$0[6],
     h = env$0[5],
     i = add$8(id, tda, env$0[4]);
    return [0, env$0[1], env$0[2], env$0[3], i, h, g, f, e, d, c, b, a];
   }
   function store_extension(check, rebind, id, addr, ext, shape, env){
    var
     loc = ext[6],
     cstr = extension_descr(current_unit[1], [0, id], ext),
     cda = [0, cstr, [0, addr], shape];
    if(check)
     var a = 1 - loc[3], b = a ? is_active(hd) : a;
    else
     var b = check;
    if(b){
     var
      priv = ext[5],
      is_exception = same$0(ext[1], path_exn),
      name = cstr[1],
      k = cstr[14];
     if(1 - caml_call2(c[15][11], used_constructors[1], k)){
      var used = constructor_usages(0);
      caml_call3
       (c[15][5],
        used_constructors[1],
        k,
        function(a){return add_constructor_usage(used, a);});
      caml_call1
       (add_delayed_check_forward$0[1],
        function(param){
         var a = constructor_usage_complaint(rebind, priv, used);
         return Stdlib_Option[9].call
                 (null,
                  function(complaint){
                   var a = 1 - is_in_signature(env);
                   return a
                           ? prerr_warning(loc, [22, name, is_exception, complaint])
                           : a;
                  },
                  a);
        });
     }
    }
    var
     d = env[12],
     e = env[11],
     f = [2, env[10], id, ext],
     g = env[9],
     h = env[8],
     i = env[7],
     j = env[6],
     l = env[5],
     m = env[4],
     n = env[3],
     o = add$7(id, cda, env[2]);
    return [0, env[1], o, n, m, l, j, i, h, g, f, e, d];
   }
   function store_module(opt, check, id, addr, presence, md, shape, env){
    if(opt)
     var sth = opt[1], update_summary = sth;
    else
     var update_summary = 1;
    var loc = md[3];
    Stdlib_Option[9].call
     (null,
      function(f){
       return check_usage(loc, id, md[4], f, module_declarations[1]);
      },
      check);
    var
     alerts = alerts_of_attrs(md[2]),
     comps =
       components_of_module
        (alerts, md[4], env, identity, [0, id], addr, md[1], shape),
     mda = [0, md, comps, addr, shape];
    if(update_summary)
     var a = force_module_decl(md), summary = [3, env[10], id, presence, a];
    else
     var summary = env[10];
    var
     b = env[12],
     c = env[11],
     d = env[9],
     e = env[8],
     f = env[7],
     g = env[6],
     h = add$8(id, [0, mda], env[5]);
    return [0, env[1], env[2], env[3], env[4], h, g, f, e, d, summary, c, b];
   }
   function store_modtype(opt, id, info, shape, env){
    if(opt)
     var sth = opt[1], update_summary = sth;
    else
     var update_summary = 1;
    var mtda = [0, info, shape];
    if(update_summary)
     var a = force_modtype_decl(info), summary = [4, env[10], id, a];
    else
     var summary = env[10];
    var
     b = env[12],
     c = env[11],
     d = env[9],
     e = env[8],
     f = env[7],
     g = add$8(id, mtda, env[6]);
    return [0,
            env[1],
            env[2],
            env[3],
            env[4],
            env[5],
            g,
            f,
            e,
            d,
            summary,
            c,
            b];
   }
   function store_class(id, addr, desc, shape, env){
    var
     clda = [0, desc, addr, shape],
     a = env[12],
     b = env[11],
     c = [5, env[10], id, desc],
     d = env[9],
     e = env[8],
     f = add$8(id, clda, env[7]);
    return [0,
            env[1],
            env[2],
            env[3],
            env[4],
            env[5],
            env[6],
            f,
            e,
            d,
            c,
            b,
            a];
   }
   function store_cltype(id, desc, shape, env){
    var
     cltda = [0, desc, shape],
     a = env[12],
     b = env[11],
     c = [6, env[10], id, desc],
     d = env[9],
     e = add$8(id, cltda, env[8]);
    return [0,
            env[1],
            env[2],
            env[3],
            env[4],
            env[5],
            env[6],
            env[7],
            e,
            d,
            c,
            b,
            a];
   }
   function components_of_functor_appl$0(loc, f_path, f_comp, arg, env){
    try{var c$0 = Stdlib_Hashtbl[6].call(null, f_comp[4], arg); return c$0;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var p = [2, f_path, arg], b = f_comp[1];
     if(b)
      var
       match = b[1],
       sub = match ? add_module$0(match[1], arg, identity) : identity;
     else
      var sub = identity;
     var
      d = f_comp[2],
      mty = modtype$1([0, scope$0(p)], sub, d),
      addr = create_failed(Stdlib[8]),
      e = name$0(0, p),
      f = Stdlib[28].call(null, cst_the_signature_of, e);
     caml_call4(check_well_formed_module[1], env, loc, f, mty);
     var
      shape_arg = shape_of_path(2, env)(arg),
      shape = app(0, f_comp[3], shape_arg),
      g = lazy_modtype(mty),
      comps =
        components_of_module
         (a[4][69][1], c[5], env, identity, p, addr, g, shape);
     Stdlib_Hashtbl[5].call(null, f_comp[4], arg, comps);
     return comps;
    }
   }
   components_of_functor_appl[1] = components_of_functor_appl$0;
   components_of_module_maker[1] = components_of_module_maker$0;
   function add_functor_arg(id, env){
    var
     a = env[12],
     b = env[11],
     c = [8, env[10], id],
     d = add$0(id, 0, env[9]);
    return [0,
            env[1],
            env[2],
            env[3],
            env[4],
            env[5],
            env[6],
            env[7],
            env[8],
            d,
            c,
            b,
            a];
   }
   function add_value$0(check, shape, id, desc, env){
    var
     addr = value_declaration_address(env, id, desc),
     shape$0 = shape_or_leaf(desc[5], shape);
    return store_value(check, id, addr, desc, shape$0, env);
   }
   function add_type$1(check, shape, id, info, env){
    var shape$0 = shape_or_leaf(info[14], shape);
    return store_type(check, id, info, shape$0, env);
   }
   function add_extension(check, shape, rebind, id, ext, env){
    var
     addr = extension_declaration_address(env, id, ext),
     shape$0 = shape_or_leaf(ext[8], shape);
    return store_extension(check, rebind, id, addr, ext, shape$0, env);
   }
   function add_module_declaration(opt, shape, check, id, presence, md, env){
    if(opt) var sth = opt[1], arg = sth; else var arg = 0;
    a:
    if(check){
     if(arg && is_in_signature(env)){
      var check$0 = [0, function(s){return [45, s];}];
      break a;
     }
     var check$0 = [0, function(s){return [40, s];}];
    }
    else
     var check$0 = 0;
    var
     md$0 = lazy_module_decl(md),
     addr = module_declaration_address(env, id, presence, md$0),
     shape$0 = shape_or_leaf(md$0[4], shape),
     env$0 = store_module(0, check$0, id, addr, presence, md$0, shape$0, env);
    return arg ? add_functor_arg(id, env$0) : env$0;
   }
   function add_module_declaration_lazy(update_summary, id, presence, md, env){
    var
     addr = module_declaration_address(env, id, presence, md),
     shape = leaf(md[4]),
     env$0 =
       store_module
        ([0, update_summary], 0, id, addr, presence, md, shape, env);
    return env$0;
   }
   function add_modtype$0(shape, id, info, env){
    var shape$0 = shape_or_leaf(info[4], shape);
    return store_modtype(0, id, lazy_modtype_decl(info), shape$0, env);
   }
   function add_modtype_lazy(update_summary, id, info, env){
    var shape = leaf(info[4]);
    return store_modtype([0, update_summary], id, info, shape, env);
   }
   function add_class$0(shape, id, ty, env){
    var
     addr = class_declaration_address(env, id, ty),
     shape$0 = shape_or_leaf(ty[8], shape);
    return store_class(id, addr, ty, shape$0, env);
   }
   function add_cltype(shape, id, ty, env){
    var shape$0 = shape_or_leaf(ty[7], shape);
    return store_cltype(id, ty, shape$0, env);
   }
   function add_module$1(arg, shape, id, presence, mty, env){
    return add_module_declaration(arg, shape, 0, id, presence, md(mty), env);
   }
   function add_module_lazy(update_summary, id, presence, mty, env){
    var md = [0, mty, 0, none, c[5]];
    return add_module_declaration_lazy(update_summary, id, presence, md, env);
   }
   function add_local_type(path, info, env){
    var a = env[12], b = caml_call3(Map$3[4], path, info, env[11]);
    return [0,
            env[1],
            env[2],
            env[3],
            env[4],
            env[5],
            env[6],
            env[7],
            env[8],
            env[9],
            env[10],
            b,
            a];
   }
   function scrape_alias(env, mty){
    var mty$0 = lazy_modtype(mty);
    return force_modtype(t(env, 0, mty$0));
   }
   function enter_value(check, name, desc, env){
    var
     id = create_local(name),
     addr = value_declaration_address(env, id, desc),
     env$0 = store_value(check, id, addr, desc, leaf(desc[5]), env);
    return [0, id, env$0];
   }
   function enter_type(scope, name, info, env){
    var
     id = create_scoped(scope, name),
     env$0 = store_type(1, id, info, leaf(info[14]), env);
    return [0, id, env$0];
   }
   function enter_extension(scope, rebind, name, ext, env){
    var
     id = create_scoped(scope, name),
     addr = extension_declaration_address(env, id, ext),
     shape = leaf(ext[8]),
     env$0 = store_extension(1, rebind, id, addr, ext, shape, env);
    return [0, id, env$0];
   }
   function enter_module_declaration(scope, arg, shape, s, presence, md, env){
    var id = create_scoped(scope, s);
    return [0,
            id,
            add_module_declaration(arg, shape, 1, id, presence, md, env)];
   }
   function enter_modtype(scope, name, mtd, env){
    var
     id = create_scoped(scope, name),
     shape = leaf(mtd[4]),
     env$0 = store_modtype(0, id, lazy_modtype_decl(mtd), shape, env);
    return [0, id, env$0];
   }
   function enter_class(scope, name, desc, env){
    var
     id = create_scoped(scope, name),
     addr = class_declaration_address(env, id, desc),
     env$0 = store_class(id, addr, desc, leaf(desc[8]), env);
    return [0, id, env$0];
   }
   function enter_cltype(scope, name, desc, env){
    var
     id = create_scoped(scope, name),
     env$0 = store_cltype(id, desc, leaf(desc[7]), env);
    return [0, id, env$0];
   }
   function enter_module(scope, arg, s, presence, mty, env){
    return enter_module_declaration(scope, arg, 0, s, presence, md(mty), env);
   }
   function add_signature(param$0, sg$0, env$1){
    var param = param$0, sg = sg$0, env = env$1;
    for(;;){
     var mod_shape = param[2], map$6 = param[1];
     if(! sg) return [0, map$6, env];
     var rem = sg[2], comp = sg[1];
     let mod_shape$0 = mod_shape, map$8 = map$6;
     var
      proj_shape =
        function(item){
         if(! mod_shape$0) return [0, map$8, 0];
         var mod_shape = mod_shape$0[1], shape = proj(0, mod_shape, item);
         return [0, add$1(map$8, item, shape), [0, shape]];
        };
     switch(comp[0]){
       case 0:
        var
         decl = comp[2],
         id = comp[1],
         match = proj_shape(caml_call1(d[2], id)),
         shape = match[2],
         map = match[1],
         match$6 = [0, map, add_value$0(0, shape, id, decl, env)];
        break;
       case 1:
        var
         decl$0 = comp[2],
         id$0 = comp[1],
         match$0 = proj_shape(caml_call1(d[3], id$0)),
         shape$0 = match$0[2],
         map$0 = match$0[1],
         match$6 = [0, map$0, add_type$1(0, shape$0, id$0, decl$0, env)];
        break;
       case 2:
        var
         ext = comp[2],
         id$1 = comp[1],
         match$1 = proj_shape(caml_call1(d[6], id$1)),
         shape$1 = match$1[2],
         map$1 = match$1[1],
         match$6 = [0, map$1, add_extension(0, shape$1, 0, id$1, ext, env)];
        break;
       case 3:
        var
         md = comp[3],
         presence = comp[2],
         id$2 = comp[1],
         match$2 = proj_shape(caml_call1(d[4], id$2)),
         shape$2 = match$2[2],
         map$2 = match$2[1],
         match$6 =
           [0,
            map$2,
            add_module_declaration(0, shape$2, 0, id$2, presence, md, env)];
        break;
       case 4:
        var
         decl$1 = comp[2],
         id$3 = comp[1],
         match$3 = proj_shape(caml_call1(d[5], id$3)),
         shape$3 = match$3[2],
         map$3 = match$3[1],
         match$6 = [0, map$3, add_modtype$0(shape$3, id$3, decl$1, env)];
        break;
       case 5:
        var
         decl$2 = comp[2],
         id$4 = comp[1],
         match$4 = proj_shape(caml_call1(d[7], id$4)),
         shape$4 = match$4[2],
         map$4 = match$4[1],
         match$6 = [0, map$4, add_class$0(shape$4, id$4, decl$2, env)];
        break;
       default:
        var
         decl$3 = comp[2],
         id$5 = comp[1],
         match$5 = proj_shape(caml_call1(d[8], id$5)),
         shape$5 = match$5[2],
         map$5 = match$5[1],
         match$6 = [0, map$5, add_cltype(shape$5, id$5, decl$3, env)];
     }
     var env$0 = match$6[2], map$7 = match$6[1];
     param = [0, map$7, mod_shape];
     sg = rem;
     env = env$0;
    }
   }
   function P(scope, parent_shape, mod_shape, sg, env){
    var
     sg$0 = signature$1([0, scope], identity, sg),
     match = add_signature([0, parent_shape, mod_shape], sg$0, env),
     env$0 = match[2],
     shape = match[1];
    return [0, sg$0, shape, env$0];
   }
   function enter_signature(mod_shape, scope, sg, env){
    var
     match = P(scope, empty$1, mod_shape, sg, env),
     env$0 = match[3],
     sg$0 = match[1];
    return [0, sg$0, env$0];
   }
   function enter_signature_and_shape(scope, parent_shape, mod_shape, sg, env){return P(scope, parent_shape, [0, mod_shape], sg, env);
   }
   function add_value$1(b){
    var a = 0;
    return function(c, d, e){return add_value$0(b, a, c, d, e);};
   }
   function add_type$2(b){
    var a = 0;
    return function(c, d, e){return add_type$1(b, a, c, d, e);};
   }
   function add_extension$0(b){
    var a = 0;
    return function(c, d, e, f){return add_extension(b, a, c, d, e, f);};
   }
   var he = 0;
   function add_class$1(a, b, c){return add_class$0(he, a, b, c);}
   var hf = 0;
   function add_cltype$0(a, b, c){return add_cltype(hf, a, b, c);}
   var hg = 0;
   function add_modtype$1(a, b, c){return add_modtype$0(hg, a, b, c);}
   function add_signature$0(sg, env){
    var env$0 = add_signature([0, empty$1, 0], sg, env)[2];
    return env$0;
   }
   function enter_unbound_value(name, reason, env){
    var
     id = create_local(name),
     a = env[12],
     b = env[11],
     c = [12, env[10], name, reason],
     d = env[9],
     e = env[8],
     f = env[7],
     g = env[6],
     h = env[5],
     i = env[4],
     j = env[3],
     k = env[2];
    return [0,
            add$8(id, [1, reason], env[1]),
            k,
            j,
            i,
            h,
            g,
            f,
            e,
            d,
            c,
            b,
            a];
   }
   function enter_unbound_module(name, reason, env){
    var
     id = create_local(name),
     a = env[12],
     b = env[11],
     c = [13, env[10], name, reason],
     d = env[9],
     e = env[8],
     f = env[7],
     g = env[6],
     h = add$8(id, [1, reason], env[5]);
    return [0, env[1], env[2], env[3], env[4], h, g, f, e, d, c, b, a];
   }
   function A(slot, root, env0$7){
    try{var val = get_components_res(find_module_components(root, env0$7));}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return hh;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    if(0 !== val[0]) return hj;
    var match = val[1];
    if(0 !== match[0]) return hi;
    var comps$7 = match[1], env0 = env0$7[2], comps = comps$7[2];
    function w(x){return [0, -67648294, x];}
    var
     constrs = add_open(slot, w, root, comps, env0),
     env0$0 = env0$7[3],
     comps$0 = comps$7[3];
    function w$0(x){return [0, 48004564, x];}
    var
     labels = add_open(slot, w$0, root, comps$0, env0$0),
     env0$1 = env0$7[1],
     comps$1 = comps$7[1];
    function w$1(x){return [0, -991563951, x];}
    var
     values = add_open$0(slot, w$1, root, comps$1, env0$1),
     env0$2 = env0$7[4],
     comps$2 = comps$7[4];
    function w$2(x){return [0, 937565914, x];}
    var
     types = add_open$0(slot, w$2, root, comps$2, env0$2),
     env0$3 = env0$7[6],
     comps$3 = comps$7[6];
    function w$3(x){return [0, 448725581, x];}
    var
     modtypes = add_open$0(slot, w$3, root, comps$3, env0$3),
     env0$4 = env0$7[7],
     comps$4 = comps$7[7];
    function w$4(x){return [0, -611981288, x];}
    var
     classes = add_open$0(slot, w$4, root, comps$4, env0$4),
     env0$5 = env0$7[8],
     comps$5 = comps$7[8];
    function w$5(x){return [0, 649842561, x];}
    var
     cltypes = add_open$0(slot, w$5, root, comps$5, env0$5),
     env0$6 = env0$7[5],
     comps$6 = comps$7[5];
    function w$6(x){return [0, -177755956, x];}
    var modules = add_open$0(slot, w$6, root, comps$6, env0$6);
    return [0,
            [0,
             values,
             constrs,
             labels,
             types,
             modules,
             modtypes,
             classes,
             cltypes,
             env0$7[9],
             [7, env0$7[10], root],
             env0$7[11],
             env0$7[12]]];
   }
   function remove_last_open(root, env0){
    function filter_summary(summary){
     if(typeof summary === "number")
      throw caml_maybe_attach_backtrace(Stdlib[3], 1);
     if(7 !== summary[0]) return map_summary(filter_summary, summary);
     var p = summary[2], s = summary[1];
     if(same$0(p, root)) return s;
     throw caml_maybe_attach_backtrace(Stdlib[3], 1);
    }
    try{var summary = filter_summary(env0[10]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[3]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    function rem_l(tbl){
     var match = tbl[2];
     if(match){
      var match$0 = match[1], next = match$0[4], root$0 = match$0[2];
      if(same$0(root, root$0)){
       var a = next[2];
       return [0, fold_all(add$0, tbl[1], next[1]), a];
      }
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, gD], 1);
    }
    function rem(tbl){
     var match = tbl[2];
     if(typeof match !== "number" && 0 === match[0]){
      var next = match[4], root$0 = match[1];
      if(same$0(root, root$0)){
       var a = next[2];
       return [0, fold_all(add$0, tbl[1], next[1]), a];
      }
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, gE], 1);
    }
    var
     a = env0[12],
     b = env0[11],
     c = env0[9],
     d = rem(env0[8]),
     e = rem(env0[7]),
     f = rem(env0[6]),
     g = rem(env0[5]),
     h = rem(env0[4]),
     i = rem_l(env0[3]),
     j = rem_l(env0[2]);
    return [0, [0, rem(env0[1]), j, i, h, g, f, e, d, c, summary, b, a]];
   }
   function open_pers_signature(name, env){
    var res = A(0, [0, [2, name]], env);
    if(0 !== res[0] && 1048315315 <= res[1])
     throw caml_maybe_attach_backtrace([0, Assert_failure, hk], 1);
    return res;
   }
   function open_signature(opt, b, a, ovf, root, env){
    if(opt) var sth = opt[1], used_slot = sth; else var used_slot = [0, 0];
    if(b) var sth$0 = b[1], loc = sth$0; else var loc = none;
    if(a) var sth$1 = a[1], toplevel = sth$1; else var toplevel = 0;
    var
     unused = ovf ? [17, name$0(0, root)] : [44, name$0(0, root)],
     warn_unused = is_active(unused),
     warn_shadow_id = is_active(hl),
     warn_shadow_lc = is_active(hm);
    a:
    if(! toplevel && ! loc[3]){
     if(! warn_unused && ! warn_shadow_id && ! warn_shadow_lc) break a;
     if(warn_unused)
      caml_call1
       (add_delayed_check_forward$0[1],
        function(param){
         var a = 1 - used_slot[1];
         return a ? (used_slot[1] = 1, prerr_warning(loc, unused)) : a;
        });
     var
      shadowed = [0, 0],
      slot =
        function(s, b){
         var variant = b[1];
         a:
         {
          b:
          {
           if(48004564 <= variant){
            if(448725581 === variant){
             if(! b[2]) break b;
             var match$1 = gH;
             break a;
            }
            if(824627357 > variant){
             if(649842561 <= variant){
              if(! b[2]) break b;
              var match$1 = gK;
              break a;
             }
             var a = b[2];
             if(! a) break b;
             var match = a[1], l2 = match[2], l1 = match[1];
             if(caml_call3(same_constr[1], env, l1[2], l2[2])) break b;
             var match$1 = gL;
             break a;
            }
            if(937565914 <= variant){
             if(! b[2]) break b;
             var match$1 = gI;
             break a;
            }
           }
           else{
            if(-177755956 > variant){
             if(-611981288 <= variant){
              if(! b[2]) break b;
              var match$1 = gN;
              break a;
             }
             if(! b[2]) break b;
             var match$1 = gO;
             break a;
            }
            if(-67648294 <= variant){
             var c = b[2];
             if(! c) break b;
             var match$0 = c[1], cda2 = match$0[2], cda1 = match$0[1];
             if(caml_call3(same_constr[1], env, cda1[1][2], cda2[1][2]))
              break b;
             var match$1 = gM;
             break a;
            }
           }
           if(b[2]){var match$1 = gJ; break a;}
          }
          var match$1 = 0;
         }
         if(match$1){
          var kind = match$1[1];
          if
           (1 === ovf
            && ! Stdlib_List[36].call(null, [0, kind, s], shadowed[1])){
           shadowed[1] = [0, [0, kind, s], shadowed[1]];
           a:
           {
            if(kind !== cst_constructor$2 && kind !== cst_label$0){var w = [27, kind, s]; break a;}
            var w = [28, kind, s];
           }
           prerr_warning(loc, w);
          }
         }
         used_slot[1] = 1;
         return 0;
        };
     return A([0, slot], root, env);
    }
    return A(0, root, env);
   }
   function read_signature(modname, filename){
    var penv = persistent_env[1];
    add_import(penv, modname);
    var
     cmi = read_cmi(filename),
     pers_sig = [0, filename, cmi],
     mda = sign_of_cmi(N, pers_sig);
    acknowledge_pers_struct(penv, 1, modname, pers_sig, mda);
    var md = force_module_decl(mda[1]), match = md[1];
    if(1 !== match[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, hn], 1);
    var sg = match[1];
    return sg;
   }
   function is_identchar_latin1(param){
    a:
    {
     if(96 <= param){
      if(215 <= param){
       if(247 === param || 216 > param) break a;
      }
      else
       if(123 <= param){if(192 > param) break a;} else if(97 > param) break a;
     }
     else
      if(58 <= param){
       if(91 <= param){if(95 > param) break a;} else if(65 > param) break a;
      }
      else if(39 !== param && 48 > param) break a;
     return 1;
    }
    return 0;
   }
   function unit_name_of_filename(fn){
    if(Stdlib_Filename[10].call(null, fn) !== cst_cmi$1) return 0;
    var
     b = Stdlib_Filename[11].call(null, fn),
     unit = caml_call1(a[4][26], b);
    return caml_call2(a[4][72], is_identchar_latin1, unit) ? [0, unit] : 0;
   }
   function persistent_structures_of_dir(dir){
    var
     b = caml_call1(E[3], dir),
     c = Stdlib_List[61].call(null, b),
     d = Stdlib_Seq[30];
    return caml_call1
            (a[4][68][42],
             function(a){return d(unit_name_of_filename, c, a);});
   }
   function save_signature(alerts, sg, modname, filename){
    cleanup_abbrev(0);
    reset_for_saving(0);
    var
     sg$0 = signature$1(1, for_saving(identity), sg),
     cmi = make_cmi(persistent_env[1], modname, sg$0, alerts),
     pm = sign_of_cmi(O, [0, filename, cmi]);
    save_cmi(persistent_env[1], [0, filename, cmi], pm);
    return cmi;
   }
   function save_signature_with_imports
   (alerts, sg$0, modname, filename, imports){
    cleanup_abbrev(0);
    reset_for_saving(0);
    var
     sg = signature$1(1, for_saving(identity), sg$0),
     cmi = make_cmi(persistent_env[1], modname, sg, alerts),
     cmi$0 = [0, cmi[1], cmi[2], imports, cmi[4]],
     pm = sign_of_cmi(O, [0, filename, cmi$0]);
    save_cmi(persistent_env[1], [0, filename, cmi$0], pm);
    return cmi$0;
   }
   var
    ho = 0,
    iC = add_extension$0(0),
    match$0 =
      build_initial_env
       (add_type$2(0),
        function(d, e, f){var c = f, b = e, a = d; return iC(ho, a, b, c);},
        empty$7),
    initial_unsafe_string = match$0[2],
    initial_safe_string = match$0[1];
   function mark_module_used(uid){
    try{var mark = caml_call2(c[15][7], module_declarations[1], uid);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return caml_call1(mark, 0);
   }
   function mark_value_used(uid){
    try{var mark = caml_call2(c[15][7], value_declarations[1], uid);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return caml_call1(mark, 0);
   }
   function mark_type_used(uid){
    try{var mark = caml_call2(c[15][7], type_declarations[1], uid);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return caml_call1(mark, 0);
   }
   function mark_type_path_used(env, path){
    try{var decl = find_type(path, env);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return mark_type_used(decl[14]);
   }
   function mark_constructor_used(usage, cd){
    try{var mark = caml_call2(c[15][7], used_constructors[1], cd[6]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return caml_call1(mark, usage);
   }
   function mark_extension_used(usage, ext){
    try{var mark = caml_call2(c[15][7], used_constructors[1], ext[8]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return caml_call1(mark, usage);
   }
   function mark_label_used(usage, ld){
    try{var mark = caml_call2(c[15][7], used_labels[1], ld[6]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return caml_call1(mark, usage);
   }
   function set_value_used_callback(vd, callback){
    return caml_call3(c[15][5], value_declarations[1], vd[5], callback);
   }
   function set_type_used_callback(td, callback){
    var a = caml_call1(c[6], td[14]);
    if(! a) return a;
    try{var b = caml_call2(c[15][7], type_declarations[1], td[14]), old = b;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var old = function(a){return 0;};
    }
    return caml_call3
            (c[15][10],
             type_declarations[1],
             td[14],
             function(param){return caml_call1(callback, old);});
   }
   function may_lookup_error(report_errors, loc, env, err){
    if(report_errors) return lookup_error(loc, env, err);
    throw caml_maybe_attach_backtrace(Stdlib[8], 1);
   }
   function use_module(use, loc, path, mda){
    if(! use) return use;
    var comps = mda[2];
    mark_module_used(comps[2]);
    return caml_call2
            (a[4][69][12],
             function(kind, message){
              var
               message$0 =
                 message === cst$115
                  ? cst$97
                  : Stdlib[28].call(null, cst$98, message),
               a = name$0(0, path);
              return alert
                      (0,
                       0,
                       kind,
                       loc,
                       caml_call2(Stdlib_Printf[4].call(null, hq), a, message$0));
             },
             comps[1]);
   }
   function use_value(use, loc, path, vda){
    if(! use) return use;
    var desc = vda[1];
    mark_value_used(desc[5]);
    var a = name$0(0, path);
    return check_alerts(loc, desc[4], a);
   }
   function use_type(use, loc, path, tda){
    if(! use) return use;
    var decl = tda[1];
    mark_type_used(decl[14]);
    var a = name$0(0, path);
    return check_alerts(loc, decl[11], a);
   }
   function use_modtype(use, loc, path, desc){
    if(! use) return use;
    var a = name$0(0, path);
    return check_alerts(loc, desc[2], a);
   }
   function use_class(use, loc, path, clda){
    if(! use) return use;
    var desc = clda[1], uid = desc[8];
    a:
    {
     try{var mark = caml_call2(c[15][7], type_declarations[1], uid);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8]) break a;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     caml_call1(mark, 0);
    }
    var a = name$0(0, path);
    return check_alerts(loc, desc[7], a);
   }
   function use_cltype(use, loc, path, desc){
    if(! use) return use;
    var uid = desc[7];
    a:
    {
     try{var mark = caml_call2(c[15][7], type_declarations[1], uid);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8]) break a;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     caml_call1(mark, 0);
    }
    var a = name$0(0, path);
    return check_alerts(loc, desc[6], a);
   }
   function use_label(use, loc, usage, env, lbl){
    a:
    {
     if(use){
      var match = get_desc(lbl[2]);
      if(typeof match !== "number" && 3 === match[0]){
       var ty_path = match[1];
       mark_type_path_used(env, ty_path);
       b:
       {
        try{var mark = caml_call2(c[15][7], used_labels[1], lbl[11]);}
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn === Stdlib[8]) break b;
         throw caml_maybe_attach_backtrace(exn, 0);
        }
        caml_call1(mark, usage);
       }
       check_alerts(loc, lbl[10], lbl[1]);
       var a = 1 === usage ? 1 : 0;
       if(a) return check_deprecated_mutable(loc, lbl[10], lbl[1]);
       var b = a;
       break a;
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, hp], 1);
     }
     var b = use;
    }
    return b;
   }
   function use_constructor_desc(use, loc, usage, env, cstr){
    if(! use) return use;
    var ty_path = cstr_type_path(cstr);
    mark_type_path_used(env, ty_path);
    a:
    {
     try{var mark = caml_call2(c[15][7], used_constructors[1], cstr[14]);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8]) break a;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     caml_call1(mark, usage);
    }
    return check_alerts(loc, cstr[12], cstr[1]);
   }
   function use_constructor(use, loc, usage, env, cda){
    return use_constructor_desc(use, loc, usage, env, cda[1]);
   }
   function lookup_ident_module(load, errors, mark, loc, name, env){
    try{
     var tbl = env[5];
     a:
     try{var x = find_name$0(wrap_module, mark, name, tbl), res = x;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8] && ! is(name)){
       var path = [0, [2, name]], res = [0, path, 0];
       break a;
      }
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     var match = res;
    }
    catch(exn){
     var exn$0 = caml_wrap_exception(exn);
     if(exn$0 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$0, 0);
     var match = may_lookup_error(errors, loc, env, [4, [0, name]]);
    }
    var data = match[2], path$0 = match[1];
    if(typeof data !== "number"){
     if(0 !== data[0]) return may_lookup_error(errors, loc, env, 0);
     var mda$0 = data[1];
     use_module(mark, loc, path$0, mda$0);
     return load ? [0, path$0, 0] : [0, path$0, mda$0];
    }
    if(load){
     check$0(persistent_env[1], read_sign_of_cmi, loc, name);
     return [0, path$0, 0];
    }
    try{var mda = find_pers_mod(name);}
    catch(exn){
     var exn$1 = caml_wrap_exception(exn);
     if(exn$1 === Stdlib[8])
      return may_lookup_error(errors, loc, env, [4, [0, name]]);
     throw caml_maybe_attach_backtrace(exn$1, 0);
    }
    use_module(mark, loc, path$0, mda);
    return [0, path$0, mda];
   }
   function lookup_all_ident_constructors(errors, use, loc, usage, s, env){
    var cstrs = find_all$1(use, s, env[2]);
    return cstrs
            ? Stdlib_List
               [19].call
              (null,
               function(param){
                var use_fn = param[2], cda = param[1];
                function use_fn$0(param){
                 use_constructor(use, loc, usage, env, cda);
                 return caml_call1(use_fn, 0);
                }
                return [0, cda[1], use_fn$0];
               },
               cstrs)
            : may_lookup_error(errors, loc, env, [2, [0, s]]);
   }
   function lookup_module_components(errors, use, loc, lid, env){
    switch(lid[0]){
      case 0:
       var
        s = lid[1],
        match = lookup_ident_module(0, errors, use, loc, s, env),
        data = match[2],
        path = match[1];
       return [0, path, data[2]];
      case 1:
       var
        s$0 = lid[2],
        l = lid[1],
        match$0 = lookup_dot_module(errors, use, loc, l, s$0, env),
        data$0 = match$0[2],
        path$0 = match$0[1];
       return [0, path$0, data$0[2]];
      default:
       var
        match$1 = lookup_apply(errors, use, loc, lid, env),
        arg = match$1[3],
        f_comp = match$1[2],
        f_path = match$1[1],
        comps =
          caml_call5
           (components_of_functor_appl[1], loc, f_path, f_comp, arg, env);
       return [0, [2, f_path, arg], comps];
    }
   }
   function lookup_structure_components(errors, use, loc, lid, env){
    var
     match = lookup_module_components(errors, use, loc, lid, env),
     comps = match[2],
     path = match[1],
     a = get_components_res(comps);
    if(0 === a[0]){
     var match$0 = a[1];
     if(0 !== match$0[0])
      return may_lookup_error(errors, loc, env, [15, lid]);
     var comps$0 = match$0[1];
     return [0, path, comps$0];
    }
    var match$1 = a[1];
    if(! match$1) return may_lookup_error(errors, loc, env, [16, lid]);
    var p = match$1[1];
    return may_lookup_error(errors, loc, env, [18, lid, p]);
   }
   function lookup_apply(errors, use, loc, lid_whole_app, env){
    var args0 = 0, f0_lid = lid_whole_app;
    for(;;){
     if(2 !== f0_lid[0]) break;
     var
      arg_lid = f0_lid[2],
      f_lid = f0_lid[1],
      match = B(errors, use, loc, arg_lid, env),
      arg_md = match[2],
      arg_path = match[1],
      args = [0, [0, f_lid, arg_path, arg_md[1]], args0];
     args0 = args;
     f0_lid = f_lid;
    }
    var
     args_for_errors =
       Stdlib_List[19].call
        (null,
         function(param){
          var mty = param[3], p = param[2];
          return [0, p, mty];
         },
         args0),
     match$0 = lookup_module_components(errors, use, loc, f0_lid, env),
     f0_comp = match$0[2],
     f0_path = match$0[1];
    function check_one_apply
    (errors, loc, f_lid, f_comp, arg_path, arg_mty, env){
     var a = get_components_res(f_comp);
     if(0 === a[0]){
      var match = a[1];
      if(0 === match[0])
       var match$2 = may_lookup_error(errors, loc, env, [13, f_lid]);
      else{
       var fcomps = match[1], match$0 = fcomps[1];
       if(match$0)
        var arg = match$0[2], match$2 = [0, fcomps, arg];
       else
        var match$2 = may_lookup_error(errors, loc, env, [17, f_lid]);
      }
     }
     else{
      var match$1 = a[1];
      if(match$1)
       var
        p = match$1[1],
        match$2 = may_lookup_error(errors, loc, env, [18, f_lid, p]);
      else
       var match$2 = may_lookup_error(errors, loc, env, [14, f_lid]);
     }
     var param_mty = match$2[2], f_comp$0 = match$2[1];
     if(1 - Stdlib_Hashtbl[9].call(null, f_comp$0[4], arg_path))
      caml_call9
       (check_functor_application[1],
        errors,
        loc,
        lid_whole_app,
        f0_path,
        args_for_errors,
        arg_path,
        arg_mty,
        param_mty,
        env);
     return [0, arg_path, f_comp$0];
    }
    var f_path = f0_path, f_comp = f0_comp, param = args0;
    for(;;){
     if(! param) return Stdlib[1].call(null, cst_Env_lookup_apply_empty_arg);
     var a = param[1], f_lid$0 = a[1];
     if(! param[2]){
      var
       arg_mty$0 = a[3],
       arg_path$2 = a[2],
       match$2 =
         check_one_apply
          (errors, loc, f_lid$0, f_comp, arg_path$2, arg_mty$0, env),
       comps = match$2[2],
       arg_path$3 = match$2[1];
      return [0, f_path, comps, arg_path$3];
     }
     var
      args$0 = param[2],
      arg_mty = a[3],
      arg_path$0 = a[2],
      match$1 =
        check_one_apply
         (errors, loc, f_lid$0, f_comp, arg_path$0, arg_mty, env),
      f_comp$0 = match$1[2],
      arg_path$1 = match$1[1],
      f_comp$1 =
        caml_call5
         (components_of_functor_appl[1],
          loc,
          f_path,
          f_comp$0,
          arg_path$1,
          env),
      f_path$0 = [2, f_path, arg_path$1];
     f_path = f_path$0;
     f_comp = f_comp$1;
     param = args$0;
    }
   }
   function B(errors, use, loc, lid, env){
    switch(lid[0]){
      case 0:
       var
        s = lid[1],
        match = lookup_ident_module(0, errors, use, loc, s, env),
        data = match[2],
        path = match[1],
        md$0 = force_module_decl(data[1]);
       return [0, path, md$0];
      case 1:
       var
        s$0 = lid[2],
        l = lid[1],
        match$0 = lookup_dot_module(errors, use, loc, l, s$0, env),
        data$0 = match$0[2],
        path$0 = match$0[1],
        md$1 = force_module_decl(data$0[1]);
       return [0, path$0, md$1];
      default:
       var
        match$1 = lookup_apply(errors, use, loc, lid, env),
        path_arg = match$1[3],
        comp_f = match$1[2],
        path_f = match$1[1],
        md$2 = md(modtype_of_functor_appl(comp_f, path_f, path_arg));
       return [0, [2, path_f, path_arg], md$2];
    }
   }
   function lookup_dot_module(errors, use, loc, l, s, env){
    var
     match = lookup_structure_components(errors, use, loc, l, env),
     comps = match[2],
     p = match[1];
    try{var mda = caml_call2(a[4][69][28], s, comps[5]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      return may_lookup_error(errors, loc, env, [4, [1, l, s]]);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    var path = [1, p, s];
    use_module(use, loc, path, mda);
    return [0, path, mda];
   }
   function Q(errors, use, loc, lid$0, env){
    switch(lid$0[0]){
      case 0:
       var name = lid$0[1];
       try{var val = find_name$0(wrap_value, use, name, env[1]);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn === Stdlib[8])
         return may_lookup_error(errors, loc, env, [0, [0, name], 0]);
        throw caml_maybe_attach_backtrace(exn, 0);
       }
       var match = val[2], path = val[1];
       if(0 === match[0]){
        var vda = match[1];
        use_value(use, loc, path, vda);
        return [0, path, vda[1]];
       }
       var reason = match[1], lid = [0, name];
       if(typeof reason === "number")
        switch(reason){
          case 0:
           return may_lookup_error(errors, loc, env, [10, lid]);
          case 1:
           return may_lookup_error(errors, loc, env, [11, lid]);
          default: return may_lookup_error(errors, loc, env, [12, lid]);
        }
       var
        rloc = reason[1],
        b = 1 - loc[3],
        show_hint = b ? 1 - rloc[3] : b,
        hint = show_hint ? [0, rloc] : 0;
       return may_lookup_error(errors, loc, env, [0, lid, hint]);
      case 1:
       var
        s = lid$0[2],
        l = lid$0[1],
        match$0 = lookup_structure_components(errors, use, loc, l, env),
        comps = match$0[2],
        path$0 = match$0[1];
       try{var vda$0 = caml_call2(a[4][69][28], s, comps[1]);}
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        if(exn$0 === Stdlib[8])
         return may_lookup_error(errors, loc, env, [0, [1, l, s], 0]);
        throw caml_maybe_attach_backtrace(exn$0, 0);
       }
       var path$1 = [1, path$0, s];
       use_value(use, loc, path$1, vda$0);
       return [0, path$1, vda$0[1]];
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, hr], 1);
    }
   }
   function R(errors, use, loc, lid, env){
    switch(lid[0]){
      case 0:
       var s = lid[1];
       try{var res = find_name$0(wrap_identity, use, s, env[4]);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
        var match$0 = may_lookup_error(errors, loc, env, [1, [0, s]]);
        break;
       }
       var data = res[2], path = res[1];
       use_type(use, loc, path, data);
       var match$0 = res;
       break;
      case 1:
       var
        s$0 = lid[2],
        l = lid[1],
        match = lookup_structure_components(errors, use, loc, l, env),
        comps = match[2],
        p = match[1];
       try{var tda = caml_call2(a[4][69][28], s$0, comps[4]);}
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        if(exn$0 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$0, 0);
        var match$0 = may_lookup_error(errors, loc, env, [1, [1, l, s$0]]);
        break;
       }
       var path$0 = [1, p, s$0];
       use_type(use, loc, path$0, tda);
       var match$0 = [0, path$0, tda];
       break;
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, hs], 1);
    }
    var tda$0 = match$0[2], path$1 = match$0[1];
    return [0, path$1, tda$0[1]];
   }
   function lookup_modtype_lazy(errors, use, loc, lid, env){
    switch(lid[0]){
      case 0:
       var s = lid[1];
       try{var val = find_name$0(wrap_identity, use, s, env[6]);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn === Stdlib[8])
         return may_lookup_error(errors, loc, env, [6, [0, s]]);
        throw caml_maybe_attach_backtrace(exn, 0);
       }
       var data = val[2], path = val[1];
       use_modtype(use, loc, path, data[1]);
       return [0, path, data[1]];
      case 1:
       var
        s$0 = lid[2],
        l = lid[1],
        match = lookup_structure_components(errors, use, loc, l, env),
        comps = match[2],
        p = match[1];
       try{var mta = caml_call2(a[4][69][28], s$0, comps[6]);}
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        if(exn$0 === Stdlib[8])
         return may_lookup_error(errors, loc, env, [6, [1, l, s$0]]);
        throw caml_maybe_attach_backtrace(exn$0, 0);
       }
       var path$0 = [1, p, s$0];
       use_modtype(use, loc, path$0, mta[1]);
       return [0, path$0, mta[1]];
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, ht], 1);
    }
   }
   function S(errors, use, loc, lid, env){
    var
     match = lookup_modtype_lazy(errors, use, loc, lid, env),
     mt = match[2],
     path = match[1];
    return [0, path, force_modtype_decl(mt)];
   }
   function U(errors, use, loc, lid, env){
    switch(lid[0]){
      case 0:
       var s = lid[1];
       try{var val = find_name$0(wrap_identity, use, s, env[7]);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn === Stdlib[8])
         return may_lookup_error(errors, loc, env, [5, [0, s]]);
        throw caml_maybe_attach_backtrace(exn, 0);
       }
       var clda = val[2], path = val[1];
       use_class(use, loc, path, clda);
       return [0, path, clda[1]];
      case 1:
       var
        s$0 = lid[2],
        l = lid[1],
        match = lookup_structure_components(errors, use, loc, l, env),
        comps = match[2],
        p = match[1];
       try{var clda$0 = caml_call2(a[4][69][28], s$0, comps[7]);}
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        if(exn$0 === Stdlib[8])
         return may_lookup_error(errors, loc, env, [5, [1, l, s$0]]);
        throw caml_maybe_attach_backtrace(exn$0, 0);
       }
       var path$0 = [1, p, s$0];
       use_class(use, loc, path$0, clda$0);
       return [0, path$0, clda$0[1]];
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, hu], 1);
    }
   }
   function V(errors, use, loc, lid, env){
    switch(lid[0]){
      case 0:
       var s = lid[1];
       try{var val = find_name$0(wrap_identity, use, s, env[8]);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn === Stdlib[8])
         return may_lookup_error(errors, loc, env, [7, [0, s]]);
        throw caml_maybe_attach_backtrace(exn, 0);
       }
       var cltda = val[2], path = val[1];
       use_cltype(use, loc, path, cltda[1]);
       return [0, path, cltda[1]];
      case 1:
       var
        s$0 = lid[2],
        l = lid[1],
        match = lookup_structure_components(errors, use, loc, l, env),
        comps = match[2],
        p = match[1];
       try{var cltda$0 = caml_call2(a[4][69][28], s$0, comps[8]);}
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        if(exn$0 === Stdlib[8])
         return may_lookup_error(errors, loc, env, [7, [1, l, s$0]]);
        throw caml_maybe_attach_backtrace(exn$0, 0);
       }
       var path$0 = [1, p, s$0];
       use_cltype(use, loc, path$0, cltda$0[1]);
       return [0, path$0, cltda$0[1]];
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, hv], 1);
    }
   }
   function W(errors, use, loc, usage, lid, env){
    switch(lid[0]){
      case 0:
       var s = lid[1], lbls = find_all$1(use, s, env[3]);
       return lbls
               ? Stdlib_List
                  [19].call
                 (null,
                  function(param){
                   var use_fn = param[2], lbl = param[1];
                   function use_fn$0(param){
                    use_label(use, loc, usage, env, lbl);
                    return caml_call1(use_fn, 0);
                   }
                   return [0, lbl, use_fn$0];
                  },
                  lbls)
               : may_lookup_error(errors, loc, env, [3, [0, s]]);
      case 1:
       var
        s$0 = lid[2],
        l = lid[1],
        comps = lookup_structure_components(errors, use, loc, l, env)[2];
       a:
       {
        try{var lbls$0 = caml_call2(a[4][69][28], s$0, comps[3]);}
        catch(a){
         var b = caml_wrap_exception(a);
         if(b === Stdlib[8]) break a;
         throw caml_maybe_attach_backtrace(b, 0);
        }
        if(lbls$0)
         return Stdlib_List[19].call
                 (null,
                  function(lbl){
                   function use_fun(param){
                    return use_label(use, loc, usage, env, lbl);
                   }
                   return [0, lbl, use_fun];
                  },
                  lbls$0);
       }
       return may_lookup_error(errors, loc, env, [3, [1, l, s$0]]);
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, hw], 1);
    }
   }
   function X(errors, use, loc, usage, lid, env){
    var match = W(errors, use, loc, usage, lid, env);
    if(! match) throw caml_maybe_attach_backtrace([0, Assert_failure, hx], 1);
    var match$0 = match[1], use$0 = match$0[2], desc = match$0[1];
    caml_call1(use$0, 0);
    return desc;
   }
   function Y(errors, use, loc, usage, lid, env){
    switch(lid[0]){
      case 0:
       var s = lid[1];
       return lookup_all_ident_constructors(errors, use, loc, usage, s, env);
      case 1:
       var s$0 = lid[2], l = lid[1];
       if(0 === l[0] && l[1] === cst_predef)
        return lookup_all_ident_constructors
                (errors, use, loc, usage, s$0, initial_safe_string);
       var comps = lookup_structure_components(errors, use, loc, l, env)[2];
       a:
       {
        try{var cstrs = caml_call2(a[4][69][28], s$0, comps[2]);}
        catch(a){
         var b = caml_wrap_exception(a);
         if(b === Stdlib[8]) break a;
         throw caml_maybe_attach_backtrace(b, 0);
        }
        if(cstrs)
         return Stdlib_List[19].call
                 (null,
                  function(cda){
                   function use_fun(param){
                    return use_constructor(use, loc, usage, env, cda);
                   }
                   return [0, cda[1], use_fun];
                  },
                  cstrs);
       }
       return may_lookup_error(errors, loc, env, [2, [1, l, s$0]]);
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, hy], 1);
    }
   }
   function Z(errors, use, loc, usage, lid, env){
    var match = Y(errors, use, loc, usage, lid, env);
    if(! match) throw caml_maybe_attach_backtrace([0, Assert_failure, hz], 1);
    var match$0 = match[1], use$0 = match$0[2], desc = match$0[1];
    caml_call1(use$0, 0);
    return desc;
   }
   function find_module_by_name(lid, env){
    var loc = in_file(input_name[1]);
    return B(0, 0, loc, lid, env);
   }
   function find_value_by_name(lid, env){
    var loc = in_file(input_name[1]);
    return Q(0, 0, loc, lid, env);
   }
   function find_type_by_name(lid, env){
    var loc = in_file(input_name[1]);
    return R(0, 0, loc, lid, env);
   }
   function find_modtype_by_name(lid, env){
    var loc = in_file(input_name[1]);
    return S(0, 0, loc, lid, env);
   }
   function find_class_by_name(lid, env){
    var loc = in_file(input_name[1]);
    return U(0, 0, loc, lid, env);
   }
   function find_cltype_by_name(lid, env){
    var loc = in_file(input_name[1]);
    return V(0, 0, loc, lid, env);
   }
   function find_constructor_by_name(lid, env){
    var loc = in_file(input_name[1]);
    return Z(0, 0, loc, 0, lid, env);
   }
   function find_label_by_name(lid, env){
    var loc = in_file(input_name[1]);
    return X(0, 0, loc, 0, lid, env);
   }
   function lookup_module_path(opt, loc, load, lid, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    var errors = 1;
    switch(lid[0]){
      case 0:
       var s = lid[1];
       if(transparent_modules[1] && ! load)
        return lookup_ident_module(1, errors, use, loc, s, env)[1];
       return lookup_ident_module(0, errors, use, loc, s, env)[1];
      case 1:
       var s$0 = lid[2], l = lid[1];
       return lookup_dot_module(errors, use, loc, l, s$0, env)[1];
      default:
       var
        match = lookup_apply(errors, use, loc, lid, env),
        path_arg = match[3],
        path_f = match[1];
       return [2, path_f, path_arg];
    }
   }
   function lookup_module(opt, loc, lid, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return B(1, use, loc, lid, env);
   }
   function lookup_value(opt, loc, lid, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    check_value_name(last(lid), loc);
    return Q(1, use, loc, lid, env);
   }
   function lookup_type(opt, loc, lid, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return R(1, use, loc, lid, env);
   }
   function lookup_modtype(opt, loc, lid, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return S(1, use, loc, lid, env);
   }
   function lookup_modtype_path(opt, loc, lid, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return lookup_modtype_lazy(1, use, loc, lid, env)[1];
   }
   function lookup_class(opt, loc, lid, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return U(1, use, loc, lid, env);
   }
   function lookup_cltype(opt, loc, lid, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    return V(1, use, loc, lid, env);
   }
   function lookup_all_constructors(opt, loc, usage, lid, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    try{var cstrs = Y(1, use, loc, usage, lid, env);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Error$6){
      var match = exn[2];
      if(2 === match[0]){
       var err = match[3], env$0 = match[2], loc$0 = match[1];
       return [1, [0, loc$0, env$0, err]];
      }
     }
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, cstrs];
   }
   function lookup_constructor(opt, loc, lid, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    var a = 1;
    return function(b){return Z(a, use, loc, lid, env, b);};
   }
   function lookup_all_constructors_from_t(opt, loc, usage, ty_path, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    try{var val = find_type_descrs(ty_path, env);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    if(typeof val !== "number" && 0 !== val[0]){
     var cstrs = val[1];
     return Stdlib_List[19].call
             (null,
              function(cstr){
               function use_fun(param){
                return use_constructor_desc(use, loc, usage, env, cstr);
               }
               return [0, cstr, use_fun];
              },
              cstrs);
    }
    return 0;
   }
   function lookup_all_labels(opt, loc, usage, lid, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    try{var lbls = W(1, use, loc, usage, lid, env);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Error$6){
      var match = exn[2];
      if(2 === match[0]){
       var err = match[3], env$0 = match[2], loc$0 = match[1];
       return [1, [0, loc$0, env$0, err]];
      }
     }
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, lbls];
   }
   function lookup_label(opt, loc, lid, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    var a = 1;
    return function(b){return X(a, use, loc, lid, env, b);};
   }
   function lookup_all_labels_from_type(opt, loc, usage, ty_path, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    try{var val = find_type_descrs(ty_path, env);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    if(typeof val !== "number" && 0 === val[0]){
     var lbls = val[1];
     return Stdlib_List[19].call
             (null,
              function(lbl){
               function use_fun(param){
                return use_label(use, loc, usage, env, lbl);
               }
               return [0, lbl, use_fun];
              },
              lbls);
    }
    return 0;
   }
   function lookup_instance_variable(opt, loc, name, env){
    if(opt) var sth = opt[1], use = sth; else var use = 1;
    try{var val = find_name$0(wrap_value, use, name, env[1]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return lookup_error(loc, env, [8, name]);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    var match = val[2], path = val[1];
    if(0 !== match[0]){
     var match$1 = match[1];
     return typeof match$1 === "number"
             ? 0
               === match$1
               ? lookup_error(loc, env, [10, [0, name]])
               : lookup_error(loc, env, [9, name])
             : lookup_error(loc, env, [8, name]);
    }
    var vda = match[1], desc = vda[1], match$0 = desc[2];
    if(typeof match$0 !== "number" && 1 === match$0[0]){
     var cl_num = match$0[2], mut = match$0[1];
     use_value(use, loc, path, vda);
     return [0, path, mut, cl_num, desc[1]];
    }
    return lookup_error(loc, env, [9, name]);
   }
   function bound_module(name, env){
    try{find_name$0(wrap_module, 0, name, env[5]);}
    catch(exn$1){
     var exn = caml_wrap_exception(exn$1);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     if(is(name)) return 0;
     try{find_pers_mod(name);}
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      if(exn$0 === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(exn$0, 0);
     }
     return 1;
    }
    return 1;
   }
   function bound_value(name, env){
    try{find_name$0(wrap_value, 0, name, env[1]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return 1;
   }
   function bound_type(name, env){
    try{find_name$0(wrap_identity, 0, name, env[4]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return 1;
   }
   function bound_modtype(name, env){
    try{find_name$0(wrap_identity, 0, name, env[6]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return 1;
   }
   function bound_class(name, env){
    try{find_name$0(wrap_identity, 0, name, env[7]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return 1;
   }
   function bound_cltype(name, env){
    try{find_name$0(wrap_identity, 0, name, env[8]);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return 1;
   }
   function find_all$3(wrap, proj1, proj2, f, lid, env, acc){
    if(! lid)
     return fold_name$0
             (wrap,
              function(name, param, acc){
               var data = param[2], p = param[1];
               return caml_call4(f, name, p, data, acc);
              },
              caml_call1(proj1, env),
              acc);
    var
     l = lid[1],
     match = lookup_module_components(0, 0, none, l, env),
     desc = match[2],
     p = match[1],
     match$0 = get_components(desc);
    if(0 !== match$0[0]) return acc;
    var c = match$0[1], b = caml_call1(proj2, c);
    return caml_call3
            (a[4][69][13],
             function(s, data, acc){
              return caml_call4(f, s, [1, p, s], caml_call1(wrap, data), acc);
             },
             b,
             acc);
   }
   function find_all_simple_list(proj1, proj2, f, lid, env, acc$2){
    if(lid){
     var
      l = lid[1],
      desc = lookup_module_components(0, 0, none, l, env)[2],
      match$1 = get_components(desc);
     if(0 !== match$1[0]) return acc$2;
     var c = match$1[1], b = caml_call1(proj2, c);
     return caml_call3
             (a[4][69][13],
              function(s, comps, acc){
               if(! comps) return acc;
               var data = comps[1];
               return caml_call2(f, data, acc);
              },
              b,
              acc$2);
    }
    var tbl$0 = caml_call1(proj1, env);
    function f$0(data, acc){return caml_call2(f, data, acc);}
    var tbl = tbl$0, acc = acc$2;
    for(;;){
     var
      acc$0 =
        fold_name
         (function(id, d){return function(b){var a = b; return f$0(d, a);};},
          tbl[1],
          acc),
      match = tbl[2];
     if(! match) return acc$0;
     var
      match$0 = match[1],
      next = match$0[4],
      components = match$0[1],
      acc$1 =
        caml_call1
         (caml_call2
           (a[4][69][13],
            function(name){
             var a = Stdlib_List[26];
             return function(b, c){return a(f$0, b, c);};
            },
            components),
          acc$0);
     tbl = next;
     acc = acc$1;
    }
   }
   function fold_modules(f, lid, env, acc){
    if(! lid)
     return fold_name$0
             (wrap_module,
              function(name, param, acc){
               var entry = param[2], p = param[1];
               if(typeof entry === "number"){
                var match = find_in_cache(persistent_env[1], name);
                if(! match) return acc;
                var mda = match[1], md = force_module_decl(mda[1]);
                return caml_call4(f, name, p, md, acc);
               }
               if(0 !== entry[0]) return acc;
               var mda$0 = entry[1], md$0 = force_module_decl(mda$0[1]);
               return caml_call4(f, name, p, md$0, acc);
              },
              env[5],
              acc);
    var
     l = lid[1],
     match = lookup_module_components(0, 0, none, l, env),
     desc = match[2],
     p = match[1],
     match$0 = get_components(desc);
    if(0 !== match$0[0]) return acc;
    var c = match$0[1];
    return caml_call3
            (a[4][69][13],
             function(s, mda, acc){
              var md = force_module_decl(mda[1]);
              return caml_call4(f, s, [1, p, s], md, acc);
             },
             c[5],
             acc);
   }
   function fold_values(f){
    function a(k, p, ve, acc){
     if(0 !== ve[0]) return acc;
     var vda = ve[1];
     return caml_call4(f, k, p, vda[1], acc);
    }
    function b(sc){return sc[1];}
    function c(env){return env[1];}
    return function(d, e, f){
     return find_all$3(wrap_value, c, b, a, d, e, f);};
   }
   function fold_constructors(f){
    function a(cda, acc){return caml_call2(f, cda[1], acc);}
    function b(sc){return sc[2];}
    function c(env){return env[2];}
    return function(d, e, f){return find_all_simple_list(c, b, a, d, e, f);};
   }
   function fold_labels(f){
    function a(sc){return sc[3];}
    function b(env){return env[3];}
    return function(c, d, e){return find_all_simple_list(b, a, f, c, d, e);};
   }
   function fold_types(f){
    function a(k, p, tda, acc){return caml_call4(f, k, p, tda[1], acc);}
    function b(sc){return sc[4];}
    function c(env){return env[4];}
    return function(d, e, f){
     return find_all$3(wrap_identity, c, b, a, d, e, f);};
   }
   function fold_modtypes(f){
    function a(k, path, mta, acc){
     var data = mta[1];
     return caml_call4(f, k, path, force_modtype_decl(data), acc);
    }
    function b(sc){return sc[6];}
    function c(env){return env[6];}
    return function(d, e, f){
     return find_all$3(wrap_identity, c, b, a, d, e, f);};
   }
   function fold_classes(f){
    function a(k, p, clda, acc){return caml_call4(f, k, p, clda[1], acc);}
    function b(sc){return sc[7];}
    function c(env){return env[7];}
    return function(d, e, f){
     return find_all$3(wrap_identity, c, b, a, d, e, f);};
   }
   function fold_cltypes(f){
    function a(k, p, cltda, acc){return caml_call4(f, k, p, cltda[1], acc);}
    function b(sc){return sc[8];}
    function c(env){return env[8];}
    return function(d, e, f){
     return find_all$3(wrap_identity, c, b, a, d, e, f);};
   }
   function filter_non_loaded_persistent(f, env){
    var
     to_remove =
       fold_name$0
        (wrap_module,
         function(name, param, acc){
          var entry = param[2];
          return typeof entry === "number"
                  ? find_in_cache
                     (persistent_env[1], name)
                    ? acc
                    : caml_call1
                       (f, [2, name])
                      ? acc
                      : caml_call2(a[4][68][4], name, acc)
                  : 0 === entry[0] ? acc : acc;
         },
         env[5],
         a[4][68][1]);
    function filter_summary(summary$1, ids$1){
     var summary = summary$1, ids = ids$1;
     for(;;){
      if(caml_call1(a[4][68][2], ids)) return summary;
      if(typeof summary === "number") break;
      if(11 !== summary[0]) break;
      var summary$0 = summary[1], id = summary[2], name$0 = id[1];
      if(! caml_call2(a[4][68][3], name$0, ids)) break;
      var name = id[1], ids$0 = caml_call2(a[4][68][6], name, ids);
      summary = summary$0;
      ids = ids$0;
     }
     return map_summary(function(s){return filter_summary(s, ids);}, summary);
    }
    var
     c = env[12],
     d = env[11],
     e = filter_summary(env[10], to_remove),
     tbl = env[5],
     g = env[9],
     h = env[8],
     i = env[7],
     j = env[6],
     b =
       caml_call3
        (a[4][68][16],
         function(name, tbl){
          var id = [2, name], a = tbl[2];
          return [0, remove(id, tbl[1]), a];
         },
         to_remove,
         tbl);
    return [0, env[1], env[2], env[3], env[4], b, j, i, h, g, e, d, c];
   }
   function summary(env){
    return caml_call1(Map$3[2], env[11]) ? env[10] : [9, env[10], env[11]];
   }
   var last_env = s_ref(empty$7), last_reduced_env = s_ref(empty$7);
   function keep_only_summary(env){
    if(last_env[1] === env) return last_reduced_env[1];
    var
     new_env =
       [0,
        empty$7[1],
        empty$7[2],
        empty$7[3],
        empty$7[4],
        empty$7[5],
        empty$7[6],
        empty$7[7],
        empty$7[8],
        empty$7[9],
        env[10],
        env[11],
        env[12]];
    last_env[1] = env;
    last_reduced_env[1] = new_env;
    return new_env;
   }
   function env_of_only_summary(env_from_summary, env){
    var new_env = caml_call2(env_from_summary, env[10], identity);
    return [0,
            new_env[1],
            new_env[2],
            new_env[3],
            new_env[4],
            new_env[5],
            new_env[6],
            new_env[7],
            new_env[8],
            new_env[9],
            new_env[10],
            env[11],
            env[12]];
   }
   var
    print_longident =
      [0,
       function(param, a){
        throw caml_maybe_attach_backtrace([0, Assert_failure, hA], 1);
       }],
    print_path =
      [0,
       function(param, a){
        throw caml_maybe_attach_backtrace([0, Assert_failure, hB], 1);
       }];
   function spellcheck$0(ppf, extract, env, lid){
    function choices(path, name){
     return spellcheck(caml_call2(extract, path, env), name);
    }
    switch(lid[0]){
      case 0:
       var s = lid[1];
       return did_you_mean(ppf, function(param){return choices(0, s);});
      case 1:
       var s$0 = lid[2], r = lid[1];
       return did_you_mean(ppf, function(param){return choices([0, r], s$0);});
      default: return 0;
    }
   }
   function spellcheck_name(ppf, extract, env, name){
    return did_you_mean
            (ppf,
             function(param){
              return spellcheck(caml_call1(extract, env), name);
             });
   }
   function extract_values(path, env){
    return fold_values(function(name, param, a, acc){return [0, name, acc];})
            (path, env, 0);
   }
   function extract_types(path, env){
    return fold_types(function(name, param, a, acc){return [0, name, acc];})
            (path, env, 0);
   }
   function extract_modules(path, env){
    return fold_modules
            (function(name, param, a, acc){return [0, name, acc];},
             path,
             env,
             0);
   }
   function extract_constructors(path, env){
    return fold_constructors(function(desc, acc){return [0, desc[1], acc];})
            (path, env, 0);
   }
   function extract_labels(path, env){
    return fold_labels(function(desc, acc){return [0, desc[1], acc];})
            (path, env, 0);
   }
   function extract_classes(path, env){
    return fold_classes(function(name, param, a, acc){return [0, name, acc];})
            (path, env, 0);
   }
   function extract_modtypes(path, env){
    return fold_modtypes
             (function(name, param, a, acc){return [0, name, acc];})
            (path, env, 0);
   }
   function extract_cltypes(path, env){
    return fold_cltypes(function(name, param, a, acc){return [0, name, acc];})
            (path, env, 0);
   }
   function extract_instance_variables(env){
    return fold_values
             (function(name, param, descr, acc){
               var match = descr[2];
               if(typeof match !== "number" && 1 === match[0])
                return [0, name, acc];
               return acc;
              })
            (0, env, 0);
   }
   function report_lookup_error(loc, env, ppf, param){
    if(typeof param === "number")
     return Stdlib_Format[129].call(null, ppf)(hC);
    switch(param[0]){
      case 0:
       var hint = param[2], lid = param[1], b = print_longident[1];
       caml_call2(Stdlib_Format[129].call(null, ppf)(hD), b, lid);
       spellcheck$0(ppf, extract_values, env, lid);
       if(! hint) return 0;
       var def_loc = hint[1], line = get_pos_info(def_loc[1])[2];
       return caml_call3
               (Stdlib_Format[129].call(null, ppf)(hE),
                cst_Hint_If_this_is_a_recursiv,
                cst_you_should_add_the_rec_key,
                line);
      case 1:
       var lid$0 = param[1], c = print_longident[1];
       caml_call2(Stdlib_Format[129].call(null, ppf)(hF), c, lid$0);
       return spellcheck$0(ppf, extract_types, env, lid$0);
      case 2:
       var lid$1 = param[1], d = print_longident[1];
       caml_call2(Stdlib_Format[129].call(null, ppf)(hG), d, lid$1);
       return spellcheck$0(ppf, extract_constructors, env, lid$1);
      case 3:
       var lid$2 = param[1], e = print_longident[1];
       caml_call2(Stdlib_Format[129].call(null, ppf)(hH), e, lid$2);
       return spellcheck$0(ppf, extract_labels, env, lid$2);
      case 4:
       var lid$3 = param[1], f = print_longident[1];
       caml_call2(Stdlib_Format[129].call(null, ppf)(hI), f, lid$3);
       try{find_modtype_by_name(lid$3, env);}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn === Stdlib[8])
         return spellcheck$0(ppf, extract_modules, env, lid$3);
        throw caml_maybe_attach_backtrace(exn, 0);
       }
       var g = print_longident[1];
       return caml_call4
               (Stdlib_Format[129].call(null, ppf)(hJ),
                cst_Hint_There_is_a_module_typ,
                g,
                lid$3,
                cst_but_module_types_are_not_m);
      case 5:
       var lid$4 = param[1], h = print_longident[1];
       caml_call2(Stdlib_Format[129].call(null, ppf)(hK), h, lid$4);
       try{find_cltype_by_name(lid$4, env);}
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        if(exn$0 === Stdlib[8])
         return spellcheck$0(ppf, extract_classes, env, lid$4);
        throw caml_maybe_attach_backtrace(exn$0, 0);
       }
       var i = print_longident[1];
       return caml_call4
               (Stdlib_Format[129].call(null, ppf)(hL),
                cst_Hint_There_is_a_class_type,
                i,
                lid$4,
                cst_but_classes_are_not_class_);
      case 6:
       var lid$5 = param[1], j = print_longident[1];
       caml_call2(Stdlib_Format[129].call(null, ppf)(hM), j, lid$5);
       try{find_module_by_name(lid$5, env);}
       catch(exn){
        var exn$1 = caml_wrap_exception(exn);
        if(exn$1 === Stdlib[8])
         return spellcheck$0(ppf, extract_modtypes, env, lid$5);
        throw caml_maybe_attach_backtrace(exn$1, 0);
       }
       var k = print_longident[1];
       return caml_call4
               (Stdlib_Format[129].call(null, ppf)(hN),
                cst_Hint_There_is_a_module_nam,
                k,
                lid$5,
                cst_but_modules_are_not_module);
      case 7:
       var lid$6 = param[1], l = print_longident[1];
       caml_call2(Stdlib_Format[129].call(null, ppf)(hO), l, lid$6);
       return spellcheck$0(ppf, extract_cltypes, env, lid$6);
      case 8:
       var s = param[1];
       caml_call1(Stdlib_Format[129].call(null, ppf)(hP), s);
       return spellcheck_name(ppf, extract_instance_variables, env, s);
      case 9:
       var s$0 = param[1];
       caml_call1(Stdlib_Format[129].call(null, ppf)(hQ), s$0);
       return spellcheck_name(ppf, extract_instance_variables, env, s$0);
      case 10:
       var lid$7 = param[1], m = print_longident[1];
       return caml_call2(Stdlib_Format[129].call(null, ppf)(hR), m, lid$7);
      case 11:
       var lid$8 = param[1], n = print_longident[1];
       return caml_call2(Stdlib_Format[129].call(null, ppf)(hS), n, lid$8);
      case 12:
       var lid$9 = param[1], o = print_longident[1];
       return caml_call2(Stdlib_Format[129].call(null, ppf)(hT), o, lid$9);
      case 13:
       var lid$10 = param[1], q = print_longident[1];
       return caml_call2(Stdlib_Format[129].call(null, ppf)(hU), q, lid$10);
      case 14:
       var lid$11 = param[1], r = print_longident[1];
       return caml_call2(Stdlib_Format[129].call(null, ppf)(hV), r, lid$11);
      case 15:
       var lid$12 = param[1], t = print_longident[1];
       return caml_call2(Stdlib_Format[129].call(null, ppf)(hW), t, lid$12);
      case 16:
       var lid$13 = param[1], u = print_longident[1];
       return caml_call2(Stdlib_Format[129].call(null, ppf)(hX), u, lid$13);
      case 17:
       var lid$14 = param[1], v = print_longident[1];
       return caml_call2(Stdlib_Format[129].call(null, ppf)(hY), v, lid$14);
      default:
       var p = param[2], lid$15 = param[1];
       if(0 === p[0]) var id = p[1], a = is_ident(id); else var a = 0;
       var
        cause = a ? cst_is_the_current_compilation : cst_is_missing,
        w = print_path[1],
        x = print_longident[1];
       return caml_call5
               (Stdlib_Format[129].call(null, ppf)(hZ),
                x,
                lid$15,
                w,
                p,
                cause);
    }
   }
   function report_error$3(ppf, param){
    switch(param[0]){
      case 0:
       var path2 = param[3], path1 = param[2];
       Stdlib_Format[129].call(null, ppf)(h0);
       if(same$0(path1, path2)){
        var a = name$0(0, path1);
        caml_call1(Stdlib_Format[129].call(null, ppf)(h1), a);
       }
       else{
        var b = name$0(0, path2), c = name$0(0, path1);
        caml_call2(Stdlib_Format[129].call(null, ppf)(h3), c, b);
       }
       var name$1 = head(path2)[1];
       return caml_call3
               (Stdlib_Format[129].call(null, ppf)(h2),
                cst_The_compiled_interface_for,
                name$1,
                cst_was_not_found);
      case 1:
       var name = param[2];
       return caml_call1(Stdlib_Format[129].call(null, ppf)(h4), name);
      default:
       var err = param[3], t = param[2], loc = param[1];
       return report_lookup_error(loc, t, ppf, err);
    }
   }
   register_error_of_exn
    (function(param){
      var tag = param[1];
      if(tag !== Error$6) return 0;
      var err = param[2], loc = err[1];
      if(caml_equal(loc, none))
       var error_of_printer$0 = error_of_printer_file;
      else
       var
        a = 0,
        b = [0, loc],
        error_of_printer$0 =
          function(c, d){return error_of_printer(b, a, c, d);};
      return [0, error_of_printer$0(report_error$3, err)];
     });
   var
    Dynlink_compilerlibs_Env =
      [0,
       register_uid,
       get_uid_to_loc_tbl,
       empty$7,
       initial_safe_string,
       initial_unsafe_string,
       diff$0,
       iter_types,
       run_iter_cont,
       same_types,
       used_persistent,
       find_shadowed_types,
       without_cmis$0,
       find_value,
       find_type,
       find_type_descrs,
       find_module,
       find_modtype,
       find_class,
       find_cltype,
       find_strengthened_module,
       find_ident_constructor,
       find_ident_label,
       find_type_expansion,
       find_type_expansion_opt,
       find_modtype_expansion,
       find_modtype_expansion_lazy,
       find_hash_type,
       find_value_address,
       find_module_address,
       find_class_address,
       find_constructor_address,
       shape_of_path,
       add_functor_arg,
       is_functor_arg,
       normalize_module_path,
       normalize_type_path,
       normalize_path_prefix,
       normalize_modtype_path,
       reset_required_globals,
       get_required_globals,
       add_required_global,
       has_local_constraints,
       mark_value_used,
       mark_module_used,
       mark_type_used,
       mark_constructor_used,
       mark_extension_used,
       mark_label_used,
       lookup_error,
       lookup_value,
       lookup_type,
       lookup_module,
       lookup_modtype,
       lookup_class,
       lookup_cltype,
       lookup_module_path,
       lookup_modtype_path,
       lookup_constructor,
       lookup_all_constructors,
       lookup_all_constructors_from_t,
       lookup_label,
       lookup_all_labels,
       lookup_all_labels_from_type,
       lookup_instance_variable,
       find_value_by_name,
       find_type_by_name,
       find_module_by_name,
       find_modtype_by_name,
       find_class_by_name,
       find_cltype_by_name,
       find_constructor_by_name,
       find_label_by_name,
       bound_value,
       bound_module,
       bound_type,
       bound_modtype,
       bound_class,
       bound_cltype,
       make_copy_of_types,
       add_value$1,
       add_type$2,
       add_extension$0,
       add_module$1,
       add_module_lazy,
       add_module_declaration,
       add_module_declaration_lazy,
       add_modtype$1,
       add_modtype_lazy,
       add_class$1,
       add_cltype$0,
       add_local_type,
       add_persistent_structure,
       persistent_structures_of_dir,
       filter_non_loaded_persistent,
       add_signature$0,
       open_signature,
       open_pers_signature,
       remove_last_open,
       enter_value,
       enter_type,
       enter_extension,
       enter_module,
       enter_module_declaration,
       enter_modtype,
       enter_class,
       enter_cltype,
       enter_signature,
       enter_signature_and_shape,
       enter_unbound_value,
       enter_unbound_module,
       reset_cache,
       reset_cache_toplevel,
       set_unit_name,
       get_unit_name,
       read_signature,
       save_signature,
       save_signature_with_imports,
       crc_of_unit$0,
       imports$0,
       import_crcs$0,
       is_imported_opaque$0,
       register_import_as_opaque$0,
       summary,
       keep_only_summary,
       env_of_only_summary,
       Error$6,
       report_error$3,
       report_lookup_error,
       in_signature,
       is_in_signature,
       set_value_used_callback,
       set_type_used_callback,
       check_functor_application,
       check_well_formed_module,
       add_delayed_check_forward$0,
       strengthen,
       same_constr,
       print_longident,
       print_path,
       fold_values,
       fold_types,
       fold_constructors,
       fold_labels,
       fold_modules,
       fold_modtypes,
       fold_classes,
       fold_cltypes,
       scrape_alias,
       check_value_name,
       print_address];
   caml_register_global
    (1317, Dynlink_compilerlibs_Env, "Dynlink_compilerlibs.Env");
   function cons(item, str){
    return [0, item, str, Stdlib[28].call(null, str, cst_fun$0)];
   }
   function dot(opt, scopes, s){
    if(opt) var sth = opt[1], sep = sth; else var sep = cst$102;
    a:
    if(s !== cst$115){
     var match = caml_string_get(s, 0);
     if(91 <= match){
      if(97 <= match){
       if(123 > match){var s$0 = s; break a;}
      }
      else if(95 === match){var s$0 = s; break a;}
     }
     else
      if(58 <= match){
       if(65 <= match){var s$0 = s; break a;}
      }
      else if(48 <= match){var s$0 = s; break a;}
     var
      a = Stdlib[28].call(null, s, cst$99),
      s$0 = Stdlib[28].call(null, cst$100, a);
    }
    else
     var s$0 = cst$101;
    if(! scopes) return s$0;
    var str = scopes[2], b = Stdlib[28].call(null, sep, s$0);
    return Stdlib[28].call(null, str, b);
   }
   function enter_anonymous_function(scopes){
    var str = scopes ? scopes[3] : cst_fun;
    return [0, 0, str, str];
   }
   function enter_value_definition(scopes, id){
    var name = id[1];
    return cons(1, dot(0, scopes, name));
   }
   function enter_module_definition(scopes, id){
    var name = id[1];
    return cons(2, dot(0, scopes, name));
   }
   function enter_class_definition(scopes, id){
    var name = id[1];
    return cons(3, dot(0, scopes, name));
   }
   function enter_method_definition(scopes, s){
    a:
    {
     if(scopes && 3 === scopes[1]){var str = dot(h5, scopes, s); break a;}
     var str = dot(0, scopes, s);
    }
    return cons(4, str);
   }
   function string_of_scopes(param){
    if(! param) return cst_unknown;
    var str = param[2];
    return str;
   }
   function of_location(scopes, loc){
    return caml_equal(loc, none) ? 0 : [0, loc, scopes];
   }
   function to_location(param){
    if(! param) return none;
    var loc = param[1];
    return loc;
   }
   function string_of_scoped_location(param){
    if(! param) return cst$103;
    var scopes = param[2];
    return string_of_scopes(scopes);
   }
   function is_none$0(param){return param ? 0 : 1;}
   function to_string$2(dbg){
    if(! dbg) return cst$107;
    var
     items =
       Stdlib_List[19].call
        (null,
         function(d){
          var a = d[4], b = d[3], c = d[2], e = d[1];
          return caml_call4(Stdlib_Printf[4].call(null, h6), e, c, b, a);
         },
         dbg),
     a = Stdlib_String[6].call(null, cst$105, items),
     b = Stdlib[28].call(null, a, cst$104);
    return Stdlib[28].call(null, cst$106, b);
   }
   function from_location(param){
    if(! param) return 0;
    var scopes = param[2], loc = param[1];
    if(caml_equal(loc, none))
     throw caml_maybe_attach_backtrace([0, Assert_failure, h7], 1);
    var
     valid_endpos = Stdlib_String[8].call(null, loc[2][1], loc[1][1]),
     e = 0,
     a = valid_endpos ? loc[2][2] : loc[1][2],
     b = valid_endpos ? loc[2][3] : loc[1][3],
     c = loc[1][3],
     d = valid_endpos ? loc[2][4] - loc[1][3] | 0 : loc[1][4] - loc[1][3] | 0;
    return [0,
            [0,
             loc[1][1],
             loc[1][2],
             loc[1][4] - loc[1][3] | 0,
             d,
             c,
             b,
             a,
             scopes],
            e];
   }
   function to_location$0(param){
    if(! param) return none;
    var
     d = param[1],
     loc_start = [0, d[1], d[2], d[5], d[5] + d[3] | 0],
     loc_end = [0, d[1], d[7], d[6], d[5] + d[4] | 0];
    return [0, loc_start, loc_end, 0];
   }
   function inline(dbg1, dbg2){return Stdlib[37].call(null, dbg1, dbg2);}
   function compare$17(dbg1, dbg2){
    var
     ds2$1 = Stdlib_List[9].call(null, dbg2),
     ds1$1 = Stdlib_List[9].call(null, dbg1),
     ds1 = ds1$1,
     ds2 = ds2$1;
    for(;;){
     if(! ds1) return ds2 ? -1 : 0;
     var ds1$0 = ds1[2], d1 = ds1[1];
     if(! ds2) return 1;
     var
      ds2$0 = ds2[2],
      d2 = ds2[1],
      c = Stdlib_String[9].call(null, d1[1], d2[1]);
     if(c !== 0) return c;
     var c$5 = caml_int_compare(d1[2], d2[2]);
     if(c$5 !== 0) return c$5;
     var c$4 = caml_int_compare(d1[4], d2[4]);
     if(c$4 !== 0) return c$4;
     var c$3 = caml_int_compare(d1[3], d2[3]);
     if(c$3 !== 0) return c$3;
     var c$2 = caml_int_compare(d1[5], d2[5]);
     if(c$2 !== 0) return c$2;
     var c$1 = caml_int_compare(d1[6], d2[6]);
     if(c$1 !== 0) return c$1;
     var c$0 = caml_int_compare(d1[7], d2[7]);
     if(c$0 !== 0) return c$0;
     ds1 = ds1$0;
     ds2 = ds2$0;
    }
   }
   function hash$10(t){
    return Stdlib_List[25].call
            (null,
             function(hash, item){
              return Stdlib_Hashtbl[28].call(null, [0, hash, item]);
             },
             0,
             t);
   }
   function print_compact(ppf, t$1){
    var t = t$1;
    for(;;){
     var
      print_item =
        function(item){
         var b = item[2], c = item[1];
         caml_call3
          (Stdlib_Format[129].call(null, ppf)(h8), print_filename, c, b);
         var a = 0 <= item[3] ? 1 : 0;
         if(! a) return a;
         var d = item[4], e = item[3];
         return caml_call2(Stdlib_Format[129].call(null, ppf)(h9), e, d);
        };
     if(! t) return 0;
     var item = t[1];
     if(! t[2]) return print_item(item);
     var t$0 = t[2];
     print_item(item);
     Stdlib_Format[129].call(null, ppf)(h_);
     t = t$0;
    }
   }
   var
    Dynlink_compilerlibs_Debuginfo =
      [0,
       [0,
        string_of_scopes,
        0,
        enter_anonymous_function,
        enter_value_definition,
        enter_module_definition,
        enter_class_definition,
        enter_method_definition,
        of_location,
        to_location,
        string_of_scoped_location],
       0,
       is_none$0,
       to_string$2,
       from_location,
       to_location$0,
       inline,
       compare$17,
       hash$10,
       print_compact];
   caml_register_global
    (1318, Dynlink_compilerlibs_Debuginfo, "Dynlink_compilerlibs.Debuginfo");
   var equal_primitive = caml_equal;
   function equal_value_kind(x, y){
    if(typeof x === "number")
     switch(x){
       case 0:
        if(typeof y === "number" && ! y) return 1; break;
       case 1:
        if(typeof y === "number" && 1 === y) return 1; break;
       default: if(typeof y === "number" && 2 <= y) return 1;
     }
    else{
     var bi1 = x[1];
     if(typeof y !== "number"){
      var bi2 = y[1];
      return equal_boxed_integer(bi1, bi2);
     }
    }
    return 0;
   }
   function equal_inline_attribute(x, y){
    a:
    {
     if(typeof x === "number"){
      switch(x){
        case 0:
         if(typeof y !== "number" || y) break a; break;
        case 1:
         if(typeof y !== "number" || 1 !== y) break a; break;
        case 2:
         if(typeof y !== "number" || 2 !== y) break a; break;
        default: if(typeof y !== "number" || 3 > y) break a;
      }
      return 1;
     }
     var u = x[1];
     if(typeof y !== "number"){var v = y[1]; return u === v ? 1 : 0;}
    }
    return 0;
   }
   function equal_specialise_attribute(x, y){
    a:
    {
     switch(x){
       case 0:
        if(y) break a; break;
       case 1:
        if(1 !== y) break a; break;
       default: if(2 > y) break a;
     }
     return 1;
    }
    return 0;
   }
   function equal_meth_kind(x, y){
    switch(x){
      case 0:
       if(! y) return 1; break;
      case 1:
       if(1 === y) return 1; break;
      default: if(2 <= y) return 1;
    }
    return 0;
   }
   function const_int(n){return [0, [0, n]];}
   var const_unit = const_int(0);
   function max_arity(param){return native_code[1] ? 126 : Stdlib[19];}
   function lfunction(kind, params, return$, body, attr, loc){
    var a = max_arity(0);
    if(Stdlib_List[1].call(null, params) <= a)
     return [4, [0, kind, params, return$, body, attr, loc]];
    throw caml_maybe_attach_backtrace([0, Assert_failure, h$], 1);
   }
   var
    lambda_unit = [2, const_unit],
    default_stub_attribute =
      [0,
       default_function_attribute[1],
       default_function_attribute[2],
       default_function_attribute[3],
       default_function_attribute[4],
       default_function_attribute[5],
       1,
       default_function_attribute[7]];
   function make_key(e){
    var
     Not_simple = [248, cst_Not_simple, caml_fresh_oo_id(0)],
     count = [0, 0],
     make_key = make_key_generator(0);
    function tr_rec(env$1, e$7){
     var env = env$1, e = e$7;
     a:
     for(;;){
      count[1]++;
      if(32 < count[1]) throw caml_maybe_attach_backtrace(Not_simple, 1);
      switch(e[0]){
        case 2:
         var a = e[1];
         if(0 === a[0] && 2 === a[1][0])
          throw caml_maybe_attach_backtrace(Not_simple, 1);
         return e;
        case 3:
         var
          ap = e[1],
          c = ap[6],
          f = ap[5],
          g = ap[4],
          h = tr_recs(env, ap[2]);
         return [3, [0, tr_rec(env, ap[1]), h, 0, g, f, c]];
        case 5:
         var str = e[1];
         if(1 !== str){
          var match = e[5];
          if(0 === match[0]){
           var v = match[1], ex$1 = e[4], x$0 = e[3];
           if(same(v, x$0)){e = ex$1; break;}
          }
          var
           e$1 = e[5],
           ex$2 = e[4],
           x$1 = e[3],
           k = e[2],
           ex$3 = tr_rec(env, ex$2),
           y = make_key(x$1);
          return [5, str, k, y, ex$3, tr_rec(add$0(x$1, [0, y], env), e$1)];
         }
         var
          e$0 = e[5],
          ex = e[4],
          x = e[3],
          ex$0 = tr_rec(env, ex),
          env$0 = add$0(x, ex$0, env);
         env = env$0;
         e = e$0;
         break;
        case 6:
         var
          e$2 = e[4],
          ex$4 = e[3],
          x$2 = e[2],
          k$0 = e[1],
          ex$5 = tr_rec(env, ex$4),
          y$0 = make_key(x$2);
         return [6, k$0, y$0, ex$5, tr_rec(add$0(x$2, [1, y$0], env), e$2)];
        case 8:
         var es = e[2], p = e[1]; return [8, p, tr_recs(env, es), 0];
        case 9:
         var loc = e[3], sw = e[2], e$3 = e[1], j = tr_sw(env, sw);
         return [9, tr_rec(env, e$3), j, loc];
        case 10:
         break a;
        case 11:
         var es$0 = e[2], i = e[1]; return [11, i, tr_recs(env, es$0)];
        case 12:
         var e2 = e[3], xs = e[2], e1 = e[1], o = tr_rec(env, e2);
         return [12, tr_rec(env, e1), xs, o];
        case 13:
         var e2$0 = e[3], x$3 = e[2], e1$0 = e[1], q = tr_rec(env, e2$0);
         return [13, tr_rec(env, e1$0), x$3, q];
        case 14:
         var
          ifnot = e[3],
          ifso = e[2],
          cond = e[1],
          r = tr_rec(env, ifnot),
          s = tr_rec(env, ifso);
         return [14, tr_rec(env, cond), s, r];
        case 15:
         var e2$1 = e[2], e1$1 = e[1], t = tr_rec(env, e2$1);
         return [15, tr_rec(env, e1$1), t];
        case 18:
         var e$5 = e[2], x$4 = e[1]; return [18, x$4, tr_rec(env, e$5)];
        case 19:
         var
          es$1 = e[4],
          e2$2 = e[3],
          e1$2 = e[2],
          m = e[1],
          u = tr_recs(env, es$1),
          w = tr_rec(env, e2$2);
         return [19, m, tr_rec(env, e1$2), w, u, 0];
        case 21:
         var e$6 = e[2], id$0 = e[1]; return [21, id$0, tr_rec(env, e$6)];
        case 0:
        case 1:
         var id = e[1];
         try{var b = find_same(id, env); return b;}
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn === Stdlib[8]) return e;
          throw caml_maybe_attach_backtrace(exn, 0);
         }
        default: throw caml_maybe_attach_backtrace(Not_simple, 1);
      }
     }
     var
      d = e[3],
      sw$0 = e[2],
      e$4 = e[1],
      l = tr_opt(env, d),
      n =
        Stdlib_List[19].call
         (null,
          function(param){
           var e = param[2], s = param[1];
           return [0, s, tr_rec(env, e)];
          },
          sw$0);
     return [10, tr_rec(env, e$4), n, l, 0];
    }
    function tr_recs(env, es){
     return Stdlib_List[19].call
             (null, function(a){return tr_rec(env, a);}, es);
    }
    function tr_sw(env, sw){
     var
      a = tr_opt(env, sw[5]),
      b =
        Stdlib_List[19].call
         (null,
          function(param){
           var e = param[2], i = param[1];
           return [0, i, tr_rec(env, e)];
          },
          sw[4]),
      c = sw[3],
      d =
        Stdlib_List[19].call
         (null,
          function(param){
           var e = param[2], i = param[1];
           return [0, i, tr_rec(env, e)];
          },
          sw[2]);
     return [0, sw[1], d, c, b, a];
    }
    function tr_opt(env, param){
     if(! param) return 0;
     var e = param[1];
     return [0, tr_rec(env, e)];
    }
    try{var a = [0, tr_rec(empty$0, e)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Not_simple) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function name_lambda(strict, arg, fn){
    if(0 === arg[0]){var id = arg[1]; return caml_call1(fn, id);}
    var id$0 = create_local(cst_let);
    return [5, strict, 0, id$0, arg, caml_call1(fn, id$0)];
   }
   function name_lambda_list(args, fn){
    function name_list(names$1, param$0){
     var names = names$1, param = param$0;
     for(;;){
      if(! param) return caml_call1(fn, Stdlib_List[9].call(null, names));
      var arg = param[1];
      if(0 !== arg[0]){
       var rem$0 = param[2], id = create_local(cst_let$0);
       return [5, 0, 0, id, arg, name_list([0, [0, id], names], rem$0)];
      }
      var rem = param[2], names$0 = [0, arg, names];
      names = names$0;
      param = rem;
     }
    }
    return name_list(0, args);
   }
   function iter_opt(f, param){
    if(! param) return 0;
    var e = param[1];
    return caml_call1(f, e);
   }
   function shallow_iter(tail, f, param){
    switch(param[0]){
      case 3:
       var match = param[1], args = match[2], fn = match[1];
       caml_call1(f, fn);
       return Stdlib_List[17].call(null, f, args);
      case 4:
       var body = param[1][4]; return caml_call1(f, body);
      case 5:
       var body$0 = param[5], arg = param[4]; break;
      case 6:
       var body$0 = param[4], arg = param[3]; break;
      case 7:
       var body$1 = param[2], decl = param[1];
       caml_call1(tail, body$1);
       return Stdlib_List[17].call
               (null,
                function(param){
                 var exp = param[2];
                 return caml_call1(f, exp);
                },
                decl);
      case 8:
       var p = param[1];
       if(typeof p === "number" && 1 >= p - 4 >>> 0){
        var a = param[2];
        if(a){
         var b = a[2];
         if(b && ! b[2]){
          var l2 = b[1], l1 = a[1];
          caml_call1(f, l1);
          return caml_call1(tail, l2);
         }
        }
       }
       var args$0 = param[2];
       return Stdlib_List[17].call(null, f, args$0);
      case 9:
       var sw = param[2], arg$0 = param[1];
       caml_call1(f, arg$0);
       Stdlib_List[17].call
        (null,
         function(param){
          var case$ = param[2];
          return caml_call1(tail, case$);
         },
         sw[2]);
       Stdlib_List[17].call
        (null,
         function(param){
          var case$ = param[2];
          return caml_call1(tail, case$);
         },
         sw[4]);
       return iter_opt(tail, sw[5]);
      case 10:
       var default$ = param[3], cases = param[2], arg$1 = param[1];
       caml_call1(f, arg$1);
       Stdlib_List[17].call
        (null,
         function(param){var act = param[2]; return caml_call1(tail, act);},
         cases);
       return iter_opt(tail, default$);
      case 11:
       var args$1 = param[2]; return Stdlib_List[17].call(null, f, args$1);
      case 12:
       var e2 = param[3], e1 = param[1];
       caml_call1(tail, e1);
       return caml_call1(tail, e2);
      case 13:
       var e2$0 = param[3], e1$0 = param[1];
       caml_call1(f, e1$0);
       return caml_call1(tail, e2$0);
      case 14:
       var e3 = param[3], e2$1 = param[2], e1$1 = param[1];
       caml_call1(f, e1$1);
       caml_call1(tail, e2$1);
       return caml_call1(tail, e3);
      case 15:
       var e2$2 = param[2], e1$2 = param[1];
       caml_call1(f, e1$2);
       return caml_call1(tail, e2$2);
      case 16:
       var e2$3 = param[2], e1$3 = param[1];
       caml_call1(f, e1$3);
       return caml_call1(f, e2$3);
      case 17:
       var e3$0 = param[5], e2$4 = param[3], e1$4 = param[2];
       caml_call1(f, e1$4);
       caml_call1(f, e2$4);
       return caml_call1(f, e3$0);
      case 18:
       var e = param[2]; return caml_call1(f, e);
      case 19:
       var args$2 = param[4], obj = param[3], met = param[2];
       return Stdlib_List[17].call(null, f, [0, met, [0, obj, args$2]]);
      case 20:
       var e$0 = param[1]; return caml_call1(tail, e$0);
      case 21:
       var e$1 = param[2]; return caml_call1(tail, e$1);
      default: return 0;
    }
    caml_call1(f, arg);
    return caml_call1(tail, body$0);
   }
   function iter_head_constructor(f, l){return shallow_iter(f, f, l);}
   function free_variables(param$1){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        var param = param$1;
        e:
        for(;;){
         switch(param[0]){
           case 2:
            return Set$2[1];
           case 3:
            var match = param[1], args = match[2], fn = match[1];
            return free_variables_list(free_variables(fn), args);
           case 4:
            break a;
           case 5:
            var body$0 = param[5], arg = param[4], id$0 = param[3]; break;
           case 6:
            var body$0 = param[4], arg = param[3], id$0 = param[2]; break;
           case 7:
            break b;
           case 9:
            break c;
           case 10:
            break d;
           case 12:
            break e;
           case 13:
            var
             handler$0 = param[3],
             body$3 = param[1],
             param$0 = param[2],
             u = free_variables(body$3),
             w = free_variables(handler$0),
             x = caml_call2(Set$2[6], param$0, w);
            return caml_call2(Set$2[7], x, u);
           case 14:
            var
             e3 = param[3],
             e2 = param[2],
             e1 = param[1],
             y = free_variables(e3),
             z = free_variables(e2),
             A = free_variables(e1),
             B = caml_call2(Set$2[7], A, z);
            return caml_call2(Set$2[7], B, y);
           case 15:
            var
             e2$0 = param[2],
             e1$0 = param[1],
             C = free_variables(e2$0),
             D = free_variables(e1$0);
            return caml_call2(Set$2[7], D, C);
           case 16:
            var
             e2$1 = param[2],
             e1$1 = param[1],
             E = free_variables(e2$1),
             F = free_variables(e1$1);
            return caml_call2(Set$2[7], F, E);
           case 17:
            var
             body$4 = param[5],
             hi = param[3],
             lo = param[2],
             v = param[1],
             G = free_variables(hi),
             H = free_variables(lo),
             set$2 = caml_call2(Set$2[7], H, G),
             I = free_variables(body$4),
             J = caml_call2(Set$2[6], v, I);
            return caml_call2(Set$2[7], set$2, J);
           case 18:
            var e = param[2], id$1 = param[1], K = free_variables(e);
            return caml_call2(Set$2[4], id$1, K);
           case 19:
            var
             args$1 = param[4],
             obj = param[3],
             met = param[2],
             L = free_variables(obj),
             M = free_variables(met);
            return free_variables_list(caml_call2(Set$2[7], M, L), args$1);
           case 20:
            var lam = param[1]; param = lam; continue;
           case 21:
            var e$0 = param[2]; param = e$0; continue;
           case 8:
           case 11:
            var args$0 = param[2];
            return free_variables_list(Set$2[1], args$0);
           default: var id = param[1]; return caml_call1(Set$2[5], id);
         }
         var
          d = free_variables(body$0),
          f = caml_call2(Set$2[6], id$0, d),
          g = free_variables(arg);
         return caml_call2(Set$2[7], g, f);
        }
        var
         handler = param[3],
         params$0 = param[2][2],
         body$2 = param[1],
         p = free_variables(body$2),
         q = Stdlib_List[19].call(null, function(a){return a[1];}, params$0),
         r = caml_call1(Set$2[44], q),
         s = free_variables(handler),
         t = caml_call2(Set$2[10], s, r);
        return caml_call2(Set$2[7], t, p);
       }
       var
        default$ = param[3],
        cases = param[2],
        arg$1 = param[1],
        n = Stdlib_List[19].call(null, function(a){return a[2];}, cases),
        set$1 = free_variables_list(free_variables(arg$1), n);
       if(! default$) return set$1;
       var default$0 = default$[1], o = free_variables(default$0);
       return caml_call2(Set$2[7], set$1, o);
      }
      var
       sw = param[2],
       arg$0 = param[1],
       k = Stdlib_List[19].call(null, function(a){return a[2];}, sw[4]),
       l = Stdlib_List[19].call(null, function(a){return a[2];}, sw[2]),
       set$0 =
         free_variables_list(free_variables_list(free_variables(arg$0), l), k),
       match$1 = sw[5];
      if(! match$1) return set$0;
      var failaction = match$1[1], m = free_variables(failaction);
      return caml_call2(Set$2[7], set$0, m);
     }
     var
      body$1 = param[2],
      decl = param[1],
      h = Stdlib_List[19].call(null, function(a){return a[2];}, decl),
      set = free_variables_list(free_variables(body$1), h),
      i = Stdlib_List[19].call(null, function(a){return a[1];}, decl),
      j = caml_call1(Set$2[44], i);
     return caml_call2(Set$2[10], set, j);
    }
    var
     match$0 = param[1],
     body = match$0[4],
     params = match$0[2],
     a = Stdlib_List[19].call(null, function(a){return a[1];}, params),
     b = caml_call1(Set$2[44], a),
     c = free_variables(body);
    return caml_call2(Set$2[10], c, b);
   }
   function free_variables_list(set, exprs){
    return Stdlib_List[25].call
            (null,
             function(set, expr){
              var a = free_variables(expr);
              return caml_call2(Set$2[7], a, set);
             },
             set,
             exprs);
   }
   var raise_count = [0, 0];
   function next_raise_count(param){raise_count[1]++; return raise_count[1];}
   function is_guarded(param$0){
    var param = param$0;
    for(;;){
     switch(param[0]){
       case 5:
        var body = param[5]; param = body; continue;
       case 14:
        var a = param[3];
        if(11 === a[0] && 0 === a[1] && ! a[2]) return 1;
        break;
       case 20:
        var lam = param[1]; param = lam; continue;
     }
     return 0;
    }
   }
   function patch_guarded(patch, param){
    switch(param[0]){
      case 5:
       var
        body = param[5],
        lam = param[4],
        id = param[3],
        k = param[2],
        str = param[1];
       return [5, str, k, id, lam, patch_guarded(patch, body)];
      case 14:
       var a = param[3];
       if(11 === a[0] && 0 === a[1] && ! a[2]){
        var body$0 = param[2], cond = param[1];
        return [14, cond, body$0, patch];
       }
       break;
      case 20:
       var ev = param[2], lam$0 = param[1];
       return [20, patch_guarded(patch, lam$0), ev];
    }
    return fatal_error(cst_Lambda_patch_guarded);
   }
   function transl_address(loc, param){
    if(0 === param[0]){
     var id = param[1];
     return global(id) ? [8, [0, id], 0, loc] : [0, id];
    }
    var pos = param[2], addr = param[1];
    return [8, [3, pos], [0, transl_address(loc, addr), 0], loc];
   }
   function transl_path(find, loc, env, path){
    try{var addr = caml_call2(find, path, env);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var a = name$0(0, path);
     return fatal_error(Stdlib[28].call(null, cst_Cannot_find_address_for, a));
    }
    return transl_address(loc, addr);
   }
   function transl_module_path(loc, env, path){
    return transl_path(find_module_address, loc, env, path);
   }
   function transl_value_path(loc, env, path){
    return transl_path(find_value_address, loc, env, path);
   }
   function transl_extension_path(loc, env, path){
    return transl_path(find_constructor_address, loc, env, path);
   }
   function transl_class_path(loc, env, path){
    return transl_path(find_class_address, loc, env, path);
   }
   function transl_prim(mod_name, name){
    var
     pers = [2, mod_name],
     env = add_persistent_structure(pers, empty$7),
     lid = [1, [0, mod_name], name];
    try{var val = find_value_by_name(lid, env);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var a = Stdlib[28].call(null, name, cst_not_found);
     return fatal_error(Stdlib[28].call(null, cst_Primitive, a));
    }
    var path = val[1];
    return transl_path(find_value_address, 0, env, path);
   }
   function make_sequence(fn, param){
    if(! param) return lambda_unit;
    var x = param[1];
    if(! param[2]) return caml_call1(fn, x);
    var rem = param[2], lam = caml_call1(fn, x);
    return [15, lam, make_sequence(fn, rem)];
   }
   function subst(update_env, opt, s, input_lam){
    if(opt)
     var sth = opt[1], freshen_bound_variables = sth;
    else
     var freshen_bound_variables = 0;
    function bind(id, l){
     var id$0 = freshen_bound_variables ? rename(id) : id;
     return [0, id$0, caml_call3(Map$2[4], id, id$0, l)];
    }
    function bind_many(ids, l){
     return Stdlib_List[26].call
             (null,
              function(param, a){
               var
                l = a[2],
                ids = a[1],
                rhs = param[2],
                id = param[1],
                match = bind(id, l),
                l$0 = match[2],
                id$0 = match[1];
               return [0, [0, [0, id$0, rhs], ids], l$0];
              },
              ids,
              [0, 0, l]);
    }
    function subst(s, l, lam){
     switch(lam[0]){
       case 0:
        var id = lam[1];
        try{var id$0 = caml_call2(Map$2[28], id, l);}
        catch(exn$1){
         var exn = caml_wrap_exception(exn$1);
         if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
         try{var a = caml_call2(Map$2[28], id, s); return a;}
         catch(exn){
          var exn$0 = caml_wrap_exception(exn);
          if(exn$0 === Stdlib[8]) return lam;
          throw caml_maybe_attach_backtrace(exn$0, 0);
         }
        }
        return [0, id$0];
       case 1:
        var id$1 = lam[1];
        try{var id$2 = caml_call2(Map$2[28], id$1, l);}
        catch(exn){
         var exn$1 = caml_wrap_exception(exn);
         if(exn$1 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$1, 0);
         try{var b = caml_call2(Map$2[28], id$1, s); return b;}
         catch(exn){
          var exn$2 = caml_wrap_exception(exn);
          if(exn$2 === Stdlib[8]) return lam;
          throw caml_maybe_attach_backtrace(exn$2, 0);
         }
        }
        return [1, id$2];
       case 2:
        return lam;
       case 3:
        var
         ap = lam[1],
         c = ap[6],
         d = ap[5],
         f = ap[4],
         g = ap[3],
         h = subst_list(s, l, ap[2]);
        return [3, [0, subst(s, l, ap[1]), h, g, f, d, c]];
       case 4:
        var
         lf = lam[1],
         match = bind_many(lf[2], l),
         l$0 = match[2],
         params = match[1],
         j = lf[6],
         m = lf[5],
         n = subst(s, l$0, lf[4]);
        return [4, [0, lf[1], params, lf[3], n, m, j]];
       case 5:
        var
         body = lam[5],
         arg = lam[4],
         id$3 = lam[3],
         k = lam[2],
         str = lam[1],
         match$0 = bind(id$3, l),
         l$1 = match$0[2],
         id$4 = match$0[1],
         o = subst(s, l$1, body);
        return [5, str, k, id$4, subst(s, l, arg), o];
       case 6:
        var
         body$0 = lam[4],
         arg$0 = lam[3],
         id$5 = lam[2],
         k$0 = lam[1],
         match$1 = bind(id$5, l),
         l$2 = match$1[2],
         id$6 = match$1[1],
         q = subst(s, l$2, body$0);
        return [6, k$0, id$6, subst(s, l, arg$0), q];
       case 7:
        var
         body$1 = lam[2],
         decl = lam[1],
         match$2 = bind_many(decl, l),
         l$3 = match$2[2],
         decl$0 = match$2[1],
         r = subst(s, l$3, body$1);
        return [7,
                Stdlib_List[19].call
                 (null,
                  function(param){
                   var exp = param[2], id = param[1];
                   return [0, id, subst(s, l$3, exp)];
                  },
                  decl$0),
                r];
       case 8:
        var loc = lam[3], args = lam[2], p = lam[1];
        return [8, p, subst_list(s, l, args), loc];
       case 9:
        var
         loc$0 = lam[3],
         sw = lam[2],
         arg$1 = lam[1],
         t = subst_opt(s, l, sw[5]),
         u =
           Stdlib_List[19].call
            (null, function(a){return subst_case(s, l, a);}, sw[4]),
         w = sw[3],
         x =
           Stdlib_List[19].call
            (null, function(a){return subst_case(s, l, a);}, sw[2]),
         y = [0, sw[1], x, w, u, t];
        return [9, subst(s, l, arg$1), y, loc$0];
       case 10:
        var
         loc$1 = lam[4],
         default$ = lam[3],
         cases = lam[2],
         arg$2 = lam[1],
         z = subst_opt(s, l, default$),
         A =
           Stdlib_List[19].call
            (null,
             function(param){
              var case$ = param[2], key = param[1];
              return [0, key, subst(s, l, case$)];
             },
             cases);
        return [10, subst(s, l, arg$2), A, z, loc$1];
       case 11:
        var args$0 = lam[2], i = lam[1];
        return [11, i, subst_list(s, l, args$0)];
       case 12:
        var
         handler = lam[3],
         match$3 = lam[2],
         params$0 = match$3[2],
         id$7 = match$3[1],
         body$2 = lam[1],
         match$4 = bind_many(params$0, l),
         l$4 = match$4[2],
         params$1 = match$4[1],
         B = subst(s, l$4, handler);
        return [12, subst(s, l, body$2), [0, id$7, params$1], B];
       case 13:
        var
         handler$0 = lam[3],
         exn$3 = lam[2],
         body$3 = lam[1],
         match$5 = bind(exn$3, l),
         l$5 = match$5[2],
         exn$4 = match$5[1],
         C = subst(s, l$5, handler$0);
        return [13, subst(s, l, body$3), exn$4, C];
       case 14:
        var
         e3 = lam[3],
         e2 = lam[2],
         e1 = lam[1],
         D = subst(s, l, e3),
         E = subst(s, l, e2);
        return [14, subst(s, l, e1), E, D];
       case 15:
        var e2$0 = lam[2], e1$0 = lam[1], F = subst(s, l, e2$0);
        return [15, subst(s, l, e1$0), F];
       case 16:
        var e2$1 = lam[2], e1$1 = lam[1], G = subst(s, l, e2$1);
        return [16, subst(s, l, e1$1), G];
       case 17:
        var
         body$4 = lam[5],
         dir = lam[4],
         hi = lam[3],
         lo = lam[2],
         v = lam[1],
         match$6 = bind(v, l),
         l$6 = match$6[2],
         v$0 = match$6[1],
         H = subst(s, l$6, body$4),
         I = subst(s, l, hi);
        return [17, v$0, subst(s, l, lo), I, dir, H];
       case 18:
        var e = lam[2], id$8 = lam[1];
        if(caml_call2(Map$2[3], id$8, s))
         throw caml_maybe_attach_backtrace([0, Assert_failure, ia], 1);
        try{var J = caml_call2(Map$2[28], id$8, l), id$9 = J;}
        catch(exn){
         var exn$5 = caml_wrap_exception(exn);
         if(exn$5 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$5, 0);
         var id$9 = id$8;
        }
        return [18, id$9, subst(s, l, e)];
       case 19:
        var
         loc$2 = lam[5],
         args$1 = lam[4],
         obj = lam[3],
         met = lam[2],
         k$1 = lam[1],
         K = subst_list(s, l, args$1),
         L = subst(s, l, obj);
        return [19, k$1, subst(s, l, met), L, K, loc$2];
       case 20:
        var
         evt = lam[2],
         lam$0 = lam[1],
         old_env = evt[4],
         find_in_old = function(id){return find_value([0, id], old_env);},
         env_updates =
           caml_call3
            (Map$2[8],
             function(id, bound, free){
              if(! bound)
               return free
                       ? [0,
                         function(new_env){
                          try{var vd = find_in_old(id);}
                          catch(exn$0){
                           var exn = caml_wrap_exception(exn$0);
                           if(exn === Stdlib[8]) return new_env;
                           throw caml_maybe_attach_backtrace(exn, 0);
                          }
                          return caml_call3(update_env, id, vd, new_env);
                         }]
                       : 0;
              var id$0 = bound[1];
              return original_equal(id, id$0)
                      ? 0
                      : [0,
                        function(new_env){
                         try{var vd = find_in_old(id);}
                         catch(exn$0){
                          var exn = caml_wrap_exception(exn$0);
                          if(exn === Stdlib[8]) return new_env;
                          throw caml_maybe_attach_backtrace(exn, 0);
                         }
                         return add_value$1(0)(id$0, vd, new_env);
                        }];
             },
             l,
             s),
         new_env =
           caml_call3
            (Map$2[13],
             function(id, update, env){return caml_call1(update, env);},
             env_updates,
             old_env),
         M = [0, evt[1], evt[2], evt[3], new_env];
        return [20, subst(s, l, lam$0), M];
       default:
        var e$0 = lam[2], id$10 = lam[1];
        try{var N = caml_call2(Map$2[28], id$10, l), id$11 = N;}
        catch(exn){
         var exn$6 = caml_wrap_exception(exn);
         if(exn$6 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$6, 0);
         var id$11 = id$10;
        }
        return [21, id$11, subst(s, l, e$0)];
     }
    }
    function subst_list(s, l, li){
     return Stdlib_List[19].call
             (null, function(a){return subst(s, l, a);}, li);
    }
    function subst_case(s, l, param){
     var case$ = param[2], key = param[1];
     return [0, key, subst(s, l, case$)];
    }
    function subst_opt(s, l, param){
     if(! param) return 0;
     var e = param[1];
     return [0, subst(s, l, e)];
    }
    return subst(s, Map$2[1], input_lam);
   }
   function rename$0(idmap, lam){
    function update_env(oldid, vd, env){
     var newid = caml_call2(Map$2[28], oldid, idmap);
     return add_value$1(0)(newid, vd, env);
    }
    var
     s = caml_call2(Map$2[34], function(new_id){return [0, new_id];}, idmap);
    return subst(update_env, 0, s, lam);
   }
   function duplicate(lam){
    return subst(function(param, a, env){return env;}, ib, Map$2[1], lam);
   }
   function shallow_map(f, lam){
    switch(lam[0]){
      case 3:
       var
        match = lam[1],
        ap_specialised = match[6],
        ap_inlined = match[5],
        ap_tailcall = match[4],
        ap_loc = match[3],
        ap_args = match[2],
        ap_func = match[1],
        a = Stdlib_List[19].call(null, f, ap_args);
       return [3,
               [0,
                caml_call1(f, ap_func),
                a,
                ap_loc,
                ap_tailcall,
                ap_inlined,
                ap_specialised]];
      case 4:
       var
        match$0 = lam[1],
        loc = match$0[6],
        attr = match$0[5],
        body = match$0[4],
        return$ = match$0[3],
        params = match$0[2],
        kind = match$0[1];
       return [4, [0, kind, params, return$, caml_call1(f, body), attr, loc]];
      case 5:
       var
        e2 = lam[5],
        e1 = lam[4],
        v = lam[3],
        k = lam[2],
        str = lam[1],
        b = caml_call1(f, e2);
       return [5, str, k, v, caml_call1(f, e1), b];
      case 6:
       var
        e2$0 = lam[4],
        e1$0 = lam[3],
        v$0 = lam[2],
        k$0 = lam[1],
        c = caml_call1(f, e2$0);
       return [6, k$0, v$0, caml_call1(f, e1$0), c];
      case 7:
       var e2$1 = lam[2], idel = lam[1], d = caml_call1(f, e2$1);
       return [7,
               Stdlib_List[19].call
                (null,
                 function(param){
                  var e = param[2], v = param[1];
                  return [0, v, caml_call1(f, e)];
                 },
                 idel),
               d];
      case 8:
       var loc$0 = lam[3], el = lam[2], p = lam[1];
       return [8, p, Stdlib_List[19].call(null, f, el), loc$0];
      case 9:
       var
        loc$1 = lam[3],
        sw = lam[2],
        e = lam[1],
        g = Stdlib_Option[7].call(null, f, sw[5]),
        h =
          Stdlib_List[19].call
           (null,
            function(param){
             var e = param[2], n = param[1];
             return [0, n, caml_call1(f, e)];
            },
            sw[4]),
        j = sw[3],
        n =
          Stdlib_List[19].call
           (null,
            function(param){
             var e = param[2], n = param[1];
             return [0, n, caml_call1(f, e)];
            },
            sw[2]),
        q = [0, sw[1], n, j, h, g];
       return [9, caml_call1(f, e), q, loc$1];
      case 10:
       var
        loc$2 = lam[4],
        default$ = lam[3],
        sw$0 = lam[2],
        e$0 = lam[1],
        r = Stdlib_Option[7].call(null, f, default$),
        s =
          Stdlib_List[19].call
           (null,
            function(param){
             var e = param[2], s = param[1];
             return [0, s, caml_call1(f, e)];
            },
            sw$0);
       return [10, caml_call1(f, e$0), s, r, loc$2];
      case 11:
       var args = lam[2], i = lam[1];
       return [11, i, Stdlib_List[19].call(null, f, args)];
      case 12:
       var
        handler = lam[3],
        id = lam[2],
        body$0 = lam[1],
        t = caml_call1(f, handler);
       return [12, caml_call1(f, body$0), id, t];
      case 13:
       var
        e2$2 = lam[3],
        v$1 = lam[2],
        e1$1 = lam[1],
        u = caml_call1(f, e2$2);
       return [13, caml_call1(f, e1$1), v$1, u];
      case 14:
       var
        e3 = lam[3],
        e2$3 = lam[2],
        e1$2 = lam[1],
        w = caml_call1(f, e3),
        x = caml_call1(f, e2$3);
       return [14, caml_call1(f, e1$2), x, w];
      case 15:
       var e2$4 = lam[2], e1$3 = lam[1], y = caml_call1(f, e2$4);
       return [15, caml_call1(f, e1$3), y];
      case 16:
       var e2$5 = lam[2], e1$4 = lam[1], z = caml_call1(f, e2$5);
       return [16, caml_call1(f, e1$4), z];
      case 17:
       var
        e3$0 = lam[5],
        dir = lam[4],
        e2$6 = lam[3],
        e1$5 = lam[2],
        v$2 = lam[1],
        A = caml_call1(f, e3$0),
        B = caml_call1(f, e2$6);
       return [17, v$2, caml_call1(f, e1$5), B, dir, A];
      case 18:
       var e$1 = lam[2], v$3 = lam[1]; return [18, v$3, caml_call1(f, e$1)];
      case 19:
       var
        loc$3 = lam[5],
        el$0 = lam[4],
        o = lam[3],
        m = lam[2],
        k$1 = lam[1],
        C = Stdlib_List[19].call(null, f, el$0),
        D = caml_call1(f, o);
       return [19, k$1, caml_call1(f, m), D, C, loc$3];
      case 20:
       var ev = lam[2], l = lam[1]; return [20, caml_call1(f, l), ev];
      case 21:
       var e$2 = lam[2], v$4 = lam[1]; return [21, v$4, caml_call1(f, e$2)];
      default: return lam;
    }
   }
   function map$10(f){
    function g(lam){return caml_call1(f, shallow_map(g, lam));}
    return g;
   }
   function bind_with_value_kind(str, param, exp, body){
    var kind = param[2], var$ = param[1];
    if(0 === exp[0]){var var$0 = exp[1]; if(same(var$, var$0)) return body;}
    return [5, str, kind, var$, exp, body];
   }
   function bind(str, var$, exp, body){
    return bind_with_value_kind(str, [0, var$, 0], exp, body);
   }
   function negate_integer_comparison(param){
    switch(param){
      case 0:
       return 1;
      case 1:
       return 0;
      case 2:
       return 5;
      case 3:
       return 4;
      case 4:
       return 3;
      default: return 2;
    }
   }
   function swap_integer_comparison(param){
    switch(param){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 3;
      case 3:
       return 2;
      case 4:
       return 5;
      default: return 4;
    }
   }
   function negate_float_comparison(param){
    switch(param){
      case 0:
       return 1;
      case 1:
       return 0;
      case 2:
       return 3;
      case 3:
       return 2;
      case 4:
       return 5;
      case 5:
       return 4;
      case 6:
       return 7;
      case 7:
       return 6;
      case 8:
       return 9;
      default: return 8;
    }
   }
   function swap_float_comparison(param){
    switch(param){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 4;
      case 3:
       return 5;
      case 4:
       return 2;
      case 5:
       return 3;
      case 6:
       return 8;
      case 7:
       return 9;
      case 8:
       return 6;
      default: return 7;
    }
   }
   function raise_kind(param){
    switch(param){
      case 0:
       return cst_raise;
      case 1:
       return cst_reraise;
      default: return cst_raise_notrace;
    }
   }
   function merge_inline_attributes(attr1, attr2){
    if(typeof attr1 === "number" && 3 <= attr1) return [0, attr2];
    if(typeof attr2 === "number" && 3 <= attr2) return [0, attr1];
    return caml_equal(attr1, attr2) ? [0, attr1] : 0;
   }
   function function_is_curried(func){return func[1] ? 0 : 1;}
   function find_exact_application(kind, arity, args){
    if(! kind)
     return arity !== Stdlib_List[1].call(null, args) ? 0 : [0, args];
    if(args){
     var a = args[1];
     switch(a[0]){
       case 2:
        var b = a[1];
        if(1 === b[0] && ! args[2]){
         var const_args = b[2];
         return arity !== Stdlib_List[1].call(null, const_args)
                 ? 0
                 : [0,
                   Stdlib_List[19].call
                    (null, function(cst){return [2, cst];}, const_args)];
        }
        break;
       case 8:
        var c = a[1];
        if(typeof c !== "number" && 2 === c[0] && ! args[2]){
         var tupled_args = a[2];
         return arity !== Stdlib_List[1].call(null, tupled_args)
                 ? 0
                 : [0, tupled_args];
        }
        break;
     }
    }
    return 0;
   }
   function reset$4(param){raise_count[1] = 0; return 0;}
   var
    Dynlink_compilerlibs_Lambda =
      [0,
       equal_primitive,
       equal_value_kind,
       equal_boxed_integer,
       equal_inline_attribute,
       equal_specialise_attribute,
       equal_meth_kind,
       make_key,
       const_unit,
       const_int,
       lambda_unit,
       name_lambda,
       name_lambda_list,
       lfunction,
       iter_head_constructor,
       shallow_iter,
       transl_prim,
       free_variables,
       transl_module_path,
       transl_value_path,
       transl_extension_path,
       transl_class_path,
       make_sequence,
       subst,
       rename$0,
       duplicate,
       map$10,
       shallow_map,
       bind,
       bind_with_value_kind,
       negate_integer_comparison,
       swap_integer_comparison,
       negate_float_comparison,
       swap_float_comparison,
       default_function_attribute,
       default_stub_attribute,
       function_is_curried,
       find_exact_application,
       max_arity,
       next_raise_count,
       staticfail,
       is_guarded,
       patch_guarded,
       raise_kind,
       merge_inline_attributes,
       reset$4];
   caml_register_global
    (1319, Dynlink_compilerlibs_Lambda, "Dynlink_compilerlibs.Lambda");
   var
    builtin_exceptions = caml_obj_dup(ic),
    builtin_primitives = caml_obj_dup(ie),
    Dynlink_compilerlibs_Runtimede =
      [0, builtin_exceptions, builtin_primitives];
   caml_register_global
    (1320, Dynlink_compilerlibs_Runtimede, "Dynlink_compilerlibs.Runtimedef");
   var Dynlink_compilerlibs_Instruct = [0, -1073741824, 1073741823];
   caml_register_global
    (1321, Dynlink_compilerlibs_Instruct, "Dynlink_compilerlibs.Instruct");
   var
    Dynlink_compilerlibs_Opcodes =
      [0,
       0,
       1,
       2,
       3,
       4,
       5,
       6,
       7,
       8,
       9,
       10,
       11,
       12,
       13,
       14,
       15,
       16,
       17,
       18,
       19,
       20,
       21,
       22,
       23,
       24,
       25,
       26,
       27,
       28,
       29,
       30,
       31,
       32,
       33,
       34,
       35,
       36,
       37,
       38,
       39,
       40,
       41,
       42,
       43,
       44,
       45,
       46,
       47,
       48,
       49,
       50,
       51,
       52,
       53,
       54,
       55,
       56,
       57,
       58,
       59,
       60,
       61,
       62,
       63,
       64,
       65,
       66,
       67,
       68,
       69,
       70,
       71,
       72,
       73,
       74,
       75,
       76,
       77,
       78,
       79,
       80,
       81,
       82,
       83,
       84,
       85,
       86,
       87,
       88,
       89,
       90,
       91,
       92,
       93,
       94,
       95,
       96,
       97,
       98,
       99,
       100,
       101,
       102,
       103,
       104,
       105,
       106,
       107,
       108,
       109,
       110,
       111,
       112,
       113,
       114,
       115,
       116,
       117,
       118,
       119,
       120,
       121,
       122,
       123,
       124,
       125,
       126,
       127,
       128,
       129,
       130,
       131,
       132,
       133,
       134,
       135,
       136,
       137,
       138,
       139,
       140,
       141,
       142,
       143,
       144,
       145,
       146,
       147,
       148];
   caml_register_global
    (1322, Dynlink_compilerlibs_Opcodes, "Dynlink_compilerlibs.Opcodes");
   var section_table = [0, 0], section_beginning = [0, 0];
   function init_record(outchan){
    section_beginning[1] = Stdlib[74].call(null, outchan);
    section_table[1] = 0;
    return 0;
   }
   function record$2(outchan, name){
    var pos = Stdlib[74].call(null, outchan);
    section_table[1] =
     [0, [0, name, pos - section_beginning[1] | 0], section_table[1]];
    section_beginning[1] = pos;
    return 0;
   }
   function write_toc_and_trailer(outchan){
    var a = Stdlib_List[9].call(null, section_table[1]);
    Stdlib_List[17].call
     (null,
      function(param){
       var len = param[2], name = param[1];
       Stdlib[66].call(null, outchan, name);
       return Stdlib[71].call(null, outchan, len);
      },
      a);
    var b = Stdlib_List[1].call(null, section_table[1]);
    Stdlib[71].call(null, outchan, b);
    Stdlib[66].call(null, outchan, Dynlink_compilerlibs_Config[23]);
    section_table[1] = 0;
    return 0;
   }
   var
    Bad_magic_number =
      [248, cst_Dynlink_compilerlibs_Bytes, caml_fresh_oo_id(0)];
   function read_toc(ic){
    var pos_trailer = Stdlib[92].call(null, ic) - 16 | 0;
    Stdlib[90].call(null, ic, pos_trailer);
    var
     num_sections = Stdlib[88].call(null, ic),
     header =
       Stdlib[86].call
        (null, ic, caml_ml_string_length(Dynlink_compilerlibs_Config[23]));
    if(header !== Dynlink_compilerlibs_Config[23])
     throw caml_maybe_attach_backtrace(Bad_magic_number, 1);
    Stdlib[90].call(null, ic, pos_trailer - (8 * num_sections | 0) | 0);
    section_table[1] = 0;
    var a = 1;
    if(num_sections >= 1){
     var i = a;
     for(;;){
      var
       name = Stdlib[86].call(null, ic, 4),
       len = Stdlib[88].call(null, ic);
      section_table[1] = [0, [0, name, len], section_table[1]];
      var b = i + 1 | 0;
      if(num_sections === i) break;
      i = b;
     }
    }
    return 0;
   }
   function toc(param){return Stdlib_List[9].call(null, section_table[1]);}
   function seek_section(ic, name){
    var
     param$0 = section_table[1],
     a = 8 * Stdlib_List[1].call(null, section_table[1]) | 0,
     curr_ofs$1 = (Stdlib[92].call(null, ic) - 16 | 0) - a | 0,
     curr_ofs = curr_ofs$1,
     param = param$0;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var rem = param[2], match = param[1], len = match[2], n = match[1];
     if(n === name){
      Stdlib[90].call(null, ic, curr_ofs - len | 0);
      return len;
     }
     var curr_ofs$0 = curr_ofs - len | 0;
     curr_ofs = curr_ofs$0;
     param = rem;
    }
   }
   function read_section_string(ic, name){
    var a = seek_section(ic, name);
    return Stdlib[86].call(null, ic, a);
   }
   function read_section_struct(ic, name){
    seek_section(ic, name);
    return Stdlib[89].call(null, ic);
   }
   function pos_first_section(ic){
    var
     a =
       Stdlib_List[25].call
        (null,
         function(total, param){var len = param[2]; return total + len | 0;},
         0,
         section_table[1]),
     b = 8 * Stdlib_List[1].call(null, section_table[1]) | 0;
    return ((Stdlib[92].call(null, ic) - 16 | 0) - b | 0) - a | 0;
   }
   function reset$5(param){
    section_table[1] = 0;
    section_beginning[1] = 0;
    return 0;
   }
   var
    Dynlink_compilerlibs_Bytesecti =
      [0,
       init_record,
       record$2,
       write_toc_and_trailer,
       read_toc,
       Bad_magic_number,
       toc,
       seek_section,
       read_section_string,
       read_section_struct,
       pos_first_section,
       reset$5];
   caml_register_global
    (1323,
     Dynlink_compilerlibs_Bytesecti,
     "Dynlink_compilerlibs.Bytesections");
   var search_path = [0, 0];
   function dll_close(param){
    if(0 === param[0]) return 0;
    var dll = param[1];
    return runtime.caml_dynlink_close_lib(dll);
   }
   var opened_dlls = [0, 0], names_of_opened_dlls = [0, 0];
   function add_path(dirs){
    search_path[1] = Stdlib[37].call(null, dirs, search_path[1]);
    return 0;
   }
   function remove_path(dirs){
    var a = search_path[1];
    search_path[1] =
     Stdlib_List[41].call
       (null, function(d){return 1 - Stdlib_List[36].call(null, d, dirs);})
      (a);
    return 0;
   }
   function extract_dll_name(file){
    if(Stdlib_Filename[7].call(null, file, Dynlink_compilerlibs_Config[48]))
     return Stdlib_Filename[8].call
             (null, file, Dynlink_compilerlibs_Config[48]);
    if
     (2 <= caml_ml_string_length(file)
      && Stdlib_String[15].call(null, file, 0, 2) === "-l"){
     var
      a =
        Stdlib_String[15].call
         (null, file, 2, caml_ml_string_length(file) - 2 | 0);
     return Stdlib[28].call(null, cst_dll, a);
    }
    return file;
   }
   function open_dlls(mode, names){
    return Stdlib_List[17].call
            (null,
             function(name$0){
              var
               name =
                 Stdlib[28].call
                  (null, name$0, Dynlink_compilerlibs_Config[48]);
              try{
               var
                fullname$0 = find_in_path(search_path[1], name),
                h =
                  Stdlib_Filename[6].call(null, fullname$0)
                   ? Stdlib_Filename
                      [4].call
                     (null, Stdlib_Filename[1], fullname$0)
                   : fullname$0,
                fullname = h;
              }
              catch(exn$0){
               var exn = caml_wrap_exception(exn$0);
               if(exn !== Stdlib[8])
                throw caml_maybe_attach_backtrace(exn, 0);
               var fullname = name;
              }
              var
               a =
                 1
                 -
                  Stdlib_List[36].call
                   (null, fullname, names_of_opened_dlls[1]);
              if(a){
               a:
               if(mode){
                try{var dll$0 = runtime.caml_dynlink_open_lib(mode, fullname);
                }
                catch(exn){
                 var exn$0 = caml_wrap_exception(exn), tag = exn$0[1];
                 if(tag !== Stdlib[7])
                  throw caml_maybe_attach_backtrace(exn$0, 0);
                 var
                  msg = exn$0[2],
                  c = Stdlib[28].call(null, cst$108, msg),
                  d = Stdlib[28].call(null, fullname, c),
                  dll = Stdlib[2].call(null, d);
                 break a;
                }
                var dll = [1, dll$0];
               }
               else{
                var match = read(fullname);
                if(0 === match[0])
                 var t = match[1], dll = [0, t];
                else
                 var
                  err = match[1],
                  e = error_to_string(err),
                  f = Stdlib[28].call(null, cst$109, e),
                  g = Stdlib[28].call(null, fullname, f),
                  dll = Stdlib[2].call(null, g);
               }
               names_of_opened_dlls[1] =
                [0, fullname, names_of_opened_dlls[1]];
               opened_dlls[1] = [0, dll, opened_dlls[1]];
               var b = 0;
              }
              else
               var b = a;
              return b;
             },
             names);
   }
   function close_all_dlls(param){
    Stdlib_List[17].call(null, dll_close, opened_dlls[1]);
    opened_dlls[1] = 0;
    names_of_opened_dlls[1] = 0;
    return 0;
   }
   function find_primitive(prim_name){
    var seen = 0, param = opened_dlls[1];
    for(;;){
     if(! param) return 0;
     var curr = param[1];
     if(0 === curr[0]){
      var rem = param[2], t = curr[1];
      if(defines_symbol$0(t, prim_name)) return ig;
      var seen$0 = [0, curr, seen];
      seen = seen$0;
      param = rem;
     }
     else{
      var
       rem$0 = param[2],
       dll = curr[1],
       addr = runtime.caml_dynlink_lookup_symbol(dll, prim_name);
      if(0 !== addr){
       if(0 !== seen)
        opened_dlls[1] = [0, curr, Stdlib_List[12].call(null, seen, rem$0)];
       return [0, [0, addr]];
      }
      var seen$1 = [0, curr, seen];
      seen = seen$1;
      param = rem$0;
     }
    }
   }
   var linking_in_core = [0, 0];
   function synchronize_primitive(num, symb){
    var a = linking_in_core[1];
    if(! a) return a;
    var actual_num = runtime.caml_dynlink_add_primitive(symb);
    if(actual_num === num) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, ih], 1);
   }
   function ld_conf_contents(param){
    var path = [0, 0];
    try{
     var
      a =
        Stdlib_Filename[4].call
         (null, Dynlink_compilerlibs_Config[3], cst_ld_conf),
      ic = Stdlib[79].call(null, a);
     try{
      for(;;){var b = path[1]; path[1] = [0, Stdlib[83].call(null, ic), b];}
     }
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      if(exn$0 !== Stdlib[12]) throw caml_maybe_attach_backtrace(exn$0, 0);
      Stdlib[93].call(null, ic);
     }
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Stdlib[11]) throw caml_maybe_attach_backtrace(exn, 0);
    }
    return Stdlib_List[9].call(null, path[1]);
   }
   function ld_library_path_contents(param){
    try{var s = caml_sys_getenv("CAML_LD_LIBRARY_PATH");}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return split_path_contents(0, s);
   }
   function init_compile(nostdlib){
    var
     a = nostdlib ? 0 : ld_conf_contents(0),
     b = ld_library_path_contents(0);
    search_path[1] = Stdlib[37].call(null, b, a);
    return 0;
   }
   function init_toplevel(dllpath){
    var
     b = ld_conf_contents(0),
     a = split_path_contents(ii, dllpath),
     c = Stdlib[37].call(null, a, b),
     d = ld_library_path_contents(0);
    search_path[1] = Stdlib[37].call(null, d, c);
    var
     e = runtime.caml_dynlink_get_current_libs(0),
     f = Stdlib_Array[11].call(null, e);
    opened_dlls[1] =
     Stdlib_List[19].call(null, function(dll){return [1, dll];}, f);
    names_of_opened_dlls[1] = 0;
    linking_in_core[1] = 1;
    return 0;
   }
   function reset$6(param){
    search_path[1] = 0;
    opened_dlls[1] = 0;
    names_of_opened_dlls[1] = 0;
    linking_in_core[1] = 0;
    return 0;
   }
   var
    Dynlink_compilerlibs_Dll =
      [0,
       extract_dll_name,
       open_dlls,
       close_all_dlls,
       find_primitive,
       synchronize_primitive,
       add_path,
       remove_path,
       init_compile,
       init_toplevel,
       reset$6];
   caml_register_global
    (1324, Dynlink_compilerlibs_Dll, "Dynlink_compilerlibs.Dll");
   var Dynlink_compilerlibs_Meta = [0];
   caml_register_global
    (1325, Dynlink_compilerlibs_Meta, "Dynlink_compilerlibs.Meta");
   var Error$7 = [248, cst_Dynlink_compilerlibs_Symta, caml_fresh_oo_id(0)];
   function Num_tbl(M){
    var empty = [0, 0, M[1]];
    function find(nt, key){return caml_call2(M[28], key, nt[2]);}
    function enter(nt, key){
     var n = nt[1][1];
     nt[1] = [0, n + 1 | 0, caml_call3(M[4], key, n, nt[1][2])];
     return n;
    }
    function incr(nt){
     var n = nt[1][1];
     nt[1] = [0, n + 1 | 0, nt[1][2]];
     return n;
    }
    return [0, empty, find, enter, incr];
   }
   var
    GlobalMap =
      Num_tbl
       ([0,
         Map$2[1],
         Map$2[2],
         Map$2[3],
         Map$2[4],
         Map$2[5],
         Map$2[6],
         Map$2[7],
         Map$2[8],
         Map$2[9],
         Map$2[10],
         Map$2[11],
         Map$2[12],
         Map$2[13],
         Map$2[14],
         Map$2[15],
         Map$2[16],
         Map$2[17],
         Map$2[18],
         Map$2[19],
         Map$2[20],
         Map$2[21],
         Map$2[22],
         Map$2[23],
         Map$2[24],
         Map$2[25],
         Map$2[26],
         Map$2[27],
         Map$2[28],
         Map$2[29],
         Map$2[30],
         Map$2[31],
         Map$2[32],
         Map$2[33],
         Map$2[34],
         Map$2[35],
         Map$2[36],
         Map$2[37],
         Map$2[38],
         Map$2[39],
         Map$2[40]]),
    PrimMap = Num_tbl(a[4][69]),
    global_table = [0, GlobalMap[1]],
    literal_table = [0, 0];
   function is_global_defined(id){
    return caml_call2(Map$2[3], id, global_table[1][2]);
   }
   function slot_for_getglobal(id){
    try{var a = GlobalMap[2].call(null, global_table[1], id); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var name = id[1];
     throw caml_maybe_attach_backtrace([0, Error$7, [0, name]], 1);
    }
   }
   function slot_for_setglobal(id){
    return GlobalMap[3].call(null, global_table, id);
   }
   var c_prim_table = [0, PrimMap[1]];
   function set_prim_table(name){
    PrimMap[3].call(null, c_prim_table, name);
    return 0;
   }
   function of_prim(name){
    try{var a = PrimMap[2].call(null, c_prim_table[1], name); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     if
      (!
       custom_runtime[1]
       &&
        Dynlink_compilerlibs_Config[53] === Dynlink_compilerlibs_Config[54]
        && ! no_check_prims[1]){
      var match = find_primitive(name);
      if(! match)
       throw caml_maybe_attach_backtrace([0, Error$7, [1, name]], 1);
      var match$0 = match[1];
      if(! match$0) return PrimMap[3].call(null, c_prim_table, name);
      var symb = match$0[1], num = PrimMap[3].call(null, c_prim_table, name);
      synchronize_primitive(num, symb);
      return num;
     }
     return PrimMap[3].call(null, c_prim_table, name);
    }
   }
   function require_primitive(name){
    var
     a = 37 !== caml_string_get(name, 0) ? 1 : 0,
     b = a ? (of_prim(name), 0) : a;
    return b;
   }
   function all_primitives(param){
    var prim = caml_make_vect(c_prim_table[1][1], cst$115);
    caml_call2
     (a[4][69][12],
      function(name, number){
       caml_check_bound(prim, number)[number + 1] = name;
       return 0;
      },
      c_prim_table[1][2]);
    return prim;
   }
   function data_primitive_names(param){
    var
     prim = all_primitives(0),
     b = Stdlib_Buffer[1].call(null, 512),
     a = prim.length - 2 | 0,
     c = 0;
    if(a >= 0){
     var i = c;
     for(;;){
      var d = caml_check_bound(prim, i)[i + 1];
      Stdlib_Buffer[16].call(null, b, d);
      Stdlib_Buffer[12].call(null, b, 0);
      var e = i + 1 | 0;
      if(a === i) break;
      i = e;
     }
    }
    return Stdlib_Buffer[2].call(null, b);
   }
   function output_primitive_names(outchan){
    var a = data_primitive_names(0);
    return Stdlib[66].call(null, outchan, a);
   }
   function output_primitive_table(outchan){
    var prim = all_primitives(0), a = prim.length - 2 | 0, d = 0;
    if(a >= 0){
     var i$1 = d;
     for(;;){
      var l = caml_check_bound(prim, i$1)[i$1 + 1];
      caml_call1(Stdlib_Printf[1].call(null, outchan, ir), l);
      var m = i$1 + 1 | 0;
      if(a === i$1) break;
      i$1 = m;
     }
    }
    Stdlib_Printf[1].call(null, outchan, ij);
    Stdlib_Printf[1].call(null, outchan, ik);
    var b = prim.length - 2 | 0, e = 0;
    if(b >= 0){
     var i$0 = e;
     for(;;){
      var j = caml_check_bound(prim, i$0)[i$0 + 1];
      caml_call1(Stdlib_Printf[1].call(null, outchan, iq), j);
      var k = i$0 + 1 | 0;
      if(b === i$0) break;
      i$0 = k;
     }
    }
    Stdlib_Printf[1].call(null, outchan, il);
    Stdlib_Printf[1].call(null, outchan, im);
    var c = prim.length - 2 | 0, f = 0;
    if(c >= 0){
     var i = f;
     for(;;){
      var g = caml_check_bound(prim, i)[i + 1];
      caml_call1(Stdlib_Printf[1].call(null, outchan, ip), g);
      var h = i + 1 | 0;
      if(c === i) break;
      i = h;
     }
    }
    return Stdlib_Printf[1].call(null, outchan, io);
   }
   function init$4(param){
    Stdlib_Array[14].call
     (null,
      function(i, name){
       try{var a = Stdlib_List[46].call(null, name, builtin_values), id = a;}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
        var id = fatal_error(cst_Symtable_init);
       }
       var
        c = slot_for_setglobal(id),
        cst =
          [1,
           Stdlib_Obj[8],
           [0, [0, [2, name, none, 0]], [0, [0, [0, (- i | 0) - 1 | 0]], 0]]];
       literal_table[1] = [0, [0, c, cst], literal_table[1]];
       return 0;
      },
      builtin_exceptions);
    function set_prim_table_from_file(primfile){
     var ic = Stdlib[79].call(null, primfile);
     return try_finally
             ([0, function(param){return Stdlib[93].call(null, ic);}],
              0,
              function(param){
               try{for(;;) set_prim_table(Stdlib[83].call(null, ic));}
               catch(exn$0){
                var exn = caml_wrap_exception(exn$0);
                if(exn === Stdlib[12]) return 0;
                throw caml_maybe_attach_backtrace(exn, 0);
               }
              });
    }
    if(0 < caml_ml_string_length(use_prims[1]))
     return set_prim_table_from_file(use_prims[1]);
    if(0 >= caml_ml_string_length(use_runtime[1]))
     return Stdlib_Array[13].call(null, set_prim_table, builtin_primitives);
    var primfile = Stdlib_Filename[16].call(null, 0, cst_camlprims, cst$110);
    return try_finally
            ([0, function(param){return remove_file(primfile);}],
             0,
             function(param){
              var a = use_runtime[1];
              if
               (0
                !==
                 runtime.caml_sys_system_command
                  (caml_call2(Stdlib_Printf[4].call(null, it), a, primfile)))
               throw caml_maybe_attach_backtrace
                      ([0, Error$7, [2, use_runtime[1]]], 1);
              return set_prim_table_from_file(primfile);
             });
   }
   function patch_int(buff, pos, n){
    set(buff, pos, n);
    set(buff, pos + 1 | 0, n >> 8);
    set(buff, pos + 2 | 0, n >> 16);
    return set(buff, pos + 3 | 0, n >> 24);
   }
   function patch_object(buff, patchlist){
    return Stdlib_List[17].call
            (null,
             function(param){
              var match = param[1];
              switch(match[0]){
                case 0:
                 var
                  pos = param[2],
                  cst = match[1],
                  n = GlobalMap[4].call(null, global_table);
                 literal_table[1] = [0, [0, n, cst], literal_table[1]];
                 return patch_int(buff, pos, n);
                case 1:
                 var pos$0 = param[2], id = match[1];
                 return patch_int(buff, pos$0, slot_for_getglobal(id));
                case 2:
                 var pos$1 = param[2], id$0 = match[1];
                 return patch_int(buff, pos$1, slot_for_setglobal(id$0));
                default:
                 var pos$2 = param[2], name = match[1];
                 return patch_int(buff, pos$2, of_prim(name));
              }
             },
             patchlist);
   }
   function transl_const(param){
    switch(param[0]){
      case 0:
       var match = param[1];
       if(3 === match[0]){var f = match[1]; return caml_float_of_string(f);}
       var i = match[1];
       return i;
      case 1:
       var
        fields = param[2],
        tag = param[1],
        block = runtime.caml_obj_block(tag, Stdlib_List[1].call(null, fields)),
        pos = [0, 0];
       Stdlib_List[17].call
        (null,
         function(c){
          var a = transl_const(c);
          block[pos[1] + 1] = a;
          pos[1]++;
          return 0;
         },
         fields);
       return block;
      case 2:
       var
        fields$0 = param[1],
        res =
          runtime.caml_floatarray_create(Stdlib_List[1].call(null, fields$0));
       Stdlib_List[18].call
        (null,
         function(i, f){
          var a = caml_float_of_string(f);
          caml_check_bound(res, i)[i + 1] = a;
          return 0;
         },
         fields$0);
       return res;
      default: var s = param[1]; return s;
    }
   }
   function initial_global_table(param){
    var glob = caml_make_vect(global_table[1][1], 0);
    Stdlib_List[17].call
     (null,
      function(param){
       var cst = param[2], slot = param[1], a = transl_const(cst);
       caml_check_bound(glob, slot)[slot + 1] = a;
       return 0;
      },
      literal_table[1]);
    literal_table[1] = 0;
    return glob;
   }
   function output_global_map(oc){
    return Stdlib[72].call(null, oc, global_table[1]);
   }
   function data_global_map(param){return global_table[1];}
   function update_global_table(param){
    var ng = global_table[1][1];
    if(caml_get_global_data(0).length - 1 < ng)
     runtime.caml_realloc_global(ng);
    var glob = caml_get_global_data(0);
    Stdlib_List[17].call
     (null,
      function(param){
       var cst = param[2], slot = param[1], a = transl_const(cst);
       caml_check_bound(glob, slot)[slot + 1] = a;
       return 0;
      },
      literal_table[1]);
    literal_table[1] = 0;
    return 0;
   }
   function init_toplevel$0(param){
    try{
     try{
      var
       sections = runtime.caml_get_section_table(0),
       b =
         [0,
          function(name){return Stdlib_List[46].call(null, name, sections);},
          function(name){return Stdlib_List[46].call(null, name, sections);},
          function(param){}],
       sect = b;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var ic = Stdlib[80].call(null, Stdlib_Sys[1]);
      read_toc(ic);
      var
       sect =
         [0,
          function(a){return read_section_string(ic, a);},
          function(a){return read_section_struct(ic, a);},
          function(param){return Stdlib[93].call(null, ic);}];
     }
     global_table[1] = sect[2].call(null, cst_SYMB);
     var prims = sect[1].call(null, cst_PRIM);
     c_prim_table[1] = PrimMap[1];
     var pos = [0, 0];
     for(;;){
      if(pos[1] >= caml_ml_string_length(prims)) break;
      var i = caml_call3(a[4][30], prims, pos[1], 0);
      set_prim_table(caml_call3(a[4][15], prims, pos[1], i - pos[1] | 0));
      pos[1] = i + 1 | 0;
     }
     try{var d = sect[1].call(null, cst_DLPT), dllpath = d;}
     catch(exn){
      var exn$1 = caml_wrap_exception(exn);
      if(exn$1 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$1, 0);
      var dllpath = cst$111;
     }
     init_toplevel(dllpath);
     try{var c = sect[2].call(null, cst_CRCS), crcintfs = c;}
     catch(exn){
      var exn$2 = caml_wrap_exception(exn);
      if(exn$2 !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn$2, 0);
      var crcintfs = 0;
     }
     sect[3].call(null, 0);
     return crcintfs;
    }
    catch(exn){
     var exn$0 = caml_wrap_exception(exn);
     if
      (exn$0 !== Bad_magic_number
       && exn$0 !== Stdlib[8] && exn$0[1] !== Stdlib[7])
      throw caml_maybe_attach_backtrace(exn$0, 0);
     return fatal_error(cst_Toplevel_bytecode_executab);
    }
   }
   function get_global_position(id){return slot_for_getglobal(id);}
   function get_global_value(id){
    var a = slot_for_getglobal(id);
    return caml_check_bound(caml_get_global_data(0), a)[a + 1];
   }
   function assign_global_value(id, v){
    var a = slot_for_getglobal(id);
    caml_check_bound(caml_get_global_data(0), a)[a + 1] = v;
    return 0;
   }
   function defined_globals(patchlist){
    return Stdlib_List[25].call
            (null,
             function(accu, rel){
              var match = rel[1];
              if(2 !== match[0]) return accu;
              var id = match[1];
              return [0, id, accu];
             },
             0,
             patchlist);
   }
   function required_globals$0(patchlist){
    return Stdlib_List[25].call
            (null,
             function(accu, rel){
              var match = rel[1];
              if(1 !== match[0]) return accu;
              var id = match[1];
              return [0, id, accu];
             },
             0,
             patchlist);
   }
   function check_global_initialized(patchlist){
    var defined_globals$0 = defined_globals(patchlist);
    function check_reference(param){
     var match = param[1];
     if(1 !== match[0]) return 0;
     var
      id = match[1],
      a = 1 - Stdlib_List[36].call(null, id, defined_globals$0),
      b = a ? typeof get_global_value(id) === "number" ? 1 : 0 : a;
     if(! b) return b;
     var name = id[1];
     throw caml_maybe_attach_backtrace([0, Error$7, [3, name]], 1);
    }
    return Stdlib_List[17].call(null, check_reference, patchlist);
   }
   function current_state(param){return global_table[1];}
   function restore_state(st){global_table[1] = st; return 0;}
   function hide_additions(st){
    if(global_table[1][1] < st[1]) fatal_error(cst_Symtable_hide_additions);
    global_table[1] = [0, global_table[1][1], st[2]];
    return 0;
   }
   function filter_global_map(p, gmap){
    var newtbl = [0, Map$2[1]];
    caml_call2
     (Map$2[12],
      function(id, num){
       var
        a = caml_call1(p, id),
        b = a ? (newtbl[1] = caml_call3(Map$2[4], id, num, newtbl[1]), 0) : a;
       return b;
      },
      gmap[2]);
    return [0, gmap[1], newtbl[1]];
   }
   function iter_global_map(f, gmap){
    return caml_call2(Map$2[12], f, gmap[2]);
   }
   function is_defined_in_global_map(gmap, id){return caml_call2(Map$2[3], id, gmap[2]);
   }
   var empty_global_map = GlobalMap[1];
   function report_error$4(ppf, param){
    switch(param[0]){
      case 0:
       var s = param[1];
       return caml_call1(Stdlib_Format[129].call(null, ppf)(iu), s);
      case 1:
       var s$0 = param[1];
       return caml_call1(Stdlib_Format[129].call(null, ppf)(iv), s$0);
      case 2:
       var s$1 = param[1];
       return caml_call1(Stdlib_Format[129].call(null, ppf)(iw), s$1);
      default:
       var s$2 = param[1];
       return caml_call1(Stdlib_Format[129].call(null, ppf)(ix), s$2);
    }
   }
   register_error_of_exn
    (function(param){
      var tag = param[1];
      if(tag !== Error$7) return 0;
      var err = param[2];
      return [0, error_of_printer_file(report_error$4, err)];
     });
   function reset$7(param){
    global_table[1] = GlobalMap[1];
    literal_table[1] = 0;
    c_prim_table[1] = PrimMap[1];
    return 0;
   }
   var
    Dynlink_compilerlibs_Symtable =
      [0,
       init$4,
       patch_object,
       require_primitive,
       initial_global_table,
       output_global_map,
       output_primitive_names,
       output_primitive_table,
       data_global_map,
       data_primitive_names,
       transl_const,
       init_toplevel$0,
       update_global_table,
       get_global_value,
       is_global_defined,
       assign_global_value,
       get_global_position,
       check_global_initialized,
       defined_globals,
       required_globals$0,
       empty_global_map,
       current_state,
       restore_state,
       hide_additions,
       filter_global_map,
       iter_global_map,
       is_defined_in_global_map,
       Error$7,
       report_error$4,
       reset$7];
   caml_register_global
    (1327, Dynlink_compilerlibs_Symtable, "Dynlink_compilerlibs.Symtable");
   var Dynlink_compilerlibs_Asttypes = [0];
   caml_register_global
    (1328, Dynlink_compilerlibs_Asttypes, "Dynlink_compilerlibs.Asttypes");
   var Dynlink_compilerlibs_Parsetree = [0];
   caml_register_global
    (1329, Dynlink_compilerlibs_Parsetree, "Dynlink_compilerlibs.Parsetree");
   var Dynlink_compilerlibs_Outcometr = [0];
   caml_register_global
    (1330, Dynlink_compilerlibs_Outcometr, "Dynlink_compilerlibs.Outcometree");
   var Dynlink_compilerlibs_Cmo_forma = [0];
   caml_register_global
    (1331, Dynlink_compilerlibs_Cmo_forma, "Dynlink_compilerlibs.Cmo_format");
   var Dynlink_compilerlibs_Cmxs_form = [0];
   caml_register_global
    (1332, Dynlink_compilerlibs_Cmxs_form, "Dynlink_compilerlibs.Cmxs_format");
   var
    Dynlink_compilerlibs =
      [0,
       Dynlink_compilerlibs_Binutils,
       Dynlink_compilerlibs_Config,
       Dynlink_compilerlibs_Build_pat,
       Dynlink_compilerlibs_Misc,
       Dynlink_compilerlibs_Identifia,
       Dynlink_compilerlibs_Numbers,
       Dynlink_compilerlibs_Arg_helpe,
       Dynlink_compilerlibs_Clflags,
       Dynlink_compilerlibs_Profile,
       Dynlink_compilerlibs_Consistbl,
       Dynlink_compilerlibs_Terminfo,
       Dynlink_compilerlibs_Warnings,
       Dynlink_compilerlibs_Local_sto,
       Dynlink_compilerlibs_Load_path,
       Dynlink_compilerlibs_Int_repla,
       Dynlink_compilerlibs_Lazy_back,
       Dynlink_compilerlibs_Location,
       Dynlink_compilerlibs_Longident,
       Dynlink_compilerlibs_Docstring,
       Dynlink_compilerlibs_Syntaxerr,
       Dynlink_compilerlibs_Ast_helpe,
       Dynlink_compilerlibs_Ast_mappe,
       Dynlink_compilerlibs_Attr_help,
       Dynlink_compilerlibs_Builtin_a,
       Dynlink_compilerlibs_Ident,
       Dynlink_compilerlibs_Path,
       Dynlink_compilerlibs_Primitive,
       Dynlink_compilerlibs_Type_imme,
       Dynlink_compilerlibs_Shape,
       Dynlink_compilerlibs_Types,
       Dynlink_compilerlibs_Btype,
       Dynlink_compilerlibs_Subst,
       Dynlink_compilerlibs_Predef,
       Dynlink_compilerlibs_Datarepr,
       Dynlink_compilerlibs_Cmi_forma,
       Dynlink_compilerlibs_Persisten,
       Dynlink_compilerlibs_Env,
       Dynlink_compilerlibs_Debuginfo,
       Dynlink_compilerlibs_Lambda,
       Dynlink_compilerlibs_Runtimede,
       Dynlink_compilerlibs_Instruct,
       Dynlink_compilerlibs_Opcodes,
       Dynlink_compilerlibs_Bytesecti,
       Dynlink_compilerlibs_Dll,
       Dynlink_compilerlibs_Meta,
       Dynlink_compilerlibs_Symtable,
       Dynlink_compilerlibs_Asttypes,
       Dynlink_compilerlibs_Parsetree,
       Dynlink_compilerlibs_Outcometr,
       Dynlink_compilerlibs_Cmo_forma,
       Dynlink_compilerlibs_Cmxs_form];
   caml_register_global(1333, Dynlink_compilerlibs, "Dynlink_compilerlibs");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dynlink_types
//# unitInfo: Requires: Stdlib, Stdlib__Printexc, Stdlib__Printf
//# shape: Dynlink_types:[N,F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = ".\n",
    cst_Linking_error = "Linking_error (",
    cst_The_module$1 = "The module `",
    cst_error_while_linking$2 = "error while linking ";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "'",
    cst$0 = cst$3,
    cst$1 = cst$3,
    cst$2 = cst$3,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib,
    Error = [248, "Dynlink_types.Error", runtime.caml_fresh_oo_id(0)],
    cst_this_object_file_uses_unsa = "this object file uses unsafe features",
    cst_is_not_an_object_file = " is not an object file",
    cst_interface_mismatch_on = "interface mismatch on ",
    cst_no_implementation_availabl = "no implementation available for ",
    cst_Reference_to_undefined_glo = "Reference to undefined global `",
    cst_error_while_linking = cst_error_while_linking$2,
    cst_is_not_available = "' is not available",
    cst_The_external_function = "The external function `",
    cst_error_while_linking$0 = cst_error_while_linking$2,
    cst_is_not_yet_initialized = "' is not yet initialized",
    cst_The_module = cst_The_module$1,
    cst_error_while_linking$1 = cst_error_while_linking$2,
    cst_corrupted_interface_file = "corrupted interface file ",
    cst_error_loading_shared_libra = "error loading shared library: ",
    cst_execution_of_module_initia =
      "execution of module initializers in the shared library failed: ",
    cst_implementation_mismatch_on = "implementation mismatch on ",
    cst_is_already_loaded_either_b =
      "' is already loaded (either by the main program or a previously-dynlinked library)",
    cst_The_module$0 = cst_The_module$1,
    cst_cannot_be_implemented_by_a =
      "' cannot be implemented by a library loaded privately",
    cst_The_interface = "The interface `",
    cst_Unsafe_file = "Unsafe_file",
    a =
      [0,
       [11, "Dynlink.Error (Dynlink.", [2, 0, [12, 41, 0]]],
       "Dynlink.Error (Dynlink.%s)"],
    b = [0, [11, "Not_a_bytecode_file ", [3, 0, 0]], "Not_a_bytecode_file %S"],
    c = [0, [11, "Inconsistent_import ", [3, 0, 0]], "Inconsistent_import %S"],
    d = [0, [11, "Unavailable_unit ", [3, 0, 0]], "Unavailable_unit %S"],
    e =
      [0,
       [11,
        cst_Linking_error,
        [3, 0, [11, ", Dynlink.Undefined_global ", [3, 0, [12, 41, 0]]]]],
       "Linking_error (%S, Dynlink.Undefined_global %S)"],
    f =
      [0,
       [11,
        cst_Linking_error,
        [3, 0, [11, ", Dynlink.Unavailable_primitive ", [3, 0, [12, 41, 0]]]]],
       "Linking_error (%S, Dynlink.Unavailable_primitive %S)"],
    g =
      [0,
       [11,
        cst_Linking_error,
        [3, 0, [11, ", Dynlink.Uninitialized_global ", [3, 0, [12, 41, 0]]]]],
       "Linking_error (%S, Dynlink.Uninitialized_global %S)"],
    h = [0, [11, "Corrupted_interface ", [3, 0, 0]], "Corrupted_interface %S"],
    i = [0, [11, "Cannot_open_dll ", [3, 0, 0]], "Cannot_open_dll %S"],
    j =
      [0,
       [11, "Library's_module_initializers_failed ", [3, 0, 0]],
       "Library's_module_initializers_failed %S"],
    k =
      [0,
       [11, "Inconsistent_implementation ", [3, 0, 0]],
       "Inconsistent_implementation %S"],
    l =
      [0,
       [11, "Module_already_loaded ", [3, 0, 0]],
       "Module_already_loaded %S"],
    m =
      [0,
       [11, "Private_library_cannot_implement_interface ", [3, 0, 0]],
       "Private_library_cannot_implement_interface %S"];
   function error_message(param){
    if(typeof param === "number") return cst_this_object_file_uses_unsa;
    switch(param[0]){
      case 0:
       var name = param[1];
       return Stdlib[28].call(null, name, cst_is_not_an_object_file);
      case 1:
       var name$0 = param[1];
       return Stdlib[28].call(null, cst_interface_mismatch_on, name$0);
      case 2:
       var name$1 = param[1];
       return Stdlib[28].call(null, cst_no_implementation_availabl, name$1);
      case 3:
       var match = param[2], name$2 = param[1];
       switch(match[0]){
         case 0:
          var
           s = match[1],
           a = Stdlib[28].call(null, s, cst),
           b = Stdlib[28].call(null, cst_Reference_to_undefined_glo, a),
           c = Stdlib[28].call(null, cst$0, b),
           d = Stdlib[28].call(null, name$2, c);
          return Stdlib[28].call(null, cst_error_while_linking, d);
         case 1:
          var
           s$0 = match[1],
           e = Stdlib[28].call(null, s$0, cst_is_not_available),
           f = Stdlib[28].call(null, cst_The_external_function, e),
           g = Stdlib[28].call(null, cst$1, f),
           h = Stdlib[28].call(null, name$2, g);
          return Stdlib[28].call(null, cst_error_while_linking$0, h);
         default:
          var
           s$1 = match[1],
           i = Stdlib[28].call(null, s$1, cst_is_not_yet_initialized),
           j = Stdlib[28].call(null, cst_The_module, i),
           k = Stdlib[28].call(null, cst$2, j),
           l = Stdlib[28].call(null, name$2, k);
          return Stdlib[28].call(null, cst_error_while_linking$1, l);
       }
      case 4:
       var name$3 = param[1];
       return Stdlib[28].call(null, cst_corrupted_interface_file, name$3);
      case 5:
       var exn = param[1], m = Stdlib_Printexc[1].call(null, exn);
       return Stdlib[28].call(null, cst_error_loading_shared_libra, m);
      case 6:
       var exn$0 = param[1], n = Stdlib_Printexc[1].call(null, exn$0);
       return Stdlib[28].call(null, cst_execution_of_module_initia, n);
      case 7:
       var name$4 = param[1];
       return Stdlib[28].call(null, cst_implementation_mismatch_on, name$4);
      case 8:
       var
        name$5 = param[1],
        o = Stdlib[28].call(null, name$5, cst_is_already_loaded_either_b);
       return Stdlib[28].call(null, cst_The_module$0, o);
      default:
       var
        name$6 = param[1],
        p = Stdlib[28].call(null, name$6, cst_cannot_be_implemented_by_a);
       return Stdlib[28].call(null, cst_The_interface, p);
    }
   }
   Stdlib_Printexc[9].call
    (null,
     function(param){
      var tag = param[1];
      if(tag !== Error) return 0;
      var err = param[2];
      if(typeof err === "number")
       var msg = cst_Unsafe_file;
      else
       switch(err[0]){
         case 0:
          var s = err[1], msg = caml_call1(Stdlib_Printf[4].call(null, b), s);
          break;
         case 1:
          var
           s$0 = err[1],
           msg = caml_call1(Stdlib_Printf[4].call(null, c), s$0);
          break;
         case 2:
          var
           s$1 = err[1],
           msg = caml_call1(Stdlib_Printf[4].call(null, d), s$1);
          break;
         case 3:
          var match = err[2], s$2 = err[1];
          switch(match[0]){
            case 0:
             var
              s$3 = match[1],
              msg = caml_call2(Stdlib_Printf[4].call(null, e), s$2, s$3);
             break;
            case 1:
             var
              s$4 = match[1],
              msg = caml_call2(Stdlib_Printf[4].call(null, f), s$2, s$4);
             break;
            default:
             var
              s$5 = match[1],
              msg = caml_call2(Stdlib_Printf[4].call(null, g), s$2, s$5);
          }
          break;
         case 4:
          var
           s$6 = err[1],
           msg = caml_call1(Stdlib_Printf[4].call(null, h), s$6);
          break;
         case 5:
          var
           exn = err[1],
           n = Stdlib_Printexc[1].call(null, exn),
           msg = caml_call1(Stdlib_Printf[4].call(null, i), n);
          break;
         case 6:
          var
           exn$0 = err[1],
           o = Stdlib_Printexc[1].call(null, exn$0),
           msg = caml_call1(Stdlib_Printf[4].call(null, j), o);
          break;
         case 7:
          var
           s$7 = err[1],
           msg = caml_call1(Stdlib_Printf[4].call(null, k), s$7);
          break;
         case 8:
          var
           name = err[1],
           msg = caml_call1(Stdlib_Printf[4].call(null, l), name);
          break;
         default:
          var
           name$0 = err[1],
           msg = caml_call1(Stdlib_Printf[4].call(null, m), name$0);
       }
      return [0, caml_call1(Stdlib_Printf[4].call(null, a), msg)];
     });
   var Dynlink_types = [0, Error, error_message];
   runtime.caml_register_global(42, Dynlink_types, "Dynlink_types");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dynlink_platform_intf
//# shape: Dynlink_platform_intf:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dynlink_platform_intf = [0];
   runtime.caml_register_global
    (0, Dynlink_platform_intf, "Dynlink_platform_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dynlink_common
//# unitInfo: Requires: CamlinternalLazy, Dynlink_compilerlibs, Dynlink_types, Stdlib, Stdlib__Filename, Stdlib__Format, Stdlib__List, Stdlib__Printf, Stdlib__Sys
//# shape: Dynlink_common:[F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = ", ",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Dynlink_types = global_data.Dynlink_types,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Filename = global_data.Stdlib__Filename,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Format = global_data.Stdlib__Format,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Dynlink_compilerlibs = global_data.Dynlink_compilerlibs,
    include = Dynlink_compilerlibs[4][13][4],
    Set = include[68],
    Map = include[69],
    empty = Map[1],
    mem = Map[3],
    add = Map[4],
    fold = Map[13],
    find = Map[28],
    a = [0, [11, cst, 0], cst],
    b =
      [0,
       [2,
        0,
        [11, ": symbols multiply-defined ", [2, 0, [11, ": ", [15, 0]]]]],
       "%s: symbols multiply-defined %s: %a"],
    cst_in_the_executable_file = "in the executable file",
    c =
      [0,
       [11,
        "between the executable file (and any existing dynamically-loaded units) and the unit `",
        [2, 0, [11, "' being dynamically loaded from ", [2, 0, 0]]]],
       "between the executable file (and any existing dynamically-loaded units) and the unit `%s' being dynamically loaded from %s"],
    dummy = 0;
   function keys(t){
    return caml_call3
            (fold,
             function(key, data, keys){return caml_call2(Set[4], key, keys);},
             t,
             Set[1]);
   }
   var
    Dynlink_common =
      [0,
       function(P){
        var
         UH = P[1],
         empty$0 = [0, empty, empty, Set[1], Set[1], Set[1], Set[1]],
         global_state = [0, empty$0],
         inited = [0, 0],
         unsafe_allowed = [0, 0];
        function allow_unsafe_modules(b){unsafe_allowed[1] = b; return 0;}
        function check_symbols_disjoint(descr, syms1, syms2){
         var
          exe = Stdlib_Sys[1],
          overlap = caml_call2(Set[8], syms1, syms2),
          c = 1 - caml_call1(Set[2], overlap);
         if(! c) return c;
         var
          e = caml_call1(Set[23], overlap),
          f = Stdlib_Format[13],
          g =
            [0,
             function(ppf, param){
              return Stdlib_Format[129].call(null, ppf)(a);
             }],
          h = Stdlib_Format[123],
          d = runtime.caml_obj_tag(descr);
         function i(a, b){return h(g, f, a, b);}
         var
          j =
            250 === d
             ? descr[1]
             : 246 === d ? CamlinternalLazy[2].call(null, descr) : descr,
          msg = caml_call4(Stdlib_Format[133].call(null, b), exe, j, i, e);
         return Stdlib[2].call(null, msg);
        }
        function init(param){
         if(1 - inited[1]){
          caml_call1(P[2], 0);
          var
           exe = Stdlib_Sys[1],
           match =
             caml_call2
              (P[6],
               [0, empty, empty, Set[1]],
               function
               (param,
                comp_unit,
                interface$,
                implementation,
                defined_symbols_this_unit){
                var
                 defined_symbols = param[3],
                 implems = param[2],
                 ifaces = param[1];
                if(interface$)
                 var
                  crc = interface$[1],
                  ifaces$0 =
                    caml_call3(add, comp_unit, [0, [0, crc], exe], ifaces);
                else
                 var
                  ifaces$0 = caml_call3(add, comp_unit, [0, 0, exe], ifaces);
                if(implementation)
                 var
                  match = implementation[1],
                  state = match[2],
                  crc$0 = match[1],
                  implems$0 =
                    caml_call3(add, comp_unit, [0, crc$0, exe, state], implems);
                else
                 var implems$0 = implems;
                var
                 defined_symbols_this_unit$0 =
                   caml_call1(Set[37], defined_symbols_this_unit);
                check_symbols_disjoint
                 (cst_in_the_executable_file,
                  defined_symbols_this_unit$0,
                  defined_symbols);
                var
                 defined_symbols$0 =
                   caml_call2
                    (Set[7], defined_symbols_this_unit$0, defined_symbols);
                return [0, ifaces$0, implems$0, defined_symbols$0];
               }),
           defined_symbols = match[3],
           implems = match[2],
           ifaces = match[1],
           main_program_units = keys(implems),
           state =
             [0,
              ifaces,
              implems,
              defined_symbols,
              main_program_units,
              main_program_units,
              Set[1]];
          global_state[1] = state;
          inited[1] = 1;
         }
        }
        function set_loaded_implem(filename, ui, implems){
         var a = [0, caml_call1(UH[2], ui), filename, 0];
         return caml_call3(add, caml_call1(UH[1], ui), a, implems);
        }
        function check_interface_imports(filename, ui, ifaces){
         var a = caml_call1(UH[3], ui);
         return Stdlib_List[25].call
                 (null,
                  function(ifaces, param){
                   var crc = param[2], name = param[1];
                   try{var val = caml_call2(find, name, ifaces);}
                   catch(exn$0){
                    var exn = caml_wrap_exception(exn$0);
                    if(exn !== Stdlib[8])
                     throw caml_maybe_attach_backtrace(exn, 0);
                    if(! crc)
                     return caml_call3(add, name, [0, 0, filename], ifaces);
                    var crc$0 = crc[1];
                    return caml_call3
                            (add, name, [0, [0, crc$0], filename], ifaces);
                   }
                   var old_crc = val[1];
                   if(old_crc){
                    var old_crc$0 = old_crc[1];
                    if(crc){
                     var crc$1 = crc[1];
                     if(old_crc$0 !== crc$1)
                      throw caml_maybe_attach_backtrace
                             ([0, Dynlink_types[1], [1, name]], 1);
                     return ifaces;
                    }
                   }
                   else if(crc){
                    var crc$2 = crc[1];
                    return caml_call3
                            (add, name, [0, [0, crc$2], filename], ifaces);
                   }
                   return ifaces;
                  },
                  ifaces,
                  a);
        }
        function check_implementation_imports
        (allowed_units, filename, ui, implems){
         var a = caml_call1(UH[4], ui);
         return Stdlib_List[17].call
                 (null,
                  function(param){
                   var crc = param[2], name = param[1];
                   if(1 - caml_call2(Set[3], name, allowed_units))
                    throw caml_maybe_attach_backtrace
                           ([0, Dynlink_types[1], [2, name]], 1);
                   try{var val = caml_call2(find, name, implems);}
                   catch(exn$0){
                    var exn = caml_wrap_exception(exn$0);
                    if(exn === Stdlib[8])
                     throw caml_maybe_attach_backtrace
                            ([0, Dynlink_types[1], [2, name]], 1);
                    throw caml_maybe_attach_backtrace(exn, 0);
                   }
                   var unit_state = val[3], old_crc = val[1];
                   if(old_crc){
                    var old_crc$0 = old_crc[1];
                    if(crc){
                     var crc$0 = crc[1];
                     if(old_crc$0 !== crc$0)
                      throw caml_maybe_attach_backtrace
                             ([0, Dynlink_types[1], [7, name]], 1);
                    }
                   }
                   else if(crc)
                    throw caml_maybe_attach_backtrace
                           ([0, Dynlink_types[1], [7, name]], 1);
                   if(typeof unit_state === "number"){
                    if(unit_state)
                     throw caml_maybe_attach_backtrace
                            ([0, Dynlink_types[1], [3, filename, [2, name]]], 1);
                    return 0;
                   }
                   var i = unit_state[1], a = caml_call1(P[5], 0) < i ? 1 : 0;
                   if(a)
                    throw caml_maybe_attach_backtrace
                           ([0, Dynlink_types[1], [3, filename, [2, name]]], 1);
                   return a;
                  },
                  a);
        }
        function check(filename, units, state, priv){
         Stdlib_List[17].call
          (null,
           function(ui){
            var a = 1 - unsafe_allowed[1], b = a ? caml_call1(UH[6], ui) : a;
            if(b)
             throw caml_maybe_attach_backtrace([0, Dynlink_types[1], 0], 1);
            return b;
           },
           units);
         var
          a =
            Stdlib_List[19].call
             (null, function(ui){return caml_call1(UH[1], ui);}, units),
          new_units = caml_call1(Set[37], a),
          implems =
            Stdlib_List[25].call
             (null,
              function(implems, ui){
               var ifaces = state[1], name = caml_call1(UH[1], ui);
               if(caml_call2(mem, name, implems))
                throw caml_maybe_attach_backtrace
                       ([0, Dynlink_types[1], [8, name]], 1);
               var a = priv ? caml_call2(mem, name, ifaces) : priv;
               if(a)
                throw caml_maybe_attach_backtrace
                       ([0, Dynlink_types[1], [9, name]], 1);
               return caml_call3
                       (add,
                        name,
                        [0, caml_call1(UH[2], ui), filename, 1],
                        implems);
              },
              state[2],
              units),
          ifaces =
            Stdlib_List[25].call
             (null,
              function(ifaces, ui){
               return check_interface_imports(filename, ui, ifaces);
              },
              state[1],
              units),
          allowed_units = caml_call2(Set[7], state[4], new_units);
         Stdlib_List[25].call
          (null,
           function(acc, ui){
            check_implementation_imports(allowed_units, filename, ui, acc);
            return set_loaded_implem(filename, ui, acc);
           },
           implems,
           units);
         var
          defined_symbols =
            Stdlib_List[25].call
             (null,
              function(defined_symbols, ui){
               var
                descr =
                  [246,
                   function(param){
                    var a = caml_call1(UH[1], ui);
                    return caml_call2
                            (Stdlib_Printf[4].call(null, c), a, filename);
                   }],
                a = caml_call1(UH[5], ui),
                symbols = caml_call1(Set[37], a);
               check_symbols_disjoint(descr, symbols, defined_symbols);
               return caml_call2(Set[7], symbols, defined_symbols);
              },
              state[3],
              units);
         if(priv) return state;
         var
          public_dynamically_loaded_unit =
            caml_call2(Set[7], state[6], new_units),
          state$0 =
            [0,
             ifaces,
             implems,
             defined_symbols,
             allowed_units,
             state[5],
             public_dynamically_loaded_unit];
         return state$0;
        }
        function set_allowed_units(allowed_units){
         var
          allowed_units$0 = caml_call1(Set[37], allowed_units),
          state = global_state[1],
          state$0 =
            [0,
             state[1],
             state[2],
             state[3],
             allowed_units$0,
             state[5],
             state[6]];
         global_state[1] = state$0;
         return 0;
        }
        function allow_only(units){
         var
          a = caml_call1(Set[37], units),
          allowed_units = caml_call2(Set[8], global_state[1][4], a),
          state = global_state[1],
          state$0 =
            [0,
             state[1],
             state[2],
             state[3],
             allowed_units,
             state[5],
             state[6]];
         global_state[1] = state$0;
         return 0;
        }
        function prohibit(units){
         var
          a = caml_call1(Set[37], units),
          allowed_units = caml_call2(Set[10], global_state[1][4], a),
          state = global_state[1],
          state$0 =
            [0,
             state[1],
             state[2],
             state[3],
             allowed_units,
             state[5],
             state[6]];
         global_state[1] = state$0;
         return 0;
        }
        function main_program_units(param){
         init(0);
         return caml_call1(Set[23], global_state[1][5]);
        }
        function public_dynamically_loaded_unit(param){
         init(0);
         return caml_call1(Set[23], global_state[1][6]);
        }
        function all_units(param){
         init(0);
         var a = caml_call2(Set[7], global_state[1][5], global_state[1][6]);
         return caml_call1(Set[23], a);
        }
        function load(priv, filename){
         init(0);
         if(Stdlib_Filename[6].call(null, filename))
          var
           a = runtime.caml_sys_getcwd(0),
           filename$0 = Stdlib_Filename[4].call(null, a, filename);
         else
          var filename$0 = filename;
         try{var val = caml_call2(P[7], filename$0, priv);}
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          throw caml_maybe_attach_backtrace
                 ([0, Dynlink_types[1], [5, exn]], 1);
         }
         var units = val[2], handle = val[1];
         try{
          global_state[1] = check(filename$0, units, global_state[1], priv);
          caml_call1(P[8], handle);
          Stdlib_List[17].call
           (null,
            function(unit_header){
             caml_call3(P[9], handle, unit_header, priv);
             var a = 1 - priv;
             if(a){
              var
               state = global_state[1],
               c = state[6],
               d = state[5],
               e = state[4],
               f = state[3],
               g = set_loaded_implem(filename$0, unit_header, state[2]);
              global_state[1] = [0, state[1], g, f, e, d, c];
              var b = 0;
             }
             else
              var b = a;
             return b;
            },
            units);
          var b = caml_call1(P[11], handle);
          return b;
         }
         catch(exn){
          var exn$0 = caml_wrap_exception(exn);
          caml_call1(P[11], handle);
          throw caml_maybe_attach_backtrace(exn$0, 0);
         }
        }
        function loadfile(filename){return load(0, filename);}
        function loadfile_private(filename){return load(1, filename);}
        var
         unsafe_get_global_value = P[10],
         is_native = P[3],
         adapt_filename = P[4];
        return [0,
                is_native,
                loadfile,
                loadfile_private,
                unsafe_get_global_value,
                adapt_filename,
                set_allowed_units,
                allow_only,
                prohibit,
                main_program_units,
                public_dynamically_loaded_unit,
                all_units,
                allow_unsafe_modules];
       }];
   runtime.caml_register_global(13, Dynlink_common, "Dynlink_common");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Dynlink
//# unitInfo: Requires: Assert_failure, Dynlink_common, Dynlink_compilerlibs, Dynlink_types, Stdlib, Stdlib__Char, Stdlib__Digest, Stdlib__List, Stdlib__Printexc, Stdlib__String, Stdlib__Sys
//# shape: Dynlink:[N,N,N,N,N,N,N,N,N,N,N,N,F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   runtime.jsoo_create_file
    ("/static/cmis/dynlink.cmi",
     "Caml1999I031\x84\x95\xa6\xbe\0\0\n\xfa\0\0\x02\x10\0\0\x07\xfb\0\0\x07\xac\xa0'Dynlink\xa0\xb0\xa0)is_native\x01\x01V\xd0\xc0\xb3\x90\xa3$boolE@\x90@\x02\x05\xf5\xe1\0@\0\xc4@\xb0\xc0+dynlink.mliV\x01\x05/\x01\x05/\xc0\x04\x02V\x01\x05/\x01\x05C@@\xa1\x04\x11@@\xa0\xb0\xa0(loadfile\x01\x01W\xd0\xc0\xc1@\xc0\xb3\x90\xa3&stringO@\x90@\x02\x05\xf5\xe1\0@\0\xc5\xc0\xb3\x90\xa3$unitF@\x90@\x02\x05\xf5\xe1\0@\0\xc6@\x02\x05\xf5\xe1\0@\0\xc7@\xb0\xc0\x04\x18\\\x01\x05\xc3\x01\x05\xc3\xc0\x04\x19\\\x01\x05\xc3\x01\x05\xe0@@\xa1\x04(A@\xa0\xb0\xa00loadfile_private\x01\x01X\xd0\xc0\xc1@\xc0\xb3\x90\x04\x17@\x90@\x02\x05\xf5\xe1\0@\0\xc8\xc0\xb3\x90\x04\x15@\x90@\x02\x05\xf5\xe1\0@\0\xc9@\x02\x05\xf5\xe1\0@\0\xca@\xb0\xc0\x04+q\x01\t\xe7\x01\t\xe7\xc0\x04,q\x01\t\xe7\x01\n\f@@\xa1\x04;B@\xa0\xb0\xa0.adapt_filename\x01\x01Y\xd0\xc0\xc1@\xc0\xb3\x90\x04*@\x90@\x02\x05\xf5\xe1\0@\0\xcb\xc0\xb3\x90\x04.@\x90@\x02\x05\xf5\xe1\0@\0\xcc@\x02\x05\xf5\xe1\0@\0\xcd@\xb0\xc0\x04>\0G\x01\x0eG\x01\x0eG\xc0\x04?\0G\x01\x0eG\x01\x0el@@\xa1\x04NC@\xa0\xb0\xa01set_allowed_units\x01\x01Z\xd0\xc0\xc1@\xc0\xb3\x90\xa3$listI\xa0\xc0\xb3\x90\x04C@\x90@\x02\x05\xf5\xe1\0@\0\xce@\x90@\x02\x05\xf5\xe1\0@\0\xcf\xc0\xb3\x90\x04B@\x90@\x02\x05\xf5\xe1\0@\0\xd0@\x02\x05\xf5\xe1\0@\0\xd1@\xb0\xc0\x04X\0M\x01\x0e\xf1\x01\x0e\xf1\xc0\x04Y\0M\x01\x0e\xf1\x01\x0f\x1c@@\xa1\x04hD@\xa0\xb0\xa0*allow_only\x01\x01[\xd0\xc0\xc1@\xc0\xb3\x90\x04\x1a\xa0\xc0\xb3\x90\x04[@\x90@\x02\x05\xf5\xe1\0@\0\xd2@\x90@\x02\x05\xf5\xe1\0@\0\xd3\xc0\xb3\x90\x04Z@\x90@\x02\x05\xf5\xe1\0@\0\xd4@\x02\x05\xf5\xe1\0@\0\xd5@\xb0\xc0\x04p\0Z\x01\x11~\x01\x11~\xc0\x04q\0Z\x01\x11~\x01\x11\xa1@@\xa1\x04\x80E@\xa0\xb0\xa0(prohibit\x01\x01\\\xd0\xc0\xc1@\xc0\xb3\x90\x042\xa0\xc0\xb3\x90\x04s@\x90@\x02\x05\xf5\xe1\0@\0\xd6@\x90@\x02\x05\xf5\xe1\0@\0\xd7\xc0\xb3\x90\x04r@\x90@\x02\x05\xf5\xe1\0@\0\xd8@\x02\x05\xf5\xe1\0@\0\xd9@\xb0\xc0\x04\x88\0_\x01\x12o\x01\x12o\xc0\x04\x89\0_\x01\x12o\x01\x12\x91@@\xa1\x04\x98F@\xa0\xb0\xa02main_program_units\x01\x01]\xd0\xc0\xc1@\xc0\xb3\x90\x04\x81@\x90@\x02\x05\xf5\xe1\0@\0\xda\xc0\xb3\x90\x04N\xa0\xc0\xb3\x90\x04\x8f@\x90@\x02\x05\xf5\xe1\0@\0\xdb@\x90@\x02\x05\xf5\xe1\0@\0\xdc@\x02\x05\xf5\xe1\0@\0\xdd@\xb0\xc0\x04\xa0\0e\x01\x13\xad\x01\x13\xad\xc0\x04\xa1\0e\x01\x13\xad\x01\x13\xd9@@\xa1\x04\xb0G@\xa0\xb0\xa0?public_dynamically_loaded_units\x01\x01^\xd0\xc0\xc1@\xc0\xb3\x90\x04\x99@\x90@\x02\x05\xf5\xe1\0@\0\xde\xc0\xb3\x90\x04f\xa0\xc0\xb3\x90\x04\xa7@\x90@\x02\x05\xf5\xe1\0@\0\xdf@\x90@\x02\x05\xf5\xe1\0@\0\xe0@\x02\x05\xf5\xe1\0@\0\xe1@\xb0\xc0\x04\xb8\0i\x01\x14I\x01\x14I\xc0\x04\xb9\0i\x01\x14I\x01\x14\x82@@\xa1\x04\xc8H@\xa0\xb0\xa0)all_units\x01\x01_\xd0\xc0\xc1@\xc0\xb3\x90\x04\xb1@\x90@\x02\x05\xf5\xe1\0@\0\xe2\xc0\xb3\x90\x04~\xa0\xc0\xb3\x90\x04\xbf@\x90@\x02\x05\xf5\xe1\0@\0\xe3@\x90@\x02\x05\xf5\xe1\0@\0\xe4@\x02\x05\xf5\xe1\0@\0\xe5@\xb0\xc0\x04\xd0\0n\x01\x15O\x01\x15O\xc0\x04\xd1\0n\x01\x15O\x01\x15r@@\xa1\x04\xe0I@\xa0\xb0\xa04allow_unsafe_modules\x01\x01`\xd0\xc0\xc1@\xc0\xb3\x90\x04\xe1@\x90@\x02\x05\xf5\xe1\0@\0\xe6\xc0\xb3\x90\x04\xcd@\x90@\x02\x05\xf5\xe1\0@\0\xe7@\x02\x05\xf5\xe1\0@\0\xe8@\xb0\xc0\x04\xe3\0s\x01\x16*\x01\x16*\xc0\x04\xe4\0s\x01\x16*\x01\x16Q@@\xa1\x04\xf3J@\xa0\xc1\xa0-linking_error\x01\x01a\b\0\x008\0@@\xa1\xa0\xe0\xa00Undefined_global\x01\x01\x17\x90\xa0\xc0\xb3\x90\x04\xe7@\x90@\x02\x05\xf5\xe1\0@\0\xeb@@\xb0\xc0\x04\xf7\0~\x01\x18 \x01\x18\"\xc0\x04\xf8\0~\x01\x18 \x01\x18>@@\xa1\x05\x01\x07L\xa0\xe0\xa05Unavailable_primitive\x01\x01\x18\x90\xa0\xc0\xb3\x90\x04\xf5@\x90@\x02\x05\xf5\xe1\0@\0\xea@@\xb0\xc0\x05\x01\x05\0\x7f\x01\x18?\x01\x18A\xc0\x05\x01\x06\0\x7f\x01\x18?\x01\x18b@@\xa1\x05\x01\x15M\xa0\xe0\xa04Uninitialized_global\x01\x01\x19\x90\xa0\xc0\xb3\x90\x05\x01\x03@\x90@\x02\x05\xf5\xe1\0@\0\xe9@@\xb0\xc0\x05\x01\x13\x01\0\x80\x01\x18c\x01\x18e\xc0\x05\x01\x14\x01\0\x80\x01\x18c\x01\x18\x85@@\xa1\x05\x01#N@@@@@@@@\xb0\xc0\x05\x01\x17\0}\x01\x18\x03\x01\x18\x03\x04\x04@@@@\xa1\x05\x01&KA@\xa0\xc1\xa0%error\x01\x01b\b\0\x008\0@@\xa1\xa0\xe0\xa03Not_a_bytecode_file\x01\x01\x1b\x90\xa0\xc0\xb3\x90\x05\x01\x1a@\x90@\x02\x05\xf5\xe1\0@\0\xf6@@\xb0\xc0\x05\x01*\x01\0\x83\x01\x18\x9c\x01\x18\x9e\xc0\x05\x01+\x01\0\x83\x01\x18\x9c\x01\x18\xbd@@\xa1\x05\x01:P\xa0\xe0\xa03Inconsistent_import\x01\x01\x1c\x90\xa0\xc0\xb3\x90\x05\x01(@\x90@\x02\x05\xf5\xe1\0@\0\xf5@@\xb0\xc0\x05\x018\x01\0\x84\x01\x18\xbe\x01\x18\xc0\xc0\x05\x019\x01\0\x84\x01\x18\xbe\x01\x18\xdf@@\xa1\x05\x01HQ\xa0\xe0\xa00Unavailable_unit\x01\x01\x1d\x90\xa0\xc0\xb3\x90\x05\x016@\x90@\x02\x05\xf5\xe1\0@\0\xf4@@\xb0\xc0\x05\x01F\x01\0\x85\x01\x18\xe0\x01\x18\xe2\xc0\x05\x01G\x01\0\x85\x01\x18\xe0\x01\x18\xfe@@\xa1\x05\x01VR\xa0\xe0\xa0+Unsafe_file\x01\x01\x1e\x90@@\xb0\xc0\x05\x01O\x01\0\x86\x01\x18\xff\x01\x19\x01\xc0\x05\x01P\x01\0\x86\x01\x18\xff\x01\x19\x0e@@\xa1\x05\x01_S\xa0\xe0\xa0-Linking_error\x01\x01\x1f\x90\xa0\xc0\xb3\x90\x05\x01M@\x90@\x02\x05\xf5\xe1\0@\0\xf3\xa0\xc0\xb3\x90\x04x@\x90@\x02\x05\xf5\xe1\0@\0\xf2@@\xb0\xc0\x05\x01b\x01\0\x87\x01\x19\x0f\x01\x19\x11\xc0\x05\x01c\x01\0\x87\x01\x19\x0f\x01\x19:@@\xa1\x05\x01rT\xa0\xe0\xa03Corrupted_interface\x01\x01 \x90\xa0\xc0\xb3\x90\x05\x01`@\x90@\x02\x05\xf5\xe1\0@\0\xf1@@\xb0\xc0\x05\x01p\x01\0\x88\x01\x19;\x01\x19=\xc0\x05\x01q\x01\0\x88\x01\x19;\x01\x19\\@@\xa1\x05\x01\x80U\xa0\xe0\xa0;Cannot_open_dynamic_library\x01\x01!\x90\xa0\xc0\xb3\x90\xa3#exnG@\x90@\x02\x05\xf5\xe1\0@\0\xf0@@\xb0\xc0\x05\x01\x80\x01\0\x89\x01\x19]\x01\x19_\xc0\x05\x01\x81\x01\0\x89\x01\x19]\x01\x19\x83@@\xa1\x05\x01\x90V\xa0\xe0\xa0\t$Library's_module_initializers_failed\x01\x01\"\x90\xa0\xc0\xb3\x90\x04\x10@\x90@\x02\x05\xf5\xe1\0@\0\xef@@\xb0\xc0\x05\x01\x8e\x01\0\x8a\x01\x19\x84\x01\x19\x86\xc0\x05\x01\x8f\x01\0\x8a\x01\x19\x84\x01\x19\xb3@@\xa1\x05\x01\x9eW\xa0\xe0\xa0;Inconsistent_implementation\x01\x01#\x90\xa0\xc0\xb3\x90\x05\x01\x8c@\x90@\x02\x05\xf5\xe1\0@\0\xee@@\xb0\xc0\x05\x01\x9c\x01\0\x8b\x01\x19\xb4\x01\x19\xb6\xc0\x05\x01\x9d\x01\0\x8b\x01\x19\xb4\x01\x19\xdd@@\xa1\x05\x01\xacX\xa0\xe0\xa05Module_already_loaded\x01\x01$\x90\xa0\xc0\xb3\x90\x05\x01\x9a@\x90@\x02\x05\xf5\xe1\0@\0\xed@@\xb0\xc0\x05\x01\xaa\x01\0\x8c\x01\x19\xde\x01\x19\xe0\xc0\x05\x01\xab\x01\0\x8c\x01\x19\xde\x01\x1a\x01@@\xa1\x05\x01\xbaY\xa0\xe0\xa0\t*Private_library_cannot_implement_interface\x01\x01%\x90\xa0\xc0\xb3\x90\x05\x01\xa8@\x90@\x02\x05\xf5\xe1\0@\0\xec@@\xb0\xc0\x05\x01\xb8\x01\0\x8d\x01\x1a\x02\x01\x1a\x04\xc0\x05\x01\xb9\x01\0\x8d\x01\x1a\x02\x01\x1a:@@\xa1\x05\x01\xc8Z@@@@@@@@\xb0\xc0\x05\x01\xbc\x01\0\x82\x01\x18\x87\x01\x18\x87\x04\x04@@@@\xa1\x05\x01\xcbOA@\xa0\xc2\xa0%Error\x01\x01c\b\0\0 \0\x90\x04H@\x90\xa0\xc0\xb3\x90\x04\xae@\x90@\x02\x05\xf5\xe1\0@\0\xf7@@A\xb0\xc0&_none_@@\0\xff\x04\x02A@\xa1\x05\x01\xdb[B@\xa0\xb0\xa0-error_message\x01\x01d\xd0\xc0\xc1@\xc0\xb3\x04\x0f@\x90@\x02\x05\xf5\xe1\0@\0\xf8\xc0\xb3\x90\x05\x01\xcd@\x90@\x02\x05\xf5\xe1\0@\0\xf9@\x02\x05\xf5\xe1\0@\0\xfa@\xb0\xc0\x05\x01\xdd\x01\0\x96\x01\x1b\x80\x01\x1b\x80\xc0\x05\x01\xde\x01\0\x96\x01\x1b\x80\x01\x1b\xa3@@\xa1\x05\x01\xed\\@\xa0\xb0\xa07unsafe_get_global_value\x01\x01e\xd0\xc0\xc1\x906bytecode_or_asm_symbol\xc0\xb3\x90\x05\x01\xde@\x90@\x02\x05\xf5\xe1\0@\0\xfb\xc0\xb3\x90\xa3&optionJ\xa0\xc0\xb3\xa1\xa1\x90\x92&Stdlib#Obj!t@\x90@\x02\x05\xf5\xe1\0@\0\xfc@\x90@\x02\x05\xf5\xe1\0@\0\xfd@\x02\x05\xf5\xe1\0@\0\xfe@\xb0\xc0\x05\x01\xff\x01\0\x9b\x01\x1b\xea\x01\x1b\xea\xc0\x05\x02\0\x01\0\x9b\x01\x1b\xea\x01\x1c5@@\xa1\x05\x02\x0f]@@\x84\x95\xa6\xbe\0\0\0\xa7\0\0\0\x19\0\0\0]\0\0\0K\xa0\xa0'Dynlink\x900\xb5B\xe5g*\xd4/[\x83\x8fX\x91;\xa1TV\xa0\xa0+Stdlib__Obj\x900%yM)\xf7\xf4\x01\x87h\xea\x90\x0e3\x1a+\xf3\xa0\xa0-Stdlib__Int32\x900\xa7\x1e\xa5#\x800w\x06G\x16_e\x9f\x80\xb1\xab\xa0\xa0&Stdlib\x900y\xb0\xe9\xd3\xb6\xf7\xfe\xd0~\xb3\xcc*\xbb\x96\x1b\x91\xa0\xa08CamlinternalFormatBasics\x900\x8f\x8fcEXy\x8e\xe4\b\xdf<P\xa5S\x9b\x15@\x84\x95\xa6\xbe\0\0\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\x05\xa0\x90@@");
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\0\0\0\x01\0\0\0",
    Stdlib = global_data.Stdlib,
    Dynlink_compilerlibs = global_data.Dynlink_compilerlibs,
    Dynlink_types = global_data.Dynlink_types,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Char = global_data.Stdlib__Char,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Digest = global_data.Stdlib__Digest,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_String = global_data.Stdlib__String,
    Dynlink_common = global_data.Dynlink_common;
   function name(t){return t[1];}
   function crc(t){return 0;}
   function interface_imports(t){return t[5];}
   function implementation_imports(t){
    var
     a = Dynlink_compilerlibs[46][19].call(null, t[4]),
     required = Stdlib[37].call(null, t[6], a),
     required$0 =
       Stdlib_List[41].call
         (null,
          function(id){
           var a = 1 - Dynlink_compilerlibs[25][22].call(null, id);
           if(a)
            var
             c = Dynlink_compilerlibs[25][15].call(null, id),
             b = 1 - Stdlib_String[14].call(null, c, 46);
           else
            var b = a;
           return b;
          })
        (required);
    return Stdlib_List[19].call
            (null,
             function(ident){
              return [0, Dynlink_compilerlibs[25][15].call(null, ident), 0];
             },
             required$0);
   }
   function defined_symbols(t){
    var a = Dynlink_compilerlibs[46][18].call(null, t[4]);
    return Stdlib_List[19].call
            (null,
             function(ident){
              return Dynlink_compilerlibs[25][15].call(null, ident);
             },
             a);
   }
   function unsafe_module(t){return 0 !== t[7] ? 1 : 0;}
   var
    Unit_header =
      [0,
       name,
       crc,
       interface_imports,
       implementation_imports,
       defined_symbols,
       unsafe_module],
    default_crcs = [0, 0],
    default_global_map = [0, Dynlink_compilerlibs[46][20]],
    cst_The_dynlink_cma_library_ca =
      "The dynlink.cma library cannot be used inside the OCaml toplevel";
   function init(param){
    if(Stdlib_Sys[3][1]) Stdlib[1].call(null, cst_The_dynlink_cma_library_ca);
    default_crcs[1] = Dynlink_compilerlibs[46][11].call(null, 0);
    default_global_map[1] = Dynlink_compilerlibs[46][21].call(null, 0);
    return 0;
   }
   var
    cst_Should_never_be_called_for =
      "Should never be called for bytecode dynlink",
    a = [0, [0, 0, 0]],
    b = [0, "otherlibs/dynlink/dynlink.ml", 120, 33];
   function adapt_filename(f){return f;}
   function num_globals_inited(param){
    return Dynlink_compilerlibs[4][1].call
            (null, cst_Should_never_be_called_for);
   }
   function fold_initial_units(init, f){
    return Stdlib_List[25].call
            (null,
             function(acc, param){
              var
               interface$ = param[2],
               comp_unit = param[1],
               id = Dynlink_compilerlibs[25][12].call(null, comp_unit),
               defined =
                 Dynlink_compilerlibs[46][26].call
                  (null, default_global_map[1], id),
               implementation = defined ? a : 0,
               defined_symbols = defined ? [0, comp_unit, 0] : 0;
              return caml_call5
                      (f,
                       acc,
                       comp_unit,
                       interface$,
                       implementation,
                       defined_symbols);
             },
             init,
             default_crcs[1]);
   }
   function run_shared_startup(param){return 0;}
   function run(param, unit_header, priv){
    var
     file_digest = param[3],
     file_name = param[2],
     ic = param[1],
     old_state = Dynlink_compilerlibs[46][21].call(null, 0);
    Stdlib[90].call(null, ic, unit_header[2]);
    var
     code_size = unit_header[3] + 8 | 0,
     code = Dynlink_compilerlibs[4][46][1].call(null, code_size);
    Dynlink_compilerlibs[4][46][8].call(null, code, ic, unit_header[3]);
    var a = Stdlib_Char[1].call(null, Dynlink_compilerlibs[42][41]);
    Dynlink_compilerlibs[4][46][4].call(null, code, unit_header[3], a);
    Dynlink_compilerlibs[4][46][6].call
     (null, cst, 0, code, unit_header[3] + 1 | 0, 7);
    try{
     Dynlink_compilerlibs[46][2].call(null, code, unit_header[4]);
     Dynlink_compilerlibs[46][17].call(null, unit_header[4]);
     Dynlink_compilerlibs[46][12].call(null, 0);
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Dynlink_compilerlibs[46][27])
      throw caml_maybe_attach_backtrace(exn, 0);
     var error = exn[2];
     switch(error[0]){
       case 0:
        var s = error[1], new_error = [0, s]; break;
       case 1:
        var s$0 = error[1], new_error = [1, s$0]; break;
       case 2:
        throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
       default: var s$1 = error[1], new_error = [2, s$1];
     }
     throw caml_maybe_attach_backtrace
            ([0, Dynlink_types[1], [3, file_name, new_error]], 1);
    }
    var
     c = Stdlib[28].call(null, file_digest, unit_header[1]),
     digest = Stdlib_Digest[3].call(null, c),
     events =
       0 === unit_header[9]
        ? [0]
        : (Stdlib
            [90].call
           (null, ic, unit_header[9]),
          [0, Stdlib[89].call(null, ic)]);
    if(priv) Dynlink_compilerlibs[46][23].call(null, old_state);
    var clos = runtime.caml_reify_bytecode(code, events, [0, digest])[2];
    try{caml_call1(clos, 0); var d = 0; return d;}
    catch(exn){
     var
      exn$0 = caml_wrap_exception(exn),
      exn$1 = [0, Dynlink_types[1], [6, exn$0]];
     runtime.caml_restore_raw_backtrace
      (exn$1, Stdlib_Printexc[12].call(null, 0));
     throw caml_maybe_attach_backtrace(exn$1, 0);
    }
   }
   function load(file_name, param){
    var
     ic = Stdlib[80].call(null, file_name),
     file_digest = runtime.caml_md5_chan(ic, -1);
    Stdlib[90].call(null, ic, 0);
    try{
     try{
      var
       buffer =
         Stdlib[86].call
          (null,
           ic,
           runtime.caml_ml_string_length(Dynlink_compilerlibs[2][25]));
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[12])
       throw caml_maybe_attach_backtrace
              ([0, Dynlink_types[1], [0, file_name]], 1);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     var handle = [0, ic, file_name, file_digest];
     if(buffer === Dynlink_compilerlibs[2][25]){
      var compunit_pos = Stdlib[88].call(null, ic);
      Stdlib[90].call(null, ic, compunit_pos);
      var cu = Stdlib[89].call(null, ic), a = [0, handle, [0, cu, 0]];
     }
     else{
      if(buffer !== Dynlink_compilerlibs[2][26])
       throw caml_maybe_attach_backtrace
              ([0, Dynlink_types[1], [0, file_name]], 1);
      var toc_pos = Stdlib[88].call(null, ic);
      Stdlib[90].call(null, ic, toc_pos);
      var lib = Stdlib[89].call(null, ic);
      try{
       var
        b = Stdlib_List[19].call(null, Dynlink_compilerlibs[44][1], lib[5]);
       Dynlink_compilerlibs[44][2].call(null, 1, b);
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       throw caml_maybe_attach_backtrace([0, Dynlink_types[1], [5, exn$0]], 1);
      }
      var a = [0, handle, lib[1]];
     }
     return a;
    }
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0);
     Stdlib[93].call(null, ic);
     throw caml_maybe_attach_backtrace(exc, 0);
    }
   }
   function unsafe_get_global_value(bytecode_or_asm_symbol){
    var id = Dynlink_compilerlibs[25][12].call(null, bytecode_or_asm_symbol);
    try{var obj = Dynlink_compilerlibs[46][13].call(null, id);}
    catch(exn){return 0;}
    return [0, obj];
   }
   function finish(param){
    var ic = param[1];
    return Stdlib[93].call(null, ic);
   }
   var
    include =
      Dynlink_common[1].call
       (null,
        [0,
         Unit_header,
         init,
         0,
         adapt_filename,
         num_globals_inited,
         fold_initial_units,
         load,
         run_shared_startup,
         run,
         unsafe_get_global_value,
         finish]),
    is_native = include[1],
    loadfile = include[2],
    loadfile_private = include[3],
    unsafe_get_global_value$0 = include[4],
    adapt_filename$0 = include[5],
    set_allowed_units = include[6],
    allow_only = include[7],
    prohibit = include[8],
    main_program_units = include[9],
    public_dynamically_loaded_unit = include[10],
    all_units = include[11],
    allow_unsafe_modules = include[12],
    Error = Dynlink_types[1],
    error_message = Dynlink_types[2],
    Dynlink =
      [0,
       is_native,
       loadfile,
       loadfile_private,
       adapt_filename$0,
       set_allowed_units,
       allow_only,
       prohibit,
       main_program_units,
       public_dynamically_loaded_unit,
       all_units,
       allow_unsafe_modules,
       Error,
       error_message,
       unsafe_get_global_value$0];
   runtime.caml_register_global(16, Dynlink, "Dynlink");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
