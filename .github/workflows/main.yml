name: Build and deploy xeus-ocaml

on:
  # Runs on pushes to the main branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2

      - name: Set-up OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5

      - name: Build js_of_ocaml kernel
        run: |
          opam install dune js_of_ocaml lwt graphics js_of_ocaml-lwt js_of_ocaml-ppx js_of_ocaml-toplevel base
          opam exec -- dune build --root src/ocaml/ 

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.9.1 # Pin to a specific version for stability
        with:
          # Enable caching. This is the default but it's good to be explicit.
          cache: false

      - name: Build jupyterlite
        run: pixi run -e jupyter jupyter_build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: './_output'

      - name: Build conda package
        uses: prefix-dev/rattler-build-action@v0.2.34
        with:
          build-args: -c https://repo.prefix.dev/emscripten-forge-dev -c conda-forge --target-platform emscripten-wasm32
          recipe-path: recipe/recipe.yaml

      - name: Upload conda package
        run: |
          for pkg in $(find output -type f \( -name "*.conda" -o -name "*.tar.bz2" \) ); do
            echo "Uploading ${pkg}"
            rattler-build upload prefix -c emscripten "${pkg}"
          done

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
