name: CI, Release, and Deploy

on:
  # Trigger on pushes to the main branch and on new tags
  push:
    branches: ["main"]
    tags: ["v*.*.*"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Grant permissions for GitHub token
permissions:
  contents: write # Needed to create releases, upload assets, and push tags
  pages: write
  id-token: write

# Concurrency settings to manage deployments
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  #============================================================================
  # JOB 1: Continuous Integration on push to the `main` branch
  # This job builds the kernel/extension based on changed files and creates tags.
  #============================================================================
  ci_build:
    name: CI Build & Auto-Tag
    # This job ONLY runs on pushes to the 'main' branch, not on tags.
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # THIS IS THE CRITICAL LINE THAT WAS MISSING.
          # It uses your Personal Access Token to grant push permissions.
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Install CMake
        uses: ssrobins/install-cmake@v1

      - name: Setup Pixi environment
        uses: prefix-dev/setup-pixi@v0.9.1
        with:
          cache: true

      - name: Check for changed files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            kernel:
              - 'src/**'
              - 'include/**'
              - 'CMakeLists.txt'
              - 'pixi.toml'
            extension:
              - 'extension/**'
            recipe:
              - 'recipe/recipe.yaml'

      - name: Build and install kernel (if source changed)
        if: steps.filter.outputs.kernel
        run: pixi run -e kernel install

      - name: Install & Build JupyterLab extension (if source changed)
        if: steps.filter.outputs.extension
        run: |
          pixi run -e default extension-setup
          pixi run -e default extension-build

      - name: Extract version from recipe (if recipe changed)
        if: steps.filter.outputs.recipe
        id: get_version
        uses: mikefarah/yq@v4
        with:
          cmd: yq e '.context.version' 'recipe/recipe.yaml'

      - name: Create and Push Tag on Version Bump (if recipe changed)
        if: steps.filter.outputs.recipe
        run: |
          VERSION=${{ steps.get_version.outputs.result }}
          TAG="v${VERSION}"
          echo "Version from recipe is ${VERSION}"
          
          if git rev-parse "${TAG}" >/dev/null 2>&1; then
            echo "Tag ${TAG} already exists. No new tag will be created."
          else
            echo "Tag ${TAG} does not exist. Creating and pushing new tag."
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git tag "${TAG}" -m "Release version ${VERSION}"
            # This push is now authenticated via the PAT provided in the checkout step
            git push origin "${TAG}"
          fi
      
  #============================================================================
  # JOB 2: Build, package, and create a release when a new tag is pushed
  #============================================================================
  release_and_deploy:
    name: Create Release and Deploy Pages
    # This job ONLY runs when a tag is pushed.
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    # THIS JOB IS INDEPENDENT. It is triggered by the tag push event, not by the ci_build job.
    # The `needs` key has been removed.
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pixi environment
        uses: prefix-dev/setup-pixi@v0.9.1
        with:
          cache: true

      - name: Build and install the xeus-ocaml kernel
        run: pixi run -e kernel install

      - name: Build the JupyterLite application
        run: pixi run -e default build

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: Upload JupyterLite artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v4
        with:
          path: './_output'

      - name: Build conda package
        id: build-conda
        uses: prefix-dev/rattler-build-action@v0.2.34
        with:
          recipe-path: recipe/recipe.yaml
          build-args: >-
            -c https://repo.prefix.dev/emscripten-forge-dev 
            -c conda-forge 
            --target-platform emscripten-wasm32

      - name: Create GitHub Release and Upload Conda Package
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.build-conda.outputs.pkg-path }}
          
  #============================================================================
  # JOB 3: Deploy the JupyterLite site to GitHub Pages
  #============================================================================
  deploy_pages:
    name: Deploy to GitHub Pages
    if: startsWith(github.ref, 'refs/tags/')
    needs: release_and_deploy
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy JupyterLite to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4